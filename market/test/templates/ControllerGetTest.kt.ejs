
package ru.yandex.market.wms.<%= packageName %>.controller;

import com.github.springtestdbunit.annotation.DatabaseSetup
import com.github.springtestdbunit.annotation.ExpectedDatabase
import com.github.springtestdbunit.assertion.DatabaseAssertionMode
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.mockito.Mockito
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.mock.mockito.MockBean
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders
import ru.yandex.market.wms.common.spring.IntegrationTest
import ru.yandex.market.wms.<%= packageName %>.HttpAssert

class <%= className %>ControllerGetTest : IntegrationTest() {

    private val httpAssert = HttpAssert { mockMvc }

    @BeforeEach
    fun reset() {
        Mockito.reset(reporterClient)
    }

    @Test
    @DatabaseSetup("/controller/<%= packageName %>>/<%= entityName %>/get/before_empty.xml")
    fun `GET <%= entityName %> empty`() {
        httpAssert.assertApiCall(
            MockMvcRequestBuilders.get("/<%= entityName %>"),
            responseFile = "controller/<%= packageName %>/<%= entityName %>/get/<%= entityName %>_empty_response.json"
        )
    }

    @Test
    @DatabaseSetup("/controller/<%= packageName %>/<%= entityName %>/get/before_fill.xml")
    fun `GET <%= entityName %>`() {
        httpAssert.assertApiCall(
            MockMvcRequestBuilders.get("/<%= entityName %>"),
            responseFile = "controller/<%= packageName %>/<%= entityName %>/get/<%= entityName %>_default_response.json"
        )
    }
}
