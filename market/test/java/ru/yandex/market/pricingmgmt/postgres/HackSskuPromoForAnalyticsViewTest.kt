package ru.yandex.market.pricingmgmt.postgres

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.springframework.jdbc.core.RowMapper
import ru.yandex.market.common.test.db.DbUnitDataSet
import ru.yandex.market.pricingmgmt.postgres.DatabaseUtils.orNull
import java.sql.Timestamp

class HackSskuPromoForAnalyticsViewTest : AbstractDatabaseTest() {
    companion object {
        const val Sql = """
SELECT id,
       promo,
       start_promo_date,
       end_promo_date,
       wave,
       start_wave_date,
       end_wave_date,
       status,
       discount_type,
       analitical_wave,
       analitical_start_wave_date,
       analitical_end_wave_date,
       ssku,
       old_price,
       current_price,
       promo_price,
       discount,
       needed_purchase,
       purchase_price,
       promo_purchase_price,
       promo_purchase_price_start_date,
       promo_purchase_price_finish_date,
       retro_by_volume_percent,
       retro_by_volume,
       other_retro_percent,
       other_retro,
       category_manager,
       modified_by,
       modified_datetime,
       discount_new,
       retro_by_volume_percent_new,
       other_retro_percent_new,
       promo_delivery_date,
       local_assortment_home_region,
       promo_sales_plan_moscow,
       delivery_scheme_moscow,
       promo_sales_plan_st_petersburg,
       delivery_scheme_st_petersburg,
       promo_sales_plan_rostov,
       delivery_scheme_rostov,
       promo_sales_plan_samara,
       delivery_scheme_samara,
       promo_sales_plan_yekaterinburg,
       delivery_scheme_yekaterinburg,
       comment,
       top_offer
from hack_ssku_promo_for_analytics_view;
        """

        data class Item(
            val id: Long?,
            val promo: String?,
            val start_promo_date: Timestamp?,
            val end_promo_date: Timestamp?,
            val wave: String?,
            val start_wave_date: Timestamp?,
            val end_wave_date: Timestamp?,
            val status: String?,
            val discount_type: String?,
            val analitical_wave: String?,
            val analitical_start_wave_date: Timestamp?,
            val analitical_end_wave_date: Timestamp?,
            val ssku: String?,
            val old_price: Long?,
            val current_price: Long?,
            val promo_price: Long?,
            val discount: Int?,
            val needed_purchase: Boolean?,
            val purchase_price: Long?,
            val promo_purchase_price: Long?,
            val promo_purchase_price_start_date: String?,
            val promo_purchase_price_finish_date: String?,
            val retro_by_volume_percent: Int?,
            val retro_by_volume: Long?,
            val other_retro_percent: Int?,
            val other_retro: Long?,
            val category_manager: String?,
            val modified_by: String?,
            val modified_datetime: Timestamp?,
            val discount_new: Float?,
            val retro_by_volume_percent_new: Float?,
            val other_retro_percent_new: Float?,
            val promo_delivery_date: String?,
            val local_assortment_home_region: String?,
            val promo_sales_plan_moscow: Long?,
            val delivery_scheme_moscow: String?,
            val promo_sales_plan_st_petersburg: Long?,
            val delivery_scheme_st_petersburg: String?,
            val promo_sales_plan_rostov: Long?,
            val delivery_scheme_rostov: String?,
            val promo_sales_plan_samara: Long?,
            val delivery_scheme_samara: String?,
            val promo_sales_plan_yekaterinburg: Long?,
            val delivery_scheme_yekaterinburg: String?,
            val comment: String?,
            val top_offer: Int?
        )

        val rowMapper: RowMapper<Item> =
            RowMapper<Item> { rs, _ ->
                Item(
                    id = rs.getLong("id").orNull(rs),
                    promo = rs.getString("promo").orNull(rs),
                    start_promo_date = rs.getTimestamp("start_promo_date").orNull(rs),
                    end_promo_date = rs.getTimestamp("end_promo_date").orNull(rs),
                    wave = rs.getString("wave").orNull(rs),
                    start_wave_date = rs.getTimestamp("start_wave_date").orNull(rs),
                    end_wave_date = rs.getTimestamp("end_wave_date").orNull(rs),
                    status = rs.getString("status").orNull(rs),
                    discount_type = rs.getString("discount_type").orNull(rs),
                    analitical_wave = rs.getString("analitical_wave").orNull(rs),
                    analitical_start_wave_date = rs.getTimestamp("analitical_start_wave_date").orNull(rs),
                    analitical_end_wave_date = rs.getTimestamp("analitical_end_wave_date").orNull(rs),
                    ssku = rs.getString("ssku").orNull(rs),
                    old_price = rs.getLong("old_price").orNull(rs),
                    current_price = rs.getLong("current_price").orNull(rs),
                    promo_price = rs.getLong("promo_price").orNull(rs),
                    discount = rs.getInt("discount").orNull(rs),
                    needed_purchase = rs.getBoolean("needed_purchase").orNull(rs),
                    purchase_price = rs.getLong("purchase_price").orNull(rs),
                    promo_purchase_price = rs.getLong("promo_purchase_price").orNull(rs),
                    promo_purchase_price_start_date = rs.getString("promo_purchase_price_start_date").orNull(rs),
                    promo_purchase_price_finish_date = rs.getString("promo_purchase_price_finish_date").orNull(rs),
                    retro_by_volume_percent = rs.getInt("retro_by_volume_percent").orNull(rs),
                    retro_by_volume = rs.getLong("retro_by_volume").orNull(rs),
                    other_retro_percent = rs.getInt("other_retro_percent").orNull(rs),
                    other_retro = rs.getLong("other_retro").orNull(rs),
                    category_manager = rs.getString("category_manager").orNull(rs),
                    modified_by = rs.getString("modified_by").orNull(rs),
                    modified_datetime = rs.getTimestamp("modified_datetime").orNull(rs),
                    discount_new = rs.getFloat("discount_new").orNull(rs),
                    retro_by_volume_percent_new = rs.getFloat("retro_by_volume_percent_new").orNull(rs),
                    other_retro_percent_new = rs.getFloat("other_retro_percent_new").orNull(rs),
                    promo_delivery_date = rs.getString("promo_delivery_date").orNull(rs),
                    local_assortment_home_region = rs.getString("local_assortment_home_region").orNull(rs),
                    promo_sales_plan_moscow = rs.getLong("promo_sales_plan_moscow").orNull(rs),
                    delivery_scheme_moscow = rs.getString("delivery_scheme_moscow").orNull(rs),
                    promo_sales_plan_st_petersburg = rs.getLong("promo_sales_plan_st_petersburg").orNull(rs),
                    delivery_scheme_st_petersburg = rs.getString("delivery_scheme_st_petersburg").orNull(rs),
                    promo_sales_plan_rostov = rs.getLong("promo_sales_plan_rostov").orNull(rs),
                    delivery_scheme_rostov = rs.getString("delivery_scheme_rostov").orNull(rs),
                    promo_sales_plan_samara = rs.getLong("promo_sales_plan_samara").orNull(rs),
                    delivery_scheme_samara = rs.getString("delivery_scheme_samara").orNull(rs),
                    promo_sales_plan_yekaterinburg = rs.getLong("promo_sales_plan_yekaterinburg").orNull(rs),
                    delivery_scheme_yekaterinburg = rs.getString("delivery_scheme_yekaterinburg").orNull(rs),
                    comment = rs.getString("comment").orNull(rs),
                    top_offer = rs.getInt("top_offer").orNull(rs)
                )
            }
    }

    @Test
    @DbUnitDataSet(before = ["HackSskuPromoForAnalyticsViewTest.csv"])
    fun hackSskuPromoForAnalyticsViewTest_ok() {
        val actual = jdbcTemplate.query(Sql, rowMapper)
        val expected = listOf(
            Item(
                id = 1,
                promo = "Гендерные праздники",
                start_promo_date = Timestamp.valueOf("2022-01-01 09:15:30.0"),
                end_promo_date = Timestamp.valueOf("2022-03-25 09:15:30.0"),
                wave = "23 февраля:2022-01-10/2022-03-20",
                start_wave_date = Timestamp.valueOf("2022-01-10 09:15:30.0"),
                end_wave_date = Timestamp.valueOf("2022-03-20 09:15:30.0"),
                status = "COLLECTION",
                discount_type = "direct",
                analitical_wave = "23 февраля:2022-01-10/2022-03-20",
                analitical_start_wave_date = Timestamp.valueOf("2022-01-10 09:15:30.0"),
                analitical_end_wave_date = Timestamp.valueOf("2022-03-20 09:15:30.0"),
                ssku = "000145.65500970",
                old_price = 16693,
                current_price = 12841,
                promo_price = 12686,
                discount = 24,
                needed_purchase = true,
                purchase_price = 12800,
                promo_purchase_price = 100,
                promo_purchase_price_start_date = "9/1/22",
                promo_purchase_price_finish_date = "9/2/22",
                retro_by_volume_percent = 7,
                retro_by_volume = 100,
                other_retro_percent = 23,
                other_retro = 100,
                category_manager = "localDeveloper",
                modified_by = "localDeveloper",
                modified_datetime = Timestamp.valueOf("2022-01-01 09:15:31.0"),
                discount_new = 24.0f,
                retro_by_volume_percent_new = 7.0f,
                other_retro_percent_new = 23.0f,
                promo_delivery_date = "7/1/22",
                local_assortment_home_region = "Санкт-Петербург",
                promo_sales_plan_moscow = 44,
                delivery_scheme_moscow = "direct",
                promo_sales_plan_st_petersburg = 45,
                delivery_scheme_st_petersburg = "xdoc",
                promo_sales_plan_rostov = 46,
                delivery_scheme_rostov = "mono-xdoc",
                promo_sales_plan_samara = 47,
                delivery_scheme_samara = "transfer",
                promo_sales_plan_yekaterinburg = 48,
                delivery_scheme_yekaterinburg = "direct",
                comment = "Тестовый комментарий 1",
                top_offer = 0
            )
        )

        assertEquals(expected, actual)
    }
}
