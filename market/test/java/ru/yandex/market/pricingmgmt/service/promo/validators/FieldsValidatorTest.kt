package ru.yandex.market.pricingmgmt.service.promo.validators

import org.junit.jupiter.api.Assertions.assertDoesNotThrow
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestInstance
import org.junit.jupiter.api.assertThrows
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource
import org.mockito.Mockito.`when`
import org.mockito.invocation.InvocationOnMock
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.mock.mockito.MockBean
import ru.yandex.market.pricingmgmt.AbstractFunctionalTest
import ru.yandex.market.pricingmgmt.exception.ExceptionCode
import ru.yandex.market.pricingmgmt.exception.ValidationException
import ru.yandex.market.pricingmgmt.model.postgres.Catstream
import ru.yandex.market.pricingmgmt.model.promo.AssortmentLoadMethod
import ru.yandex.market.pricingmgmt.model.promo.Compensation
import ru.yandex.market.pricingmgmt.model.promo.CompensationReceiveMethod
import ru.yandex.market.pricingmgmt.model.promo.Promo
import ru.yandex.market.pricingmgmt.model.promo.PromoBudgetOwner
import ru.yandex.market.pricingmgmt.model.promo.PromoKind
import ru.yandex.market.pricingmgmt.model.promo.PromoMechanicsType
import ru.yandex.market.pricingmgmt.model.promo.PromoPurpose
import ru.yandex.market.pricingmgmt.model.promo.PromoStatus
import ru.yandex.market.pricingmgmt.model.promo.SupplierType
import ru.yandex.market.pricingmgmt.repository.postgres.CatstreamRepository
import java.util.stream.Stream

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class FieldsValidatorTest : AbstractFunctionalTest() {
    @Autowired
    private lateinit var fieldsValidator: FieldsValidator

    @MockBean
    private lateinit var catstreamRepository: CatstreamRepository

    private val nameCatstreamMap = listOf(
        Catstream(
            name = "stream1",
            catteam = "department1"
        ),
        Catstream(
            name = "stream2",
            catteam = "department2"
        )
    ).associateBy { catstream: Catstream -> catstream.name }

    @BeforeEach
    fun setupCatstreamRepository() {
        `when`(catstreamRepository.getAllByNames(notNull())).thenAnswer { mmm(it) }
    }

    private fun mmm(invocation: InvocationOnMock): List<Catstream> {
        return invocation
            .getArgument<Collection<String>>(0)
            .mapNotNull { m -> nameCatstreamMap[m] }
    }

    @Test
    fun testValidateFields_validationIsOk() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true,
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        assertDoesNotThrow { fieldsValidator.validate(promo, null) }
    }

    @Test
    fun testValidateFields_departmentIsEmptyList_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            purpose = PromoPurpose.GMV_GENERATION,
            departments = emptyList(),
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_REQUIRED_FIELD_EMPTY, e.code)
        assertEquals("Не указано обязательное поле \"Категорийные департаменты\"", e.message)
        assertEquals(listOf("departments"), e.errorFields)
    }

    @Test
    fun testValidateFields_departmentIsEmpty_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", ""),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_REQUIRED_FIELD_ITEM_INVALID, e.code)
        assertEquals("Поле \"Категорийные департаменты\" содержит пустое значение", e.message)
        assertEquals(listOf("departments"), e.errorFields)
    }

    @Test
    fun testValidateFields_purposeIsNull_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = null,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_REQUIRED_FIELD_NULL, e.code)
        assertEquals("Не указано обязательное поле \"Назначение промо\"", e.message)
        assertEquals(listOf("purpose"), e.errorFields)
    }

    @Test
    fun testValidateFields_purposeIsUnknown_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.UNKNOWN,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_FIELD_VALUE_INVALID, e.code)
        assertEquals("Значение поля \"Назначение промо\" не распознано", e.message)
        assertEquals(listOf("purpose"), e.errorFields)
    }

    @Test
    fun testValidateFields_compensationSourceIsNull_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = null,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_REQUIRED_FIELD_NULL, e.code)
        assertEquals("Не указано обязательное поле \"Источник компенсации\"", e.message)
        assertEquals(listOf("compensationSource"), e.errorFields)
    }

    @Test
    fun testValidateFields_compensationSourceIsUnknown_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.UNKNOWN,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_FIELD_VALUE_INVALID, e.code)
        assertEquals("Значение поля \"Источник компенсации\" не распознано", e.message)
        assertEquals(listOf("compensationSource"), e.errorFields)
    }

    @Test
    fun testValidateFields_promoKindIsNull_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = null,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_REQUIRED_FIELD_NULL, e.code)
        assertEquals("Не указано обязательное поле \"Вид промо\"", e.message)
        assertEquals(listOf("promoKind"), e.errorFields)
    }

    @Test
    fun testValidateFields_promoKindIsUnknown_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.UNKNOWN,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_FIELD_VALUE_INVALID, e.code)
        assertEquals("Значение поля \"Вид промо\" не распознано", e.message)
        assertEquals(listOf("promoKind"), e.errorFields)
    }

    @Test
    fun testValidateFields_supplierTypeIsNull_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = null,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_REQUIRED_FIELD_NULL, e.code)
        assertEquals("Не указано обязательное поле \"Тип поставщика\"", e.message)
        assertEquals(listOf("supplierType"), e.errorFields)
    }

    @Test
    fun testValidateFields_supplierTypeIsUnknown_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.UNKNOWN,
            budgetOwner = PromoBudgetOwner.PRODUCT
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_FIELD_VALUE_INVALID, e.code)
        assertEquals("Значение поля \"Тип поставщика\" не распознано", e.message)
        assertEquals(listOf("supplierType"), e.errorFields)
    }

    @Test
    fun testValidateFields_compensationReceiveMethodEmpty_ok() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            compensationReceiveMethods = emptyList(),
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true
        )

        assertDoesNotThrow { fieldsValidator.validate(promo, null) }
    }

    @Test
    fun testValidateFields_compensationReceiveMethodEmpty_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.PARTNER,
            compensationReceiveMethods = emptyList(),
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_COMPENSATIONS_RECEIVE_METHODS_EMPTY, e.code)
        assertEquals("Не указаны способы получения компенсации при источнике компенсации \"Партнёр\"", e.message)
        assertEquals(listOf("compensationReceiveMethods"), e.errorFields)
    }

    @Test
    fun testValidateFields_compensationReceiveMethodNotEmpty_ok() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.PARTNER,
            compensationReceiveMethods = listOf(CompensationReceiveMethod.WITHOUT_COMPENSATION),
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true
        )

        assertDoesNotThrow { fieldsValidator.validate(promo, null) }
    }

    @Test
    @Disabled("Вернуть в PRICINGMNGMT-787")
    fun testValidateFields_compensationReceiveMethodNotEmpty_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            compensationReceiveMethods = listOf(CompensationReceiveMethod.WITHOUT_COMPENSATION),
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_COMPENSATIONS_RECEIVE_METHODS_NOT_EMPTY, e.code)
        assertEquals("Field compensationReceiveMethods is not empty, but compensationSource is MARKET", e.message)
        assertEquals(listOf("compensationReceiveMethods"), e.errorFields)
    }

    @Test
    fun testValidateFields_compensationTicket_validationIsOk() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true,
            compensationTicket = "https://st.yandex-team.ru/PRICINGMNGMT-194"
        )

        assertDoesNotThrow { fieldsValidator.validate(promo, null) }
    }

    @Test
    fun testValidateFields_compensationTicket_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true,
            compensationTicket = "incorrect compensation ticket"
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_COMPENSATION_TICKET_INVALID, e.code)
        assertEquals("Тикет на продвижение не соответствует шаблону", e.message)
        assertEquals(listOf("compensationTicket"), e.errorFields)
    }

    @Test
    fun testValidateFields_assortmentLoadMethodIsNull_isOk() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            assortmentLoadMethod = null,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true
        )

        assertDoesNotThrow { fieldsValidator.validate(promo, null) }
    }

    @Test
    fun testValidateFields_assortmentLoadMethodIsUnknown_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            compensationReceiveMethods = listOf(CompensationReceiveMethod.WITHOUT_COMPENSATION),
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            assortmentLoadMethod = AssortmentLoadMethod.UNKNOWN
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_FIELD_VALUE_INVALID, e.code)
        assertEquals("Значение поля \"Способ загрузки ассортимента\" не распознано", e.message)
        assertEquals(listOf("assortmentLoadMethod"), e.errorFields)
    }

    @Test
    fun testValidateFields_autogeneratedFalse_ok() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = false,
            landingUrl = "landingUrl",
            rulesUrlAutogenerated = false,
            rulesUrl = "rulesUrl",
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        assertDoesNotThrow { fieldsValidator.validate(promo, null) }
    }

    @Test
    fun testValidateFields_landingUrlAutogeneratedNull_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = null,
            rulesUrlAutogenerated = true,
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_URL_AUTOGENERATED_NULL, e.code)
        assertEquals("Не указан флаг автогенерации ссылки на лэндинг акции", e.message)
        assertEquals(listOf("landingUrlAutogenerated"), e.errorFields)
    }

    @Test
    fun testValidateFields_landingUrlAutogeneratedFalseAndUrlEmpty_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = false,
            rulesUrlAutogenerated = true,
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_URL_VALUE_NULL, e.code)
        assertEquals("Не указано значение ссылки на лэндинг акции", e.message)
        assertEquals(listOf("landingUrl"), e.errorFields)
    }

    @Test
    fun testValidateFields_rulesUrlAutogeneratedNull_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = null,
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_URL_AUTOGENERATED_NULL, e.code)
        assertEquals("Не указан флаг автогенерации ссылки на страницу правил", e.message)
        assertEquals(listOf("rulesUrlAutogenerated"), e.errorFields)
    }

    @Test
    fun testValidateFields_rulesUrlAutogeneratedFalseAndUrlEmpty_exceptionThrown() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = false,
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_URL_VALUE_NULL, e.code)
        assertEquals("Не указано значение ссылки на страницу правил", e.message)
        assertEquals(listOf("rulesUrl"), e.errorFields)
    }

    private fun testValidateFields_promoKind_success_arguments(): Stream<Arguments> {
        val all = PromoKind.values().filter { it != PromoKind.UNKNOWN }.toSet()
        val piAllowed = setOf(PromoKind.NATIONAL, PromoKind.CROSS_CATEGORY, PromoKind.CATEGORY)

        return listOf(
            Pair(null, all),
            Pair(AssortmentLoadMethod.TRACKER, all),
            Pair(AssortmentLoadMethod.LOYALTY, all),
            Pair(AssortmentLoadMethod.PI, piAllowed)
        ).flatMap { f -> f.second.map { m -> Arguments.of(m, f.first) } }
            .stream()
    }

    @ParameterizedTest
    @MethodSource("testValidateFields_promoKind_success_arguments")
    fun testValidateFields_promoKind_success(promoKind: PromoKind, assortmentLoadMethod: AssortmentLoadMethod?) {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = promoKind,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true,
            assortmentLoadMethod = assortmentLoadMethod
        )

        assertDoesNotThrow { fieldsValidator.validate(promo, null) }
    }

    private fun testValidateFields_promoKind_error_arguments(): Stream<Arguments> {
        val piAllowed = setOf(PromoKind.NATIONAL, PromoKind.CROSS_CATEGORY, PromoKind.CATEGORY)

        return PromoKind.values()
            .filter { !piAllowed.contains(it) }
            .filter { it != PromoKind.UNKNOWN }
            .map { Arguments.of(it, AssortmentLoadMethod.PI) }
            .stream()
    }

    @ParameterizedTest
    @MethodSource("testValidateFields_promoKind_error_arguments")
    fun testValidateFields_promoKind_error(promoKind: PromoKind, assortmentLoadMethod: AssortmentLoadMethod) {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            compensationReceiveMethods = listOf(CompensationReceiveMethod.WITHOUT_COMPENSATION),
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = promoKind,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true,
            assortmentLoadMethod = assortmentLoadMethod
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_KIND_FORBIDDEN_FOR_ASSORTMENT_LOAD_METHOD, e.code)
        assertEquals(
            "Вид промо \"${promoKind.displayName}\" запрещен для способа загрузки ассортимента \"${assortmentLoadMethod.displayName}\"",
            e.message
        )
        assertEquals(listOf("promoKind"), e.errorFields)
    }

    @Test
    fun testValidateFields_streamsEmptyItem_error() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            streams = listOf("stream1", ""),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true,
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_REQUIRED_FIELD_ITEM_INVALID, e.code)
        assertEquals("Поле \"Категорийные стримы\" содержит пустое значение", e.message)
        assertEquals(listOf("streams"), e.errorFields)
    }

    @Test
    fun testValidateFields_streamsNotFoundItem_error() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1", "department2"),
            streams = listOf("stream1", "notFoundStream3"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true,
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_STREAMS_NOT_FOUND, e.code)
        assertEquals("Не найдены стримы: [notFoundStream3]", e.message)
        assertEquals(listOf("streams"), e.errorFields)
    }

    @Test
    fun testValidateFields_streamsNotMatchItem_error() {
        val promo = Promo(
            status = PromoStatus.NEW,
            mechanicsType = PromoMechanicsType.CHEAPEST_AS_GIFT,
            departments = listOf("department1"),
            streams = listOf("stream1", "stream2"),
            purpose = PromoPurpose.GMV_GENERATION,
            compensationSource = Compensation.MARKET,
            tradeManager = "tradeManager",
            markom = "catManager",
            promoKind = PromoKind.CATEGORY,
            supplierType = SupplierType.FIRST_PARTY,
            budgetOwner = PromoBudgetOwner.PRODUCT,
            landingUrlAutogenerated = true,
            rulesUrlAutogenerated = true,
            assortmentLoadMethod = AssortmentLoadMethod.TRACKER
        )

        val e = assertThrows<ValidationException> { fieldsValidator.validate(promo, null) }
        assertEquals(ExceptionCode.PROMO_STREAMS_NOT_MATCH_DEPARTMENTS, e.code)
        assertEquals("Стримы не соответствуют выбранным департаментам: [stream2]", e.message)
        assertEquals(listOf("streams"), e.errorFields)
    }
}
