[{"hashKey":"68ace3c46e5da8136e4178f67e147284","query":"USE hahn; pragma AnsiOptionalAs;\n\n$parse_date = DateTime::Parse(\"%Y-%m-%d\");\n$parse_datetime = DateTime::Parse(\"%Y-%m-%d %H:%M:%S\");\n$parse_datetime_t = DateTime::Parse(\"%Y-%m-%dT%H:%M:%S\");\n$parse_datetime_tz = DateTime::Parse(\"%Y-%m-%dT%H:%M:%SZ\");\n$format_datetime = DateTime::Format(\"%Y-%m-%d %H:%M:%S\");\n$next_date = ($dt) -> { return cast($dt as date) + DateTime::IntervalFromDays(1); };\n$date_to_string = DateTime::Format(\"%Y-%m-%d\");\n\n$bo = (\n    select\n        bo.payment_batch_id as payment_batch_id,\n        bo.msk_transaction_dttm as trantime,\n        bo.msk_event_dttm as eventtime,\n        bo.bank_order_status as status,\n        bo.bank_order_id as bank_order_id,\n        bo.payment_amt as sum,\n        bo.oebs_status as oebs_status,\n        bo.msk_modified_dttm as modified_time\n    from `/home/market/production/mstat/dwh/ods/mbi/bank_order/bank_order`  with inline bo\n    where true = true\n    union all\n    select *\n    from `/home/market/production/mstat/dictionaries/mbi_bank_order/latest`  with inline bo\n    where true = false\n);\n\n$boi = (\n    select\n        boi.bank_order_item_id as id,\n        boi.order_amt as sum,\n        boi.cur_code as currency,\n        $format_datetime($parse_datetime_t(boi.msk_handling_dttm)) as handling_time,\n        $format_datetime($parse_datetime_t(boi.msk_payment_dttm)) as payment_time,\n        boi.agency_commission_amt as agency_commission,\n        $format_datetime($parse_datetime_t(boi.msk_modified_dttm)) as modified_time,\n        boi.* without bank_order_item_id,order_amt,cur_code,msk_handling_dttm,\n            msk_payment_dttm,agency_commission_amt,msk_modified_dttm\n    from `/home/market/production/mstat/dwh/ods/mbi/bank_order_item/bank_order_item`  with inline boi\n    where true = true\n    union all\n    select *\n    from `/home/market/production/mstat/dictionaries/mbi_bank_order_item/latest`  with inline boi\n    where true = false\n);\n\n$co = (\n    select\n        cast(co.order_id as Int64) as order_id,\n        cast(co.shop_id as Int64) as shop_id,\n        $date_to_string(\n            AddTimezone(\n                DateTime::MakeDatetime($parse_datetime_tz(cast(co.creation_date as String))),\n                \"Europe/Moscow\")) as creation_date,\n        cast(co.color as Int64) as color,\n        cast(co.status as Int64) as status,\n        co.* without order_id,shop_id,creation_date,color,status\n    from `/home/market/production/mbi/billing/oracle-export-tm/market_billing_cpa_order`  with inline co\n);\n\n$coi = (\n    select\n        cast(coi.order_id as Int64) as order_id,\n        cast(coi.id as Int64) as id,\n        cast(coi.ff_supplier_id as Int64) as ff_supplier_id,\n        cast(coi.ff_shop_id as Int64) as ff_shop_id,\n        coi.* without order_id, id, ff_supplier_id, ff_shop_id\n    from `/home/market/production/mbi/billing/oracle-export-tm/market_billing_cpa_order_item`  with inline coi\n);\n\n$contracts = (\n    select\n        partner_id,\n        max_by(contract_id, pc.contract_date) as contract_id\n    from `/home/market/production/mbi/dictionaries/partner_contract/latest`  with inline as pc\n            where pc.contract_type = 'income'\n    group by partner_id\n);\n\n$act_data = (\n    select\n        service_id,\n        contract_id,\n        client_id,\n        payment_type,\n        act_month,\n        last_transaction_id,\n        lag(last_transaction_id) over w as first_transaction_id\n    from `/home/market/production/billing/reports/act_data`  with inline as act_data\n    window w as (partition by service_id, contract_id, payment_type order by last_transaction_id)\n);\n\n$tlog = (\n    select tlog.*,\n        act_data.act_month as act_month\n    from filter(`/home/market/production/billing/tlog/payouts/expenses`, ($t) -> ($t != 'latest')) as tlog\n    join $act_data as act_data\n        on case\n            when tlog.product = \"acc_subsidy\" then \"subsidy\"\n            when tlog.product = \"acc_delivery_subsidy\" then \"delivery_subsidy\"\n            when tlog.product = \"acc_ya_withdraw\" then \"yandex_account_withdraw\"\n            else tlog.product\n        end = act_data.payment_type\n        and cast(tlog.client_id as Int64) = act_data.client_id\n        and tlog.service_id = act_data.service_id\n    where tlog.record_type = 'accrual'\n    and tlog.transaction_id > act_data.first_transaction_id\n    and tlog.transaction_id <= act_data.last_transaction_id\n);\n\n$bank_order_records = (\n    select\n        null                                    as trantime,\n        boi.handling_time                       as handling_time,\n        trust_id                                as trust_id,\n        service_order_id                        as service_order_id,\n        co.order_id                             as order_id,\n        co.order_num                            as order_num,\n        co.creation_date                        as creation_date,\n        coi.shop_sku                            as shop_sku,\n        coi.offer_name                          as offer_name,\n        coi.offer_id                            as offer_id,\n        coi.item_count                          as item_count,\n        boi.sum                                 as item_sum,\n        transaction_type                        as transaction_type,\n        case\n            when service_order_id like '%ret%' then 'compensation'\n            else boi.payment_type end           as payment_type,\n        cast(bank_order_id as Int64)            as bank_order_id,\n        bo.sum                                  as bank_sum,\n        bo.eventtime                            as bank_order_time,\n        case\n            when (boi.service_order_id like '%delivery%' and coi.id is null)\n            then true else false end            as is_delivery_service,\n        co.color                                as color,\n        null                                    as act_id,\n        null                                    as act_date,\n        false                                   as is_correction,\n        coalesce(coi.ff_supplier_id, coi.ff_shop_id, co.shop_id, boi.partner_id) as partner_id,\n        c.contract_id                           as contract_id,\n        co.status                               as status,\n        null                                    as payment_order_id\n    from $bo bo\n    join $boi boi\n        on bo.payment_batch_id = boi.payment_batch_id\n    left join $coi coi\n        on coi.id = boi.order_item_id\n    left join $co co\n        on co.order_id = boi.order_id\n    left join $contracts c\n        on c.partner_id = boi.partner_id\n    where (coi.order_id is not null or boi.order_item_id is null)\n        and boi.payment_order_id is null\n        and (bo.eventtime >= \"2022-01-01\" and bo.eventtime < \"2023-01-01\"\n            or co.creation_date >= \"2022-01-01\" and co.creation_date < \"2023-01-01\")\n        and boi.payment_type != 'correction_commission'\n);\n\n$acts = (\n    select\n        max(act.act_external_id) as external_id,\n        act.contract_id,\n        act.dt,\n        sum(cast(Math::Round(amt_rur_with_nds * 100) as Int64)) as act_sum\n    from `/home/market/production/mstat/oebs/sales_daily_market`  with inline act\n    where act.product_id != 508898\n    group by act.contract_id, act.dt\n);\n\n$correction_commissions = (\n    select\n        null                                    as trantime,\n        boi.handling_time                       as handling_time,\n        trust_id                                as trust_id,\n        service_order_id                        as service_order_id,\n        null                                    as order_id,\n        null                                    as order_num,\n        null                                    as creation_date,\n        null                                    as shop_sku,\n        null                                    as offer_name,\n        null                                    as offer_id,\n        null                                    as item_count,\n        boi.sum                                 as item_sum,\n        transaction_type                        as transaction_type,\n        case\n            when service_order_id like '%ret%' then 'compensation'\n            else boi.payment_type end           as payment_type,\n        cast(bank_order_id as Int64)            as bank_order_id,\n        bo.sum                                  as bank_sum,\n        bo.eventtime                            as bank_order_time,\n        case\n            when (boi.service_order_id like '%delivery%') then true\n            else false end                      as is_delivery_service,\n        null                                    as color,\n        cast(acts.external_id as Int64)         as act_id,\n        acts.dt                                 as act_date,\n        false                                   as is_correction,\n        boi.partner_id                          as partner_id,\n        c.contract_id                           as contract_id,\n        null                                    as status,\n        null                                    as payment_order_id\n    from $bo bo\n    join $boi boi\n        on bo.payment_batch_id = boi.payment_batch_id\n    left join $acts acts\n        on acts.contract_id = boi.contract_id\n        and acts.act_sum = boi.sum\n        and $next_date(acts.dt) = DateTime::MakeDate(DateTime::StartOfMonth($parse_datetime(bo.eventtime)))\n    left join $contracts c\n        on c.partner_id = boi.partner_id\n    where boi.payment_order_id is null\n    and (bo.eventtime >= \"2022-01-01\" and bo.eventtime < \"2023-01-01\")\n    and boi.payment_type = 'correction_commission'\n);\n\n$accrual_records = (\n    select\n        case\n            when tlog.act_month is null or acc.trantime >= tlog.act_month then acc.trantime\n            else $format_datetime(DateTime::MakeDate($parse_date(tlog.act_month)))\n        end                                     as trantime,\n        boi.handling_time                       as handling_time,\n        boi.trust_id                            as trust_id,\n        boi.service_order_id                    as service_order_id,\n        acc.order_id                            as order_id,\n        co.order_num                            as order_num,\n        co.creation_date                        as creation_date,\n        coi.shop_sku                            as shop_sku,\n        coi.offer_name                          as offer_name,\n        coi.offer_id                            as offer_id,\n        coi.item_count                          as item_count,\n        acc.amount                              as item_sum,\n        acc.transaction_type                    as transaction_type,\n        case\n            when boi.service_order_id like '%ret%' then 'compensation'\n            when boi.payment_type in ('compensation') then boi.payment_type\n            else acc.product\n        end                                     as payment_type,\n        cast(bo.bank_order_id as Int64)         as bank_order_id,\n        bo.sum                                  as bank_sum,\n        bo.eventtime                            as bank_order_time,\n        case\n            when acc.entity_type = 'delivery' then true\n            else false end                      as is_delivery_service,\n        co.color                                as color,\n        null                                    as act_id,\n        null                                    as act_date,\n        false                                   as is_correction,\n        acc.partner_id                          as partner_id,\n        c.contract_id                           as contract_id,\n        co.status                               as status,\n        pgpo.payment_order_id                   as payment_order_id\n    from filter(`/home/market/production/billing/dictionaries/accrual`, ($t) -> ($t != 'latest')) acc\n    join $co co\n        on co.order_id = acc.order_id\n    left join $coi coi\n        on coi.id = case when acc.entity_type = 'item' then acc.entity_id else null end\n    left join `/home/market/production/billing/dictionaries/payout/latest`  with inline p\n        on p.checkouter_id = acc.checkouter_id\n        and p.transaction_type = acc.transaction_type\n        and p.entity_id = acc.entity_id\n        and p.entity_type = acc.entity_type\n        and case when p.product in ('pay_subsidy', 'subsidy')\n                then 'acc_subsidy'\n            when p.product in ('pay_ya_withdraw','yandex_cashback', 'yandex_account_withdraw')\n                then 'acc_ya_withdraw'\n            when p.product in ('pay_delivery_subsidy', 'ya_delivery_subsidy', 'delivery_subsidy')\n                then 'acc_delivery_subsidy'\n            else p.product\n        end = acc.product\n    left join `/home/market/production/billing/dictionaries/payout_group_payment_order/latest`  with inline pgpo\n        on pgpo.payout_group_id = p.payout_group_id\n    left join $boi boi\n        on boi.payment_order_id = pgpo.payment_order_id\n    left join $bo bo\n        on bo.payment_batch_id = case when boi.payment_type != 'correction_commission' then boi.payment_batch_id else null end\n    left join $contracts c\n        on c.partner_id = acc.partner_id\n    left join $tlog as tlog\n        on tlog.entity_id = acc.entity_id\n        and tlog.entity_type = acc.entity_type\n        and tlog.product = acc.product\n        and tlog.checkouter_id = acc.checkouter_id\n        and tlog.transaction_type = acc.transaction_type\n    where (acc.trantime >= \"2022-01-01\" and acc.trantime < \"2023-01-01\"\n        or bo.eventtime >= \"2022-01-01\" and bo.eventtime < \"2023-01-01\")\n        and acc.payout_status != 'ignored'\n);\n\n$accrual_corrections = (\n    select\n        case\n            when tlog.act_month is null or acc.trantime >= tlog.act_month then acc.trantime\n            else $format_datetime(DateTime::MakeDate($parse_date(tlog.act_month)))\n        end                                                 as trantime,\n        boi.handling_time                                   as handling_time,\n        coalesce(boi.trust_id, cast(acc.id as String))      as trust_id,\n        boi.service_order_id                                as service_order_id,\n        acc.order_id                                        as order_id,\n        co.order_num                                        as order_num,\n        co.creation_date                                    as creation_date,\n        coi.shop_sku                                        as shop_sku,\n        coi.offer_name                                      as offer_name,\n        coi.offer_id                                        as offer_id,\n        coi.item_count                                      as item_count,\n        coalesce(pc.amount, acc.amount)                     as item_sum,\n        coalesce(pc.transaction_type, acc.transaction_type) as transaction_type,\n        acc.product                                         as payment_type,\n        cast(bo.bank_order_id as Int64)                     as bank_order_id,\n        bo.sum                                              as bank_sum,\n        bo.eventtime                                        as bank_order_time,\n        case\n            when acc.entity_type = 'delivery' then true\n            else false end                                  as is_delivery_service,\n        co.color                                            as color,\n        null                                                as act_id,\n        null                                                as act_date,\n        true                                                as is_correction,\n        acc.partner_id                                      as partner_id,\n        c.contract_id                                       as contract_id,\n        co.status                                           as status,\n        pgpo.payment_order_id                               as payment_order_id\n    from `/home/market/production/billing/dictionaries/accrual_correction/latest`  with inline acc\n        join $co co on co.order_id = acc.order_id\n        left join $coi coi\n            on coi.id = case when acc.entity_type = 'item' then acc.entity_id else null end\n        left join `/home/market/production/billing/dictionaries/payout_correction/latest`  with inline pc on pc.accrual_correction_id = acc.id\n        left join `/home/market/production/billing/dictionaries/payout_group_payment_order/latest`  with inline pgpo\n            on pgpo.payout_group_id = pc.payout_group_id\n        left join $boi boi on boi.payment_order_id = pgpo.payment_order_id\n        left join $bo bo\n            on bo.payment_batch_id = case when boi.payment_type != 'correction_commission' then boi.payment_batch_id else null end\n        left join $contracts c\n            on c.partner_id = acc.partner_id\n        left join $tlog as tlog\n            on tlog.entity_id = acc.entity_id\n            and tlog.entity_type = acc.entity_type\n            and tlog.product = acc.product\n            and tlog.checkouter_id = acc.checkouter_id\n            and tlog.transaction_type = acc.transaction_type\n    where (acc.trantime >= \"2022-01-01\" and acc.trantime < \"2023-01-01\"\n        or bo.eventtime >= \"2022-01-01\" and bo.eventtime < \"2023-01-01\")\n);\n\n$item_tt = (\n    select *\n    from `/home/market/production/mbi/reports/old_trust_transaction`  with inline ott\n    where ott.delivery_id is null\n    union all\n    select *\n    from `/home/market/production/mbi/reports/trust_transaction`  with inline ntt\n    where ntt.delivery_id is null\n);\n\n$delivery_tt = (\n    select *\n    from `/home/market/production/mbi/reports/old_trust_transaction`  with inline ott\n    where ott.delivery_id is not null\n    union all\n    select *\n    from `/home/market/production/mbi/reports/trust_transaction`  with inline ntt\n    where ntt.delivery_id is not null\n);\n\n$trust_transaction_wo_bo = (\n    select *\n    from $item_tt item_tt\n        left only join $boi boi\n            on boi.order_item_id = item_tt.item_id and boi.payment_type = item_tt.payment_type\n    where item_tt.payment_type in ('spasibo', 'yandex_cashback')\n    union all\n    select *\n    from $item_tt item_tt\n        left only join $boi boi\n            on boi.order_item_id = item_tt.item_id\n    where item_tt.payment_type not in ('spasibo', 'yandex_cashback')\n    union all\n    select *\n    from $delivery_tt delivery_tt\n        left only join $boi boi\n            on boi.trust_id = delivery_tt.trust_transaction_id\n);\n\n$trust_transaction = (\n    select\n        null                                                as trantime,\n        tt.trantime                                         as handling_time,\n        tt.trust_transaction_id                             as trust_id,\n        null                                                as service_order_id,\n        co.order_id                                         as order_id,\n        co.order_num                                        as order_num,\n        co.creation_date                                    as creation_date,\n        coi.shop_sku                                        as shop_sku,\n        coi.offer_name                                      as offer_name,\n        coi.offer_id                                        as offer_id,\n        coi.item_count                                      as item_count,\n        tt.amount                                           as item_sum,\n        tt.transaction_type                                 as transaction_type,\n        tt.payment_type                                     as payment_type,\n        null                                                as bank_order_id,\n        null                                                as bank_sum,\n        null                                                as bank_order_time,\n        case\n            when tt.delivery_id is not null then true\n            else false end                                  as is_delivery_service,\n        co.color                                            as color,\n        null                                                as act_id,\n        null                                                as act_date,\n        false                                               as is_correction,\n        coalesce(coi.ff_supplier_id, coi.ff_shop_id, co.shop_id) as partner_id,\n        c.contract_id                                       as contract_id,\n        co.status                                           as status,\n        null                                                as payment_order_id\n    from $trust_transaction_wo_bo tt\n        join $co co on co.order_id = tt.order_id\n        left join $coi coi on coi.id = tt.item_id\n        left join $contracts c on c.partner_id = coalesce(coi.ff_supplier_id, coi.ff_shop_id)\n    where co.creation_date >= \"2022-01-01\"\n      and co.creation_date < \"2023-01-01\"\n);\n\ninsert into `/home/market/production/mbi/reports/agg_payment_report` with truncate\nselect *\nfrom (\n    select *\n    from $bank_order_records\n    union all\n    select *\n    from $correction_commissions\n    union all\n    select *\n    from $accrual_records\n    union all\n    select *\n    from $accrual_corrections\n    union all\n    select *\n    from $trust_transaction) pr\norder by pr.partner_id;\n","data":"{\"errors\":[],\"id\":\"62d94ceec970bd742828aceb\",\"issues\":[{\"code\":1030,\"column\":0,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":150,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":1,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":174,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":22,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":25,\"file\":\"<main>\",\"issues\":[{\"code\":1108,\"column\":25,\"file\":\"<main>\",\"issues\":[],\"message\":\"IN may produce unexpected result when used with nullable arguments. Consider adding 'PRAGMA AnsiInForEmptyOrNullableItemsCollections;'\",\"row\":264,\"severity\":\"S_WARNING\"}],\"message\":\"At function: SqlIn\",\"row\":264,\"severity\":\"S_WARNING\"},{\"code\":0,\"column\":20,\"file\":\"<main>\",\"issues\":[{\"code\":1108,\"column\":20,\"file\":\"<main>\",\"issues\":[],\"message\":\"IN may produce unexpected result when used with nullable arguments. Consider adding 'PRAGMA AnsiInForEmptyOrNullableItemsCollections;'\",\"row\":266,\"severity\":\"S_WARNING\"}],\"message\":\"At function: SqlIn\",\"row\":266,\"severity\":\"S_WARNING\"},{\"code\":0,\"column\":20,\"file\":\"<main>\",\"issues\":[{\"code\":1108,\"column\":20,\"file\":\"<main>\",\"issues\":[],\"message\":\"IN may produce unexpected result when used with nullable arguments. Consider adding 'PRAGMA AnsiInForEmptyOrNullableItemsCollections;'\",\"row\":268,\"severity\":\"S_WARNING\"}],\"message\":\"At function: SqlIn\",\"row\":268,\"severity\":\"S_WARNING\"}],\"message\":\"At function: If, At function: Coalesce, At function: Or\",\"row\":269,\"severity\":\"S_WARNING\"}],\"message\":\"At function: OrderedFilter, At function: OrderedMap, At function: EquiJoin, At function: RemoveSystemMembers, At function: OrderedMap, At function: AddMember\",\"row\":254,\"severity\":\"S_WARNING\"},{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":64,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":22,\"file\":\"<main>\",\"issues\":[{\"code\":1108,\"column\":22,\"file\":\"<main>\",\"issues\":[],\"message\":\"IN may produce unexpected result when used with nullable arguments. Consider adding 'PRAGMA AnsiInForEmptyOrNullableItemsCollections;'\",\"row\":237,\"severity\":\"S_WARNING\"}],\"message\":\"At function: SqlIn\",\"row\":237,\"severity\":\"S_WARNING\"}],\"message\":\"At function: If, At function: Coalesce, At function: Or\",\"row\":237,\"severity\":\"S_WARNING\"}],\"message\":\"At function: SqlProjectItem\",\"row\":218,\"severity\":\"S_WARNING\"}],\"message\":\"At function: PersistableRepr, At function: OrderedSqlProject\",\"row\":218,\"severity\":\"S_WARNING\"}],\"message\":\"At function: RemoveSystemMembers, At function: PersistableRepr, At function: OrderedSqlProject\",\"row\":432,\"severity\":\"S_WARNING\"},{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":35,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":19,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":19,\"file\":\"<main>\",\"issues\":[{\"code\":1108,\"column\":19,\"file\":\"<main>\",\"issues\":[],\"message\":\"IN may produce unexpected result when used with nullable arguments. Consider adding 'PRAGMA AnsiInForEmptyOrNullableItemsCollections;'\",\"row\":371,\"severity\":\"S_WARNING\"}],\"message\":\"At function: SqlIn\",\"row\":371,\"severity\":\"S_WARNING\"}],\"message\":\"At function: OrderedFilter, At function: Coalesce\",\"row\":368,\"severity\":\"S_WARNING\"}],\"message\":\"At function: RemoveSystemMembers, At function: PersistableRepr, At function: OrderedSqlProject\",\"row\":367,\"severity\":\"S_WARNING\"},{\"code\":0,\"column\":5,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":19,\"file\":\"<main>\",\"issues\":[{\"code\":0,\"column\":19,\"file\":\"<main>\",\"issues\":[{\"code\":1108,\"column\":19,\"file\":\"<main>\",\"issues\":[],\"message\":\"IN may produce unexpected result when used with nullable arguments. Consider adding 'PRAGMA AnsiInForEmptyOrNullableItemsCollections;'\",\"row\":377,\"severity\":\"S_WARNING\"}],\"message\":\"At function: Not, At function: SqlIn\",\"row\":377,\"severity\":\"S_WARNING\"}],\"message\":\"At function: OrderedFilter, At function: Coalesce\",\"row\":374,\"severity\":\"S_WARNING\"}],\"message\":\"At function: RemoveSystemMembers, At function: PersistableRepr, At function: OrderedSqlProject\",\"row\":373,\"severity\":\"S_WARNING\"}],\"message\":\"At function: UnionAll\",\"row\":367,\"severity\":\"S_WARNING\"}],\"message\":\"At function: OrderedFilter, At function: OrderedMap, At function: EquiJoin\",\"row\":415,\"severity\":\"S_WARNING\"}],\"message\":\"At function: PersistableRepr, At function: OrderedSqlProject\",\"row\":386,\"severity\":\"S_WARNING\"}],\"message\":\"At function: RemoveSystemMembers, At function: PersistableRepr, At function: OrderedSqlProject\",\"row\":438,\"severity\":\"S_WARNING\"}],\"message\":\"At function: UnionAll\",\"row\":426,\"severity\":\"S_WARNING\"}],\"message\":\"At function: RemoveSystemMembers, At function: Sort, At function: PersistableRepr, At function: OrderedSqlProject\",\"row\":424,\"severity\":\"S_WARNING\"}],\"message\":\"At function: RemovePrefixMembers\",\"row\":423,\"severity\":\"S_WARNING\"}],\"message\":\"Type annotation\",\"row\":0,\"severity\":\"S_WARNING\"}],\"status\":\"COMPLETED\",\"updatedAt\":\"2022-07-21T13:09:18.538Z\",\"version\":1000000}","type":"YQL_QUERY"},{"cacheKey":"-774874420","base64Value":"Ly9ob21lL21hcmtldC9wcm9kdWN0aW9uL21iaS9yZXBvcnRzL2FnZ19wYXltZW50X3JlcG9ydApwYXJ0bmVyX2lkLGFjdF9kYXRlLGFjdF9pZCxiYW5rX29yZGVyX2lkLGJhbmtfb3JkZXJfdGltZSxiYW5rX3N1bSxjb2xvcixjb250cmFjdF9pZCxjcmVhdGlvbl9kYXRlLGhhbmRsaW5nX3RpbWUsaXNfY29ycmVjdGlvbixpc19kZWxpdmVyeV9zZXJ2aWNlLGl0ZW1fY291bnQsaXRlbV9zdW0sb2ZmZXJfaWQsb2ZmZXJfbmFtZSxvcmRlcl9pZCxvcmRlcl9udW0scGF5bWVudF9vcmRlcl9pZCxwYXltZW50X3R5cGUsc2VydmljZV9vcmRlcl9pZCxzaG9wX3NrdSxzdGF0dXMsdHJhbnNhY3Rpb25fdHlwZSx0cmFudGltZSx0cnVzdF9pZAoiMSIsIjIwMjItMDMtMzEiLCIxMTEiLCI4ODgiLCIyMDIyLTA0LTIyIDAwOjAwOjAwLjAiLCIxMDAwMCIsIm51bGwiLCIxMSIsIm51bGwiLCIyMDIyLTA0LTIyIDIwOjQ1OjM1IiwiZmFsc2UiLCJmYWxzZSIsIm51bGwiLCIxMDAwMCIsIm51bGwiLCJudWxsIiwibnVsbCIsIm51bGwiLCJudWxsIiwiY29ycmVjdGlvbl9jb21taXNzaW9uIiwibnVsbCIsIm51bGwiLCJudWxsIiwicGF5bWVudCIsIm51bGwiLCJhYmNkLWFiY2QtYWJjZC1hYmMzIgoiMSIsIm51bGwiLCJudWxsIiwiMTExIiwiMjAyMi0wNC0yMyAwMDowMDowMC4wIiwiNTYzMDAiLCIxIiwiMTEiLCIyMDIyLTA0LTIyIiwiMjAyMi0wNC0yMiAyMDo0NTozNSIsImZhbHNlIiwiZmFsc2UiLCIxIiwiOTYwMCIsIjEiLCJvZmZlcl9uYW1lXzEiLCIxIiwiMSIsIjEiLCJhY2Nfc3Vic2lkeSIsInBheW1lbnQtb3JkZXItMSIsInNob3Bfc2t1XzEiLCI1IiwicGF5bWVudCIsIjIwMjItMDQtMjEgMTU6MTM6MzUuNzg1IiwiNTU2ODQwNDEiCiIxIiwibnVsbCIsIm51bGwiLCJudWxsIiwibnVsbCIsIm51bGwiLCIxIiwiMTEiLCIyMDIyLTA0LTIyIiwibnVsbCIsImZhbHNlIiwiZmFsc2UiLCIxIiwiOTYwMCIsIjUiLCJvZmZlcl9uYW1lXzYiLCI2IiwiNiIsIm51bGwiLCJhY2Nfc3Vic2lkeSIsIm51bGwiLCJzaG9wX3NrdV82IiwiNSIsInBheW1lbnQiLCIyMDIyLTA0LTIxIDE1OjEzOjM1Ljc4NSIsIm51bGwiCiIyIiwibnVsbCIsIm51bGwiLCJudWxsIiwibnVsbCIsIm51bGwiLCIxIiwiMjIiLCIyMDIyLTA0LTIzIiwibnVsbCIsInRydWUiLCJmYWxzZSIsIjEiLCI1MDAwIiwiMiIsIm9mZmVyX25hbWVfMiIsIjIiLCIyIiwibnVsbCIsInBhcnRuZXJfcGF5bWVudCIsIm51bGwiLCJzaG9wX3NrdV8yIiwiNSIsInBheW1lbnQiLCIyMDIyLTA0LTIxIDE1OjEzOjMzLjUzOSIsIjUyNjAwNzA2IgoiMiIsIm51bGwiLCJudWxsIiwiMjIyIiwiMjAyMi0wNC0yMyAwMDowMDowMC4wIiwiNTYzMDAiLCIxIiwiMjIiLCIyMDIyLTA0LTIzIiwiMjAyMi0wNC0yMiAyMDo0NTozNSIsImZhbHNlIiwiZmFsc2UiLCIxIiwiNTAwMCIsIjIiLCJvZmZlcl9uYW1lXzIiLCIyIiwiMiIsIjIiLCJwYXJ0bmVyX3BheW1lbnQiLCJwYXltZW50LW9yZGVyLTIiLCJzaG9wX3NrdV8yIiwiNSIsInBheW1lbnQiLCIyMDIyLTA0LTIxIDE1OjEzOjMzLjUzOSIsIjU1Njg0MDQyIgoiMiIsIm51bGwiLCJudWxsIiwibnVsbCIsIm51bGwiLCJudWxsIiwiMSIsIjIyIiwiMjAyMi0wNC0yMyIsIjIwMjItMDQtMjIgMjA6NDU6MzUiLCJmYWxzZSIsImZhbHNlIiwiMSIsIjUwMDAiLCIzIiwib2ZmZXJfbmFtZV8zIiwiMyIsIjMiLCIzIiwicGFydG5lcl9wYXltZW50IiwicGF5bWVudC1vcmRlci0zIiwic2hvcF9za3VfMyIsIjUiLCJwYXltZW50IiwiMjAyMi0wNC0yMSAxNToxMzozMy41MzkiLCI1NTY4NDA0MyIKIjIiLCJudWxsIiwibnVsbCIsIm51bGwiLCJudWxsIiwibnVsbCIsIjEiLCIyMiIsIjIwMjItMDQtMjIiLCIyMDIyLTA0LTIyIDIwOjQ1OjM1IiwiZmFsc2UiLCJmYWxzZSIsIjEiLCIyMjAwIiwiNCIsIm9mZmVyX25hbWVfNCIsIjQiLCI0IiwiNCIsInBhcnRuZXJfcGF5bWVudCIsInBheW1lbnQtb3JkZXItNCIsInNob3Bfc2t1XzQiLCI1IiwicGF5bWVudCIsIjIwMjItMDQtMjEgMjI6NDQ6NTkuMzQ1IiwiNTU2ODQwNDQiCiIyIiwibnVsbCIsIm51bGwiLCJudWxsIiwibnVsbCIsIm51bGwiLCIxIiwiMjIiLCIyMDIyLTA0LTIyIiwiMjAyMi0wNC0yMiAyMDo0NTozNSIsImZhbHNlIiwiZmFsc2UiLCIxIiwiODgwMCIsIjUiLCJvZmZlcl9uYW1lXzUiLCI1IiwiNSIsIjUiLCJwYXJ0bmVyX3BheW1lbnQiLCJwYXltZW50LW9yZGVyLTUiLCJzaG9wX3NrdV81IiwiNSIsInBheW1lbnQiLCIyMDIyLTA0LTIxIDE1OjEzOjI1LjU3MyIsIjU1Njg0MDQ1IgoiMiIsIm51bGwiLCJudWxsIiwibnVsbCIsIm51bGwiLCJudWxsIiwiMSIsIjIyIiwiMjAyMi0wNC0yMiIsIm51bGwiLCJmYWxzZSIsImZhbHNlIiwiMSIsIjUwMDAiLCI1Iiwib2ZmZXJfbmFtZV83IiwiNyIsIjciLCJudWxsIiwiYWNjX2RlbGl2ZXJ5X3N1YnNpZHkiLCJudWxsIiwic2hvcF9za3VfNyIsIjUiLCJwYXltZW50IiwiMjAyMi0wNC0yMSAxNToxMzozMy41MzkiLCJudWxsIgoiMiIsIm51bGwiLCJudWxsIiwibnVsbCIsIm51bGwiLCJudWxsIiwiMSIsIjIyIiwiMjAyMi0wNC0yMiIsIm51bGwiLCJmYWxzZSIsImZhbHNlIiwiMSIsIjUwMDAiLCI1Iiwib2ZmZXJfbmFtZV84IiwiOCIsIjgiLCJudWxsIiwiYWNjX3lhX3dpdGhkcmF3IiwibnVsbCIsInNob3Bfc2t1XzgiLCI1IiwicGF5bWVudCIsIjIwMjItMDUtMDEgMDA6MDA6MDAiLCJudWxsIgoiMiIsIm51bGwiLCJudWxsIiwiNzc3IiwiMjAyMi0wNC0yMiAwMDowMDowMC4wIiwiMTIzMDAiLCIxIiwiMjIiLCIyMDIyLTA0LTIyIiwiMjAyMi0wNC0yMiAyMDo0NTozNSIsImZhbHNlIiwiZmFsc2UiLCIxMCIsIjc4ODAiLCIxMCIsIm9mZmVyX25hbWVfMTAiLCIxIiwiMSIsIm51bGwiLCJjYXJkIiwibnVsbCIsInNob3Bfc2t1XzEwIiwiNSIsInBheW1lbnQiLCJudWxsIiwiYWJjZC1hYmNkLWFiY2QtYWJjMSIKIjIiLCJudWxsIiwibnVsbCIsIjc3NyIsIjIwMjItMDQtMjIgMDA6MDA6MDAuMCIsIjEyMzAwIiwiMSIsIjIyIiwiMjAyMi0wNC0yMiIsIjIwMjItMDQtMjIgMjA6NDU6MzUiLCJmYWxzZSIsImZhbHNlIiwiMTEiLCI1NzgwIiwiMTEiLCJvZmZlcl9uYW1lXzExIiwiMSIsIjEiLCJudWxsIiwiY2FyZCIsIm51bGwiLCJzaG9wX3NrdV8xMSIsIjUiLCJwYXltZW50IiwibnVsbCIsImFiY2QtYWJjZC1hYmNkLWFiYzIiCgo=","type":"YT_DATA"}]