package ru.yandex.market.promoboss.dao.history;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import ru.yandex.market.common.test.db.DbUnitDataSet;
import ru.yandex.market.promoboss.dao.AbstractDaoTest;
import ru.yandex.market.promoboss.model.history.Audit;
import ru.yandex.market.promoboss.model.history.OperationType;

import static org.junit.jupiter.api.Assertions.*;

@ContextConfiguration(classes = PromoAuditDao.class)
@DbUnitDataSet(before = "AuditTestData.csv")
class PromoAuditDaoTest extends AbstractDaoTest {
    @Autowired
    private PromoAuditDao promoAuditDao;

    @Test
    void getPromosChanges() {
        List<Audit<Map<String, String>>> actualResult =
                promoAuditDao.getPromosChanges(
                        List.of(BigDecimal.valueOf(123L), BigDecimal.valueOf(802L)));

        List<Audit<Map<String, String>>> expectedResult = List.of(
                Audit.<Map<String, String>>builder()
                        .dbUser("dbuser")
                        .operationTime(1670803200000L) //2022-12-12 00:00:00.00000
                        .operationType(OperationType.UPDATE_AFTER)
                        .transactionId(BigDecimal.valueOf(123L))
                        .entity(new HashMap<>() {
                            {
                                put("promo_key", "promo_key");
                                put("parent_promo_id", "parent_promo_id");
                                put("source", "CATEGORYIFACE");
                                put("name", "name");
                                put("status", "READY");
                                put("active", "true");
                                put("hidden", "false");
                                put("mechanics_type", "cheapest_as_gift");
                                put("landing_url", "https://landing.url");
                                put("landing_url_autogenerated", "false");
                                put("rules_url", "https://rules.url");
                                put("rules_url_autogenerated", "false");
                                put("start_at", "765");
                                put("end_at", "451");
                                put("created_at", "123");
                                put("id", "2");
                            }
                        }).build(),
                Audit.<Map<String, String>>builder()
                        .dbUser("dbuser")
                        .operationTime(1670716800000L)//2022-12-11 00:00:00.00000
                        .operationType(OperationType.UPDATE_BEFORE)
                        .transactionId(BigDecimal.valueOf(123L))
                        .entity(new HashMap<>() {
                            {
                                put("promo_key", "promo_key");
                                put("parent_promo_id", "parent_promo_id");
                                put("source", "CATEGORYIFACE");
                                put("name", "name");
                                put("status", "NEW");
                                put("active", "true");
                                put("hidden", "false");
                                put("mechanics_type", "cheapest_as_gift");
                                put("landing_url", "https://landing.url");
                                put("landing_url_autogenerated", "false");
                                put("rules_url", "https://rules.url");
                                put("rules_url_autogenerated", "false");
                                put("start_at", "765");
                                put("end_at", "451");
                                put("created_at", "123");
                                put("id", "1");
                            }
                        }).build());

        Assertions.assertEquals(expectedResult, actualResult);
    }
}
