package ru.yandex.market.partner.content.common.utils;

import io.qameta.allure.Issue;
import org.assertj.core.api.Assertions;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@Issue("MARKETIR-9398")
public class DeepEqualityHelperTest {
    @Test
    public void deepEquals() {
        Map<String, Object> someMap = new HashMap<>();
        someMap.put("key1", "value1");
        someMap.put("key2", new String[]{"Array", "of", "strings"});
        someMap.put("key3", Collections.singletonMap(1, new int[]{2, 3, 4}));

        Map<String, Object> copyMap = new HashMap<>();
        copyMap.put("key1", "value1");
        copyMap.put("key2", new String[]{"Array", "of", "strings"});
        copyMap.put("key3", Collections.singletonMap(1, new int[]{2, 3, 4}));

        Assertions.assertThat(someMap).isNotEqualTo(copyMap); //standard equals does not work because of arrays in map
        Assertions.assertThat(DeepEqualityHelper.mapDeepEquals(someMap, copyMap)).isTrue();
    }

    @Test
    public void deepEqualsAndHashCodeForObject() {
        TestClass testObject = new TestClass();
        testObject.someArray = new long[]{1L, 2L, 3L};
        testObject.someInt = 15;
        testObject.someList.add("List");
        testObject.someList.add("of");
        testObject.someList.add("strings");
        testObject.someMap.put("someKey", new int[]{20, 30, 40});
        testObject.someMap.put("otherKey", 128L);
        testObject.someMap.put("objectKey", new TestClass());

        TestClass copy = new TestClass();
        copy.someArray = new long[]{1L, 2L, 3L};
        copy.someInt = 15;
        copy.someList.add("List");
        copy.someList.add("of");
        copy.someList.add("strings");
        copy.someMap.put("someKey", new int[]{20, 30, 40});
        copy.someMap.put("otherKey", 128L);
        copy.someMap.put("objectKey", new TestClass());

        Assertions.assertThat(testObject).isEqualTo(copy);
        Assertions.assertThat(testObject.hashCode()).isEqualTo(copy.hashCode());
        //standard equals does not work because of arrays in map
        Assertions.assertThat(testObject.standardEquals(copy)).isFalse();
        Assertions.assertThat(testObject.standardHashCode()).isNotEqualTo(copy.standardHashCode());

        Map<String, Object> map = new HashMap<>();
        map.put("key1", testObject);
        map.put("key2", new String[]{"Array", "of", "strings"});

        Map<String, Object> copyMap = new HashMap<>();
        copyMap.put("key1", copy);
        copyMap.put("key2", new String[]{"Array", "of", "strings"});

        Assertions.assertThat(map).isNotEqualTo(copyMap); //standard equals does not work because of arrays in map
        Assertions.assertThat(map.hashCode()).isNotEqualTo(copyMap.hashCode());
        Assertions.assertThat(DeepEqualityHelper.mapDeepEquals(map, copyMap)).isTrue();
        Assertions.assertThat(DeepEqualityHelper.mapDeepHashCode(map))
            .isEqualTo(DeepEqualityHelper.mapDeepHashCode(copyMap));
    }

    @Test
    public void deepHashCode() {
        Map<String, Object> someMap = new HashMap<>();
        someMap.put("key1", "value1");
        someMap.put("key2", new String[]{"Array", "of", "strings"});
        someMap.put("key3", Collections.singletonMap(1, new int[]{2, 3, 4}));

        Map<String, Object> copyMap = new HashMap<>();
        copyMap.put("key1", "value1");
        copyMap.put("key2", new String[]{"Array", "of", "strings"});
        copyMap.put("key3", Collections.singletonMap(1, new int[]{2, 3, 4}));

        //standard hashCodes are not equal because of arrays in map
        Assertions.assertThat(someMap.hashCode()).isNotEqualTo(copyMap.hashCode());
        Assertions.assertThat(DeepEqualityHelper.mapDeepHashCode(someMap))
            .isEqualTo(DeepEqualityHelper.mapDeepHashCode(copyMap));
    }

    private static final class TestClass {
        private Map<String, Object> someMap = new HashMap<>();
        private int someInt;
        private long[] someArray;
        private List<String> someList = new ArrayList<>();

        // standard equals generated by Idea
        public boolean standardEquals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            TestClass testClass = (TestClass) o;
            return someInt == testClass.someInt &&
                Objects.equals(someMap, testClass.someMap) &&
                Arrays.equals(someArray, testClass.someArray) &&
                Objects.equals(someList, testClass.someList);
        }

        // standard hashCode generated by Idea
        public int standardHashCode() {
            int result = Objects.hash(someMap, someInt, someList);
            result = 31 * result + Arrays.hashCode(someArray);
            return result;
        }

        // equals with the use of DeepEqualityHelper
        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            TestClass testClass = (TestClass) o;
            return someInt == testClass.someInt &&
                DeepEqualityHelper.mapDeepEquals(someMap, testClass.someMap) &&
                Arrays.equals(someArray, testClass.someArray) &&
                Objects.equals(someList, testClass.someList);
        }

        // hashCode with the use of DeepEqualityHelper
        @Override
        public int hashCode() {
            int result = Objects.hash(someInt, someList);
            result = 31 * result + Arrays.hashCode(someArray);
            result = 31 * result + DeepEqualityHelper.mapDeepHashCode(someMap);
            return result;
        }
    }
}