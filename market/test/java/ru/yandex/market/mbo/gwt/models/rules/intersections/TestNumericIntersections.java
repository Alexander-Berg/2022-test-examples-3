package ru.yandex.market.mbo.gwt.models.rules.intersections;

import org.junit.Before;
import org.junit.Test;
import ru.yandex.market.mbo.gwt.models.params.Param;
import ru.yandex.market.mbo.gwt.models.rules.ModelRuleTester;

import static ru.yandex.market.mbo.gwt.models.rules.ModelRuleTester.testCase;

/**
 * @author gilmulla
 */
public class TestNumericIntersections {

    private static final int NUMERIC50 = 50;
    private static final int NUMERIC150 = 150;
    private static final int NUMERIC70 = 70;
    private static final int NUMERIC180 = 180;
    private static final int NUMERIC90 = 90;
    private static final int NUMERIC110 = 110;
    private static final int NUMERIC200 = 200;
    private static final int NUMERIC10 = 10;
    private static final int NUMERIC1000 = 1000;
    private ModelRuleTester tester;

    @Before
    public void prepareTestCase() {
        tester = testCase()
                .startParameters()
                    .startParameter()
                        .xsl("str").type(Param.Type.STRING)
                    .endParameter()
                    .startParameter()
                        .xsl("num").type(Param.Type.NUMERIC)
                    .endParameter()
                .endParameters();
    }

    @Test
    public void testTwoRangesIntersectionOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC70, NUMERIC180)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().numericDomain().range(NUMERIC70, NUMERIC150).endDomain().endParam()
        .endResults();
    }

    @Test
    public void testThreeRangesIntersectionOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC70, NUMERIC180)
            .endRule()
            .startRule()
                .name("Third range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC90, 100)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().numericDomain().range(NUMERIC90, 100).endDomain().endParam()
        .endResults();
    }

    @Test
    public void testTwoEqualMatchOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First match").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
            .startRule()
                .name("Second match").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().modified().numeric(100).numericDomain().single(100).endDomain().endParam()
        .endResults();
    }

    @Test
    public void testCleanAndMatchOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Match").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
            .startRule()
                .name("Clean").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().conflict().numericDomain().empty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testCleanAndMatchOnEmptyParameterFixConflict1() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Match").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
            .startRule()
                .name("Clean").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().modified().maxFailedPriority(1)
                .numeric(100).numericDomain().single(100).endDomain()
            .endParam()
        .endResults();
    }

    @Test
    public void testCleanAndMatchOnEmptyParameterFixConflict2() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Match").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
            .startRule()
                .name("Clean").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().maxFailedPriority(1).isEmpty().numericDomain().singleEmpty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testCleanAndRangeOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Clean").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().conflict().numericDomain().empty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testCleanAndRangeOnEmptyParameterFixConflict1() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Range").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Clean").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().maxFailedPriority(1).isEmpty().numericDomain().singleEmpty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testCleanAndRangeOnEmptyParameterFixConflict2() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Range").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Clean").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().maxFailedPriority(1).shouldNull()
                .numericDomain().range(NUMERIC50, NUMERIC150).endDomain()
            .endParam()
        .endResults();
    }

    @Test
    public void testCleanAndMatchAndRangeOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Match").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
            .startRule()
                .name("Clean").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().conflict().numericDomain().empty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testCleanAndMatchAndRangeOnEmptyParameterFixConflict1() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Range").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .priority(1)
                .name("Match").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
            .startRule()
                .priority(2)
                .name("Clean").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().maxFailedPriority(1).isEmpty().numericDomain().singleEmpty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testCleanAndMatchAndRangeOnEmptyParameterFixConflict2() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Range").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .priority(2)
                .name("Match").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
            .startRule()
                .priority(1)
                .name("Clean").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().modified().maxFailedPriority(1)
                .numeric(100).numericDomain().single(100).endDomain()
            .endParam()
        .endResults();
    }

    @Test
    public void testCleanAndMatchAndRangeOnEmptyParameterFixConflict3() {
        final int rulePriority = 3;
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Range").group("Test")
                .priority(rulePriority)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .priority(2)
                .name("Match").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
            .startRule()
                .priority(1)
                .name("Clean").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().modified().maxFailedPriority(1)
                .numeric(100).numericDomain().single(100).endDomain()
            .endParam()
        .endResults();
    }

    @Test
    public void testTwoRangeAndOneMatchIntersectionOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC70, NUMERIC180)
            .endRule()
            .startRule()
                .name("Third range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().modified().numeric(100).numericDomain().single(100).endDomain().endParam()
        .endResults();
    }

    @Test
    public void testTwoRangesIntersectionOnValidParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setNumeric(100)
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC70, NUMERIC180)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().numericDomain().range(NUMERIC70, NUMERIC150).endDomain().endParam()
        .endResults();
    }

    @Test
    public void testThreeRangesIntersectionOnValidParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setNumeric(100)
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC70, NUMERIC180)
            .endRule()
            .startRule()
                .name("Third range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC90, NUMERIC110)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().numericDomain().range(NUMERIC90, NUMERIC110).endDomain().endParam()
        .endResults();
    }

    @Test
    public void testRangeAndMatchIntersectionOnValidParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setNumeric(100)
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Third range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().numeric(100).numericDomain().single(100).endDomain().endParam()
        .endResults();
    }

    public void testRangeAndMatchIntersectionOnInvalidParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setNumeric(NUMERIC10)
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("Range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Match").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").matchesNumeric(100)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").invalid().numeric(100).numericDomain().single(100).endDomain().endParam()
        .endResults();
    }

    @Test
    public void testTwoRangesIntersectionOnInvalidParameter() {
        final int numVal = 300;
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setNumeric(numVal)
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, NUMERIC150)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC70, NUMERIC180)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").invalid().shouldNull().numericDomain().range(NUMERIC70, NUMERIC150).endDomain().endParam()
        .endResults();
    }

    @Test
    public void testTwoRangesConflictOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().conflict().numericDomain().empty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testTwoRangesConflictOnEmptyParameterFixConflict() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().maxFailedPriority(1).shouldNull()
                .numericDomain().range(NUMERIC150, NUMERIC200).endDomain()
            .endParam()
        .endResults();
    }

    @Test
    public void testTwoRangesConflictOnNotEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setNumeric(NUMERIC1000)
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().conflict().numericDomain().empty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testThreeRangesConflictOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
            .startRule()
                .name("Third range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC10, NUMERIC90)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().conflict().numericDomain().empty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testThreeRangesConflictOnEmptyParameterFixConflict1() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
            .startRule()
                .name("Third range").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC10, NUMERIC90)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().maxFailedPriority(1).shouldNull()
                .numericDomain().range(NUMERIC10, NUMERIC90).endDomain()
            .endParam()
        .endResults();
    }

    @Test
    public void testThreeRangesConflictOnEmptyParameterFixConflict2() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
            .startRule()
                .name("Third range").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC10, NUMERIC90)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().maxFailedPriority(1).shouldNull()
                .numericDomain().range(NUMERIC50, NUMERIC90).endDomain()
            .endParam()
        .endResults();
    }

    @Test
    public void testThreeRangesConflictOnEmptyParameterFixConflictFailed() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                .priority(2)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
            .startRule()
                .name("Third range").group("Test")
                .priority(1)
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC10, NUMERIC90)
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().maxFailedPriority(2).shouldNull().numericDomain().empty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testTwoRangesAndCleanConflictOnEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setEmpty()
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().conflict().numericDomain().empty().endDomain().endParam()
        .endResults();
    }

    @Test
    public void testTwoRangesAndCleanConflictOnNotEmptyParameter() {
        tester
        .startModel()
            .id(1).category(1)
            .param("str").setString("abc")
            .param("num").setNumeric(NUMERIC1000)
        .endModel()
        .startRuleSet()
            .id(1)
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC50, 100)
            .endRule()
            .startRule()
                .name("Second range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").insideRange(NUMERIC150, NUMERIC200)
            .endRule()
            .startRule()
                .name("First range").group("Test")
                ._if()
                    .param("str").matchesString("abc")
                .then()
                    .param("num").isEmpty()
            .endRule()
        .endRuleSet()
        .doInference()
        .results()
            .count(1)
            .iterationCount(2)
            .param("num").valid().shouldNull().conflict().numericDomain().empty().endDomain().endParam()
        .endResults();
    }
}
