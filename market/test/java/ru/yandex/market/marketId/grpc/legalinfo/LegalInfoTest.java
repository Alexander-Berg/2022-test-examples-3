package ru.yandex.market.marketId.grpc.legalinfo;import java.time.Instant;import java.time.temporal.ChronoUnit;import com.google.protobuf.Timestamp;import io.grpc.Status;import io.grpc.StatusRuntimeException;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import ru.yandex.market.common.test.db.DbUnitDataSet;import ru.yandex.market.id.ConfirmLegalInfoRequest;import ru.yandex.market.id.LegalInfo;import ru.yandex.market.id.LegalInfoType;import ru.yandex.market.id.MarketAccount;import ru.yandex.market.id.MarketIdServiceGrpc;import ru.yandex.market.id.UpdateLegalInfoRequest;import ru.yandex.market.id.UpdateLegalInfoResponse;import ru.yandex.market.marketId.grpc.GrpcFunctionalTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.junit.jupiter.api.Assertions.assertTrue;@DbUnitDataSet(before = "../../Test.before.csv")class LegalInfoTest extends GrpcFunctionalTest {    private static final MarketIdServiceGrpc.MarketIdServiceBlockingStub stub            = MarketIdServiceGrpc.newBlockingStub(channel);    @Test    @DisplayName("Подтверждение юр.инфо")    @DbUnitDataSet(after = "csv/ConfirmLegalInfoAll.after.csv")    void testlegalInfoConfirm() {        MarketIdServiceGrpc.MarketIdServiceBlockingStub stub                = MarketIdServiceGrpc.newBlockingStub(channel);        ConfirmLegalInfoRequest request = ConfirmLegalInfoRequest.newBuilder()                .setMarketId(4)                .addLegalInfoType(LegalInfoType.LEGAL_NAME)                .addLegalInfoType(LegalInfoType.TYPE)                .addLegalInfoType(LegalInfoType.REGISTRATION_NUMBER)                .build();        MarketAccount marketAccount = stub.confirmLegalInfo(request);    }    @Test    @DisplayName("Подтверждение юр.инфо по маркет ИД, которого нет")    void testlegalInfoConfirmAbsentMarketId() {        ConfirmLegalInfoRequest request = ConfirmLegalInfoRequest.newBuilder()                .setMarketId(100)                .addLegalInfoType(LegalInfoType.LEGAL_NAME)                .addLegalInfoType(LegalInfoType.TYPE)                .addLegalInfoType(LegalInfoType.REGISTRATION_NUMBER)                .build();        StatusRuntimeException sre = assertThrows(StatusRuntimeException.class, () -> stub.confirmLegalInfo(request));        assertEquals(Status.Code.INVALID_ARGUMENT, sre.getStatus().getCode());    }    @Test    @DisplayName("Подтверждение юр.инфо. НИчего не поменялось.")    @DbUnitDataSet(after = "../../Test.before.csv")    void testlegalInfoConfirmNothingChanged() {        MarketIdServiceGrpc.MarketIdServiceBlockingStub stub                = MarketIdServiceGrpc.newBlockingStub(channel);        ConfirmLegalInfoRequest request = ConfirmLegalInfoRequest.newBuilder()                .setMarketId(1)                .addLegalInfoType(LegalInfoType.TYPE)                .build();        MarketAccount marketAccount = stub.confirmLegalInfo(request);    }    @Test    @DisplayName("Обновление Юр данных")    @DbUnitDataSet(after = "csv/UpdateLegalInfo.after.csv")    void updateLegalInfo() {        UpdateLegalInfoRequest request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(1)                .setTimestamp(Timestamp.newBuilder().setSeconds(Instant.now().getEpochSecond()))                .setLegalInfo(LegalInfo.newBuilder()                        .setRegistrationNumber("12345")                        .setLegalName("Changed Name")                        .build())                .build();        UpdateLegalInfoResponse response = stub.updateLegalInfo(request);        assertTrue(response.getSuccess());    }    @Test    @DisplayName("Обновление Юр данных. C очисткой полей")    @DbUnitDataSet(after = "csv/UpdateLegalInfoWithClear.after.csv")    void updateLegalInfoWithClear() {        UpdateLegalInfoRequest request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(1)                .setTimestamp(Timestamp.newBuilder().setSeconds(Instant.now().getEpochSecond()))                .setLegalInfo(LegalInfo.newBuilder()                        .setRegistrationNumber("12345")                        .setLegalName("")                        .setType("")                        .build())                .build();        UpdateLegalInfoResponse response = stub.updateLegalInfo(request);        assertTrue(response.getSuccess());    }    @Test    @DisplayName("Обновление Юр данных. Ничего не поменялось")    void updateLegalInfoNothingChanged() {        UpdateLegalInfoRequest request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(4)                .setTimestamp(Timestamp.newBuilder().setSeconds(Instant.now().getEpochSecond()))                .setLegalInfo(LegalInfo.newBuilder()                        .setType("type")                        .setLegalName("MarketID4")                        .setRegistrationNumber("7654322")                        .build())                .build();        UpdateLegalInfoResponse response = stub.updateLegalInfo(request);        assertFalse(response.getSuccess());        assertEquals("Already up to date", response.getMessage());    }    @Test    @DisplayName("Обновление Юр данных. Нет маркетИД")    @DbUnitDataSet(after = "../../Test.before.csv")    void updateLegalInfoMarketIdNotFound() {        UpdateLegalInfoRequest request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(6)                .setTimestamp(Timestamp.newBuilder().setSeconds(Instant.now().getEpochSecond()))                .setLegalInfo(LegalInfo.newBuilder()                        .setType("Type1")                        .setLegalName("MarketIDOne")                        .build())                .build();        UpdateLegalInfoResponse response = stub.updateLegalInfo(request);        assertFalse(response.getSuccess());        assertEquals("Market ID not found", response.getMessage());    }    @Test    @DisplayName("Обновление Юр данных. Дублирование огрн")    @DbUnitDataSet(after = "../../Test.before.csv")    void updateLegalInfoDuplicateRegNumber() {        UpdateLegalInfoRequest request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(1)                .setTimestamp(Timestamp.newBuilder().setSeconds(Instant.now().getEpochSecond()))                .setLegalInfo(LegalInfo.newBuilder()                        .setType("Type1")                        .setLegalName("MarketIDOne")                        .setRegistrationNumber("7654322")                        .build())                .build();        UpdateLegalInfoResponse response = stub.updateLegalInfo(request);        assertFalse(response.getSuccess());        assertEquals("Duplicate registration number", response.getMessage());    }    @Test    @DisplayName("Не установлен таймстемп")    @DbUnitDataSet(after = "../../Test.before.csv")    void updateLegalInfoNoTimestamp() {        UpdateLegalInfoRequest request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(1)                .setLegalInfo(LegalInfo.newBuilder()                        .setType("Type1")                        .setLegalName("MarketIDOne")                        .setRegistrationNumber("7654322")                        .build())                .build();        UpdateLegalInfoResponse response = stub.updateLegalInfo(request);        assertFalse(response.getSuccess());        assertEquals("Timestamp is empty. Unable to update", response.getMessage());    }    @Test    @DisplayName("Таймстемп старый. Не обновляем")    @DbUnitDataSet(after = "../../Test.before.csv")    void updateLegalInfoOldTimestamp() {        UpdateLegalInfoRequest request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(1)                .setTimestamp(Timestamp.newBuilder().setSeconds(Instant.now()                        .minus(20, ChronoUnit.DAYS)                        .getEpochSecond()))                .setLegalInfo(LegalInfo.newBuilder()                        .setType("Type1")                        .setLegalName("MarketIDOne")                        .setRegistrationNumber("7654322")                        .build())                .build();        UpdateLegalInfoResponse response = stub.updateLegalInfo(request);        assertFalse(response.getSuccess());        assertTrue(response.getMessage().startsWith("Old timestamp"));    }    @Test    @DisplayName("Первое обновление устанавливает новый таймстемп. Второе с более старым не срабатывает")    void updateLegalInfoSaveTimestampTimestamp() {        UpdateLegalInfoRequest request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(2)                .setTimestamp(Timestamp.newBuilder().setSeconds(Instant.now()                        .getEpochSecond()))                .setLegalInfo(LegalInfo.newBuilder()                        .setType("Type1")                        .setLegalName("MarketIDOne")                        .setRegistrationNumber("55555")                        .build())                .build();        UpdateLegalInfoResponse response = stub.updateLegalInfo(request);        assertTrue(response.getSuccess());        request = UpdateLegalInfoRequest.newBuilder()                .setMarketId(2)                .setTimestamp(Timestamp.newBuilder().setSeconds(Instant.now()                        .minus(10, ChronoUnit.DAYS)                        .getEpochSecond()))                .setLegalInfo(LegalInfo.newBuilder()                        .setType("Type1")                        .setLegalName("MarketIDOne")                        .setRegistrationNumber("7654322")                        .build())                .build();        response = stub.updateLegalInfo(request);        assertFalse(response.getSuccess());        assertTrue(response.getMessage().startsWith("Old timestamp"));    }}