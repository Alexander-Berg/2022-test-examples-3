/*
 * Infor SCE WM API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ru.yandex.market.wrap.infor.client.api;

import ru.yandex.market.wrap.infor.client.model.AdjustmentDTO;
import ru.yandex.market.wrap.infor.client.model.AdjustmentDetailDTO;
import ru.yandex.market.wrap.infor.client.model.AdvanceShipNoticeBODListDTO;
import ru.yandex.market.wrap.infor.client.model.AltSkuDTO;
import ru.yandex.market.wrap.infor.client.model.BatchSKUDTO;
import ru.yandex.market.wrap.infor.client.model.BatchStorerDTO;
import ru.yandex.market.wrap.infor.client.model.CodeListDTO;
import ru.yandex.market.wrap.infor.client.model.CodeLkupDTO;
import ru.yandex.market.wrap.infor.client.model.ERPLotDTO;
import ru.yandex.market.wrap.infor.client.model.ExportRequestDTO;
import ru.yandex.market.wrap.infor.client.model.InspectDeliveryBODListDTO;
import ru.yandex.market.wrap.infor.client.model.InvBalanceDetailListDTO;
import ru.yandex.market.wrap.infor.client.model.InventoryAdjustmentBODListDTO;
import ru.yandex.market.wrap.infor.client.model.InventoryBalanceListDTO;
import ru.yandex.market.wrap.infor.client.model.InventoryCountHeaderDTO;
import ru.yandex.market.wrap.infor.client.model.InventoryCountHeaderDetailDTO;
import ru.yandex.market.wrap.infor.client.model.InventoryHoldBODListDTO;
import ru.yandex.market.wrap.infor.client.model.InventoryHoldDTO;
import ru.yandex.market.wrap.infor.client.model.LPNDetailDTO;
import ru.yandex.market.wrap.infor.client.model.LoadHdrDTO;
import ru.yandex.market.wrap.infor.client.model.LoadOrderDetailDTO;
import ru.yandex.market.wrap.infor.client.model.LoadStopDTO;
import ru.yandex.market.wrap.infor.client.model.LotDTO;
import ru.yandex.market.wrap.infor.client.model.LotxIDDetailDTO;
import ru.yandex.market.wrap.infor.client.model.OrderDTO;
import ru.yandex.market.wrap.infor.client.model.OrderDetailDTO;
import ru.yandex.market.wrap.infor.client.model.PackDTO;
import ru.yandex.market.wrap.infor.client.model.PbsrptReportsDTO;
import ru.yandex.market.wrap.infor.client.model.PbsrptReportsParamsDTO;
import ru.yandex.market.wrap.infor.client.model.PickListBODListDTO;
import ru.yandex.market.wrap.infor.client.model.PoDTO;
import ru.yandex.market.wrap.infor.client.model.PoDetailDTO;
import ru.yandex.market.wrap.infor.client.model.PutawayStrategyDTO;
import ru.yandex.market.wrap.infor.client.model.PutawayStrategyDetailDAO;
import ru.yandex.market.wrap.infor.client.model.PutawayStrategyDetailDTO;
import ru.yandex.market.wrap.infor.client.model.ReceiptDTO;
import ru.yandex.market.wrap.infor.client.model.ReceiptDetailDTO;
import ru.yandex.market.wrap.infor.client.model.ReceiveDeliveryBODListDTO;
import ru.yandex.market.wrap.infor.client.model.SectionDTO;
import ru.yandex.market.wrap.infor.client.model.SecurityUserDTO;
import ru.yandex.market.wrap.infor.client.model.SerialNumberDTO;
import ru.yandex.market.wrap.infor.client.model.ShipmentOrderBODListDTO;
import ru.yandex.market.wrap.infor.client.model.SkuDTO;
import ru.yandex.market.wrap.infor.client.model.SkuListDTO;
import ru.yandex.market.wrap.infor.client.model.SkuxLocDTO;
import ru.yandex.market.wrap.infor.client.model.StorerDTO;
import ru.yandex.market.wrap.infor.client.model.StorerSKUListDTO;
import ru.yandex.market.wrap.infor.client.model.SubstituteSkuDTO;
import ru.yandex.market.wrap.infor.client.model.TransferDTO;
import ru.yandex.market.wrap.infor.client.model.TransferListDTO;
import ru.yandex.market.wrap.infor.client.model.TransferStorerSkuListDTO;
import ru.yandex.market.wrap.infor.client.model.TransferkeyDTO;
import ru.yandex.market.wrap.infor.client.model.TransmitlogDTO;
import ru.yandex.market.wrap.infor.client.model.ZoneStdsDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Allocate an existing order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allocateShipmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        OrderDTO response = api.allocateShipment(warehouse, tenant, username, password, orderkey);

        // TODO: test validations
    }
    
    /**
     * Cancels an existing load.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String loadId = null;
        PoDTO response = api.cancel(warehouse, tenant, username, password, loadId);

        // TODO: test validations
    }
    
    /**
     * Cancels an existing po.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelPoTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String poKey = null;
        Boolean converttoasnFlag = null;
        PoDTO response = api.cancelPo(warehouse, tenant, username, password, poKey, converttoasnFlag);

        // TODO: test validations
    }
    
    /**
     * cancel single receipt by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelReceiptTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        ReceiptDTO response = api.cancelReceipt(warehouse, tenant, username, password, receiptkey);

        // TODO: test validations
    }
    
    /**
     * Cancel an existing order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelShipmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        OrderDTO response = api.cancelShipment(warehouse, tenant, username, password, orderkey);

        // TODO: test validations
    }
    
    /**
     * Closes an existing po.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String poKey = null;
        Boolean converttoasnFlag = null;
        PoDTO response = api.close(warehouse, tenant, username, password, poKey, converttoasnFlag);

        // TODO: test validations
    }
    
    /**
     * Delete single alt sku by key and type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAltSkuTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String altsku = null;
        AltSkuDTO response = api.deleteAltSku(warehouse, tenant, username, password, storerkey, altsku);

        // TODO: test validations
    }
    
    /**
     * Delete single carrier by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCarrierTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.deleteCarrier(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Delete single customer by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerByKeyTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.deleteCustomerByKey(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Find a single item by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String item = null;
        String owner = null;
        SkuDTO response = api.deleteItem(warehouse, tenant, username, password, item, owner);

        // TODO: test validations
    }
    
    /**
     * Delete single owner by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOwnerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.deleteOwner(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Delete a single pack by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePackTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String pack = null;
        PackDTO response = api.deletePack(warehouse, tenant, username, password, pack);

        // TODO: test validations
    }
    
    /**
     * Delete single putaway strategy by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePutawayStrategyTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String putawaystrategykey = null;
        PutawayStrategyDTO response = api.deletePutawayStrategy(warehouse, tenant, username, password, putawaystrategykey);

        // TODO: test validations
    }
    
    /**
     * Delete a single putaway strategy detail line by key and line number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePutawayStrategyDetailTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String putawaystrategykey = null;
        String putawaystrategylinenumber = null;
        PutawayStrategyDTO response = api.deletePutawayStrategyDetail(warehouse, tenant, username, password, putawaystrategykey, putawaystrategylinenumber);

        // TODO: test validations
    }
    
    /**
     * Delete single receipt by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReceiptTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        ReceiptDTO response = api.deleteReceipt(warehouse, tenant, username, password, receiptkey);

        // TODO: test validations
    }
    
    /**
     * Delete single receipt by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReceiptASNTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        ReceiptDTO response = api.deleteReceiptASN(warehouse, tenant, username, password, receiptkey);

        // TODO: test validations
    }
    
    /**
     * Delete an existing section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String sectionkey = null;
        String response = api.deleteSection(warehouse, tenant, username, password, sectionkey);

        // TODO: test validations
    }
    
    /**
     * Delete single storer by key and type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSkuxLocTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String sku = null;
        String loc = null;
        SkuxLocDTO response = api.deleteSkuxLoc(warehouse, tenant, username, password, storerkey, sku, loc);

        // TODO: test validations
    }
    
    /**
     * Delete single storer by key (type 1)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStorerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.deleteStorer(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Delete single storer by key and type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStorerByKeyAndTypeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String type = null;
        StorerDTO response = api.deleteStorerByKeyAndType(warehouse, tenant, username, password, storerkey, type);

        // TODO: test validations
    }
    
    /**
     * Delete single storer by key and type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubstituteSkuTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String sku = null;
        String substitutesku = null;
        SubstituteSkuDTO response = api.deleteSubstituteSku(warehouse, tenant, username, password, storerkey, sku, substitutesku);

        // TODO: test validations
    }
    
    /**
     * Delete single supplier by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSupplierTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.deleteSupplier(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Find receipt events for a single receipt by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventsTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        List<Object> response = api.findEvents(warehouse, tenant, username, password, receiptkey);

        // TODO: test validations
    }
    
    /**
     * Find receipt events for a single receipt by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventsASNTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        List<Object> response = api.findEventsASN(warehouse, tenant, username, password, receiptkey);

        // TODO: test validations
    }
    
    /**
     * Adds InventoryCountPosted event for item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateInventoryCountTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String item = null;
        String owner = null;
        String reportzeroinventory = null;
        InventoryCountHeaderDTO response = api.generateInventoryCount(warehouse, tenant, username, password, item, owner, reportzeroinventory);

        // TODO: test validations
    }
    
    /**
     * Generate Storer Export storer by key and type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateStorerExportTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String type = null;
        StorerDTO response = api.generateStorerExport(warehouse, tenant, username, password, storerkey, type);

        // TODO: test validations
    }
    
    /**
     * Find a single adjustment by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdjustmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String adjustmentkey = null;
        AdjustmentDTO response = api.getAdjustment(warehouse, tenant, username, password, adjustmentkey);

        // TODO: test validations
    }
    
    /**
     * Find a single adjustment detail by key and line
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdjustmentLineTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String adjustmentkey = null;
        String adjustmentlinenumber = null;
        AdjustmentDetailDTO response = api.getAdjustmentLine(warehouse, tenant, username, password, adjustmentkey, adjustmentlinenumber);

        // TODO: test validations
    }
    
    /**
     * Find a single advanced ship notice (receipt) by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdvanceShipNoticeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        ReceiptDTO response = api.getAdvanceShipNotice(warehouse, tenant, username, password, receiptkey);

        // TODO: test validations
    }
    
    /**
     * Find a single alt sku by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAltSkuTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String altsku = null;
        AltSkuDTO response = api.getAltSku(warehouse, tenant, username, password, storerkey, altsku);

        // TODO: test validations
    }
    
    /**
     * Find a single carrier by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCarrierTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.getCarrier(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Find a single code list by name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCodeListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String listname = null;
        CodeListDTO response = api.getCodeList(warehouse, tenant, username, password, listname);

        // TODO: test validations
    }
    
    /**
     * Find a single code by list name and code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCodeLkupTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String listname = null;
        String code = null;
        CodeLkupDTO response = api.getCodeLkup(warehouse, tenant, username, password, listname, code);

        // TODO: test validations
    }
    
    /**
     * Find a single customer by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.getCustomer(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Get the ERP lot for a given transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getERPLotTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        LotxIDDetailDTO body = null;
        ERPLotDTO response = api.getERPLot(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Gets a list of events ready for export using query parameters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExportEventsTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String type = null;
        String updatestatus = null;
        String orderby = null;
        String pollersearchstatus = null;
        String transmitflagtouse = null;
        Boolean requireexternallot = null;
        String eventcategory = null;
        Integer restrictrowsto = null;
        Boolean asjson = null;
        Boolean generatemessages = null;
        Boolean rebuildmessages = null;
        Boolean ignoredepositcatchdata = null;
        String ignoredepositreferencetypes = null;
        List<TransmitlogDTO> response = api.getExportEvents(warehouse, tenant, username, password, type, updatestatus, orderby, pollersearchstatus, transmitflagtouse, requireexternallot, eventcategory, restrictrowsto, asjson, generatemessages, rebuildmessages, ignoredepositcatchdata, ignoredepositreferencetypes);

        // TODO: test validations
    }
    
    /**
     * Gets a list of events ready for export using a request DTO
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExportEventsWithRequestTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        ExportRequestDTO body = null;
        List<TransmitlogDTO> response = api.getExportEventsWithRequest(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * get hold reasons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHoldReasonsTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String lot = null;
        InventoryHoldDTO response = api.getHoldReasons(warehouse, tenant, username, password, lot);

        // TODO: test validations
    }
    
    /**
     * Find a single item by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String item = null;
        String owner = null;
        SkuDTO response = api.getItem(warehouse, tenant, username, password, item, owner);

        // TODO: test validations
    }
    
    /**
     * Get details for SKU
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer offset = null;
        Integer limit = null;
        StorerSKUListDTO body = null;
        SkuListDTO response = api.getItemList(warehouse, tenant, username, password, offset, limit, body);

        // TODO: test validations
    }
    
    /**
     * Find a single load order detail by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadOrderDetailTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String loadorderdetailid = null;
        LoadOrderDetailDTO response = api.getLoadOrderDetail(warehouse, tenant, username, password, loadorderdetailid);

        // TODO: test validations
    }
    
    /**
     * Find a single stop
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadStopTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer loadstopid = null;
        LoadStopDTO response = api.getLoadStop(warehouse, tenant, username, password, loadstopid);

        // TODO: test validations
    }
    
    /**
     * Find a single load by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadhdrTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String loadid = null;
        LoadHdrDTO response = api.getLoadhdr(warehouse, tenant, username, password, loadid);

        // TODO: test validations
    }
    
    /**
     * Find a single item by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLotTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String lot = null;
        LotDTO response = api.getLot(warehouse, tenant, username, password, lot);

        // TODO: test validations
    }
    
    /**
     * Find a single owner by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOwnerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.getOwner(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Find a single item by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String pack = null;
        PackDTO response = api.getPack(warehouse, tenant, username, password, pack);

        // TODO: test validations
    }
    
    /**
     * Find a single report by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPbsrptReportsTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String rptId = null;
        PbsrptReportsDTO response = api.getPbsrptReports(warehouse, tenant, username, password, rptId);

        // TODO: test validations
    }
    
    /**
     * Find a single report parameter by Report ID and parameter name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPbsrptReportsParamsTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String rptId = null;
        String paramName = null;
        PbsrptReportsParamsDTO response = api.getPbsrptReportsParams(warehouse, tenant, username, password, rptId, paramName);

        // TODO: test validations
    }
    
    /**
     * Find a single po by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String pokey = null;
        PoDTO response = api.getPo(warehouse, tenant, username, password, pokey);

        // TODO: test validations
    }
    
    /**
     * Find a single po detail by key and line
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoLineTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String pokey = null;
        String polinenumber = null;
        PoDetailDTO response = api.getPoLine(warehouse, tenant, username, password, pokey, polinenumber);

        // TODO: test validations
    }
    
    /**
     * Find a single putaway strategy by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPutawayStrategyTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String putawaystrategykey = null;
        PutawayStrategyDTO response = api.getPutawayStrategy(warehouse, tenant, username, password, putawaystrategykey);

        // TODO: test validations
    }
    
    /**
     * Find a single putaway strategy detail line by key and line number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPutawayStrategyDetailTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String putawaystrategykey = null;
        String putawaystrategylinenumber = null;
        PutawayStrategyDetailDTO response = api.getPutawayStrategyDetail(warehouse, tenant, username, password, putawaystrategykey, putawaystrategylinenumber);

        // TODO: test validations
    }
    
    /**
     * Find a single receipt by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReceiptTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        ReceiptDTO response = api.getReceipt(warehouse, tenant, username, password, receiptkey);

        // TODO: test validations
    }
    
    /**
     * Find a single section by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionByKeyTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String sectionkey = null;
        SectionDTO response = api.getSectionByKey(warehouse, tenant, username, password, sectionkey);

        // TODO: test validations
    }
    
    /**
     * Find one or more sections by constraint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsByConstraintsTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        SectionDTO body = null;
        List<SectionDTO> response = api.getSectionsByConstraints(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Find a single user by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityUserTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String userid = null;
        SecurityUserDTO response = api.getSecurityUser(warehouse, tenant, username, password, userid);

        // TODO: test validations
    }
    
    /**
     * Find the serial number storage type for an owner and sku
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSerialNumberStorageTypeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String owner = null;
        String sku = null;
        String response = api.getSerialNumberStorageType(warehouse, tenant, username, password, owner, sku);

        // TODO: test validations
    }
    
    /**
     * Find the serial number storage type for an owner and sku
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSerialNumbersTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String owner = null;
        String sku = null;
        String lot = null;
        String sourceKey = null;
        String sourceLineNumber = null;
        String inOutIndicator = null;
        SerialNumberDTO response = api.getSerialNumbers(warehouse, tenant, username, password, owner, sku, lot, sourceKey, sourceLineNumber, inOutIndicator);

        // TODO: test validations
    }
    
    /**
     * Find a single order by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        OrderDTO response = api.getShipment(warehouse, tenant, username, password, orderkey);

        // TODO: test validations
    }
    
    /**
     * Find a single order detail by key and line
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipmentLineTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        String orderlinenumber = null;
        OrderDetailDTO response = api.getShipmentLine(warehouse, tenant, username, password, orderkey, orderlinenumber);

        // TODO: test validations
    }
    
    /**
     * Find a single skuxloc by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSkuxLocTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String sku = null;
        String loc = null;
        SkuxLocDTO response = api.getSkuxLoc(warehouse, tenant, username, password, storerkey, sku, loc);

        // TODO: test validations
    }
    
    /**
     * Get the storage type of a given lot
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageTypeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        SkuDTO body = null;
        String response = api.getStorageType(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Find a single storer by key (type defaulted to 1)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.getStorer(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Find the storer based on the externstorerkey, type and accountingEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorerByExternalTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String externstorerkey = null;
        String type = null;
        String accountingentity = null;
        String createflag = null;
        List<Object> response = api.getStorerByExternal(warehouse, tenant, username, password, externstorerkey, type, accountingentity, createflag);

        // TODO: test validations
    }
    
    /**
     * Find a single storer by key and type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorerByKeyAndTypeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String type = null;
        StorerDTO response = api.getStorerByKeyAndType(warehouse, tenant, username, password, storerkey, type);

        // TODO: test validations
    }
    
    /**
     * Find a single substitutesku by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstituteSkuTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String sku = null;
        String substitutesku = null;
        SubstituteSkuDTO response = api.getSubstituteSku(warehouse, tenant, username, password, storerkey, sku, substitutesku);

        // TODO: test validations
    }
    
    /**
     * Find a single supplier by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupplierTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO response = api.getSupplier(warehouse, tenant, username, password, storerkey);

        // TODO: test validations
    }
    
    /**
     * Get transfers by keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransfersTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Boolean withDetails = null;
        List<TransferkeyDTO> body = null;
        TransferListDTO response = api.getTransfers(warehouse, tenant, username, password, withDetails, body);

        // TODO: test validations
    }
    
    /**
     * put a lot on hold
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holdTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        LotDTO body = null;
        api.hold(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Put an existing order on hold.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holdShipmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        OrderDTO response = api.holdShipment(warehouse, tenant, username, password, orderkey);

        // TODO: test validations
    }
    
    /**
     * Allow adjustment of inventory directed by the production process
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hostDirectedAdjustmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        AdjustmentDTO body = null;
        List<Object> response = api.hostDirectedAdjustment(warehouse, tenant, username, password, receiptkey, body);

        // TODO: test validations
    }
    
    /**
     * Allow receipt of inventory directed by the host
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hostDirectedReceiptTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        ReceiptDTO body = null;
        List<Object> response = api.hostDirectedReceipt(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Get the inspect delivery details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inspectDeliveryListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        Integer recordcount = null;
        InspectDeliveryBODListDTO response = api.inspectDeliveryList(warehouse, tenant, username, password, serialkey, recordcount);

        // TODO: test validations
    }
    
    /**
     * Get the inventory adjustment details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inventoryAdjustmentListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        Integer recordcount = null;
        InventoryAdjustmentBODListDTO response = api.inventoryAdjustmentList(warehouse, tenant, username, password, serialkey, recordcount);

        // TODO: test validations
    }
    
    /**
     * Get the inventory hold details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inventoryHoldListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        Integer recordcount = null;
        InventoryHoldBODListDTO response = api.inventoryHoldList(warehouse, tenant, username, password, serialkey, recordcount);

        // TODO: test validations
    }
    
    /**
     * List codes for apportion rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApportionRuleTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        CodeListDTO response = api.listApportionRule(warehouse, tenant, username, password);

        // TODO: test validations
    }
    
    /**
     * List codes for creating Putaway Task During RF Receipt
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCreatePutawayTaskOnRFReceiptTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        CodeListDTO response = api.listCreatePutawayTaskOnRFReceipt(warehouse, tenant, username, password);

        // TODO: test validations
    }
    
    /**
     * put lots on or off hold based on quantity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lotRequestTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        LotDTO body = null;
        String itrnkey = null;
        String lottable09 = null;
        api.lotRequest(warehouse, tenant, username, password, body, itrnkey, lottable09);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing adjustment.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAdjustmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        AdjustmentDTO body = null;
        AdjustmentDTO response = api.postAdjustment(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing adjustment line.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAdjustmentLineTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String adjustmentkey = null;
        AdjustmentDetailDTO body = null;
        AdjustmentDetailDTO response = api.postAdjustmentLine(warehouse, tenant, username, password, adjustmentkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing receipt.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAdvanceShipNoticeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        ReceiptDTO body = null;
        ReceiptDTO response = api.postAdvanceShipNotice(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing altsku.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAltSkuTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        AltSkuDTO body = null;
        AltSkuDTO response = api.postAltSku(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing carrier.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCarrierTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        StorerDTO body = null;
        StorerDTO response = api.postCarrier(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing code list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCodeListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        CodeListDTO body = null;
        CodeListDTO response = api.postCodeList(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing code list code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCodeLkupTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String listname = null;
        CodeLkupDTO body = null;
        CodeLkupDTO response = api.postCodeLkup(warehouse, tenant, username, password, listname, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing code list code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCodeLkupbyCodeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String listname = null;
        String code = null;
        CodeLkupDTO body = null;
        CodeLkupDTO response = api.postCodeLkupbyCode(warehouse, tenant, username, password, listname, code, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing customer.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCustomerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        StorerDTO body = null;
        StorerDTO response = api.postCustomer(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing item.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postItemTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        SkuDTO body = null;
        SkuDTO response = api.postItem(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing loadhdr.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postLoadHdrTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        LoadHdrDTO body = null;
        LoadHdrDTO response = api.postLoadHdr(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing owner.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOwnerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        StorerDTO body = null;
        StorerDTO response = api.postOwner(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing pack.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPackTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        PackDTO body = null;
        PackDTO response = api.postPack(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing po.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPoTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        PoDTO body = null;
        PoDTO response = api.postPo(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing po line.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPoLineTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String pokey = null;
        PoDetailDTO body = null;
        PoDetailDTO response = api.postPoLine(warehouse, tenant, username, password, pokey, body);

        // TODO: test validations
    }
    
    /**
     * Update shipping information on a shipped order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPostShipmentInfoTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        OrderDTO body = null;
        OrderDTO response = api.postPostShipmentInfo(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing putaway strategy.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPutawayStrategyTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        PutawayStrategyDTO body = null;
        PutawayStrategyDTO response = api.postPutawayStrategy(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing putaway strategy detail line
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPutawayStrategyDetailTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String putawaystrategykey = null;
        PutawayStrategyDetailDTO body = null;
        PutawayStrategyDetailDAO response = api.postPutawayStrategyDetail(warehouse, tenant, username, password, putawaystrategykey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing receipt.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postReceiptTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        ReceiptDTO body = null;
        ReceiptDTO response = api.postReceipt(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing order line.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postReceiptLineASNTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        ReceiptDetailDTO body = null;
        ReceiptDetailDTO response = api.postReceiptLineASN(warehouse, tenant, username, password, receiptkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        SectionDTO body = null;
        SectionDTO response = api.postSection(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or update a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSecurityUserTest() {
        String warehouse = null;
        SecurityUserDTO body = null;
        SecurityUserDTO response = api.postSecurityUser(warehouse, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShipmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        OrderDTO body = null;
        OrderDTO response = api.postShipment(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Update delivery information on a shipped order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShipmentDeliveryTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        OrderDTO body = null;
        OrderDTO response = api.postShipmentDelivery(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing order line.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShipmentLineTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        OrderDetailDTO body = null;
        OrderDetailDTO response = api.postShipmentLine(warehouse, tenant, username, password, orderkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing sxuxloc.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSkuxlocTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        SkuxLocDTO body = null;
        SkuxLocDTO response = api.postSkuxloc(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Update the status of a record.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStatusTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        String status = null;
        String transmitflagtouse = null;
        TransmitlogDTO response = api.postStatus(warehouse, tenant, username, password, serialkey, status, transmitflagtouse);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing storer.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStorerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        StorerDTO body = null;
        StorerDTO response = api.postStorer(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or update an existing storers.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStorerbatchTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        BatchStorerDTO body = null;
        BatchStorerDTO response = api.postStorerbatch(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing substitutesku.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubstituteSkuTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        SubstituteSkuDTO body = null;
        SubstituteSkuDTO response = api.postSubstituteSku(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing supplier.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSupplierTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        StorerDTO body = null;
        StorerDTO response = api.postSupplier(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing zone standard.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postZoneStdsTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        ZoneStdsDTO body = null;
        ZoneStdsDTO response = api.postZoneStds(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or update an existing items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postitembatchTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        BatchSKUDTO body = null;
        BatchSKUDTO response = api.postitembatch(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing adjustment.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putAdjustmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String adjustmentkey = null;
        AdjustmentDTO body = null;
        AdjustmentDTO response = api.putAdjustment(warehouse, tenant, username, password, adjustmentkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing adjustment.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putAdjustmentLineTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String adjustmentkey = null;
        String adjustmentlinenumber = null;
        AdjustmentDetailDTO body = null;
        AdjustmentDetailDTO response = api.putAdjustmentLine(warehouse, tenant, username, password, adjustmentkey, adjustmentlinenumber, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing carrier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putCarrierTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO body = null;
        StorerDTO response = api.putCarrier(warehouse, tenant, username, password, storerkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing code list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putCodeListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String listname = null;
        CodeListDTO body = null;
        CodeListDTO response = api.putCodeList(warehouse, tenant, username, password, listname, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putCustomerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO body = null;
        StorerDTO response = api.putCustomer(warehouse, tenant, username, password, storerkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing item.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putItemTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String item = null;
        String owner = null;
        SkuDTO body = null;
        SkuDTO response = api.putItem(warehouse, tenant, username, password, item, owner, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing loadhdr.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLoadHdrTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String loadid = null;
        LoadHdrDTO body = null;
        LoadHdrDTO response = api.putLoadHdr(warehouse, tenant, username, password, loadid, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing owner
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putOwnerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO body = null;
        StorerDTO response = api.putOwner(warehouse, tenant, username, password, storerkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing pack.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPackTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String pack = null;
        PackDTO body = null;
        PackDTO response = api.putPack(warehouse, tenant, username, password, pack, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing po.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPoTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String pokey = null;
        PoDTO body = null;
        PoDTO response = api.putPo(warehouse, tenant, username, password, pokey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing po.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPoLineTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String pokey = null;
        String polinenumber = null;
        PoDetailDTO body = null;
        PoDetailDTO response = api.putPoLine(warehouse, tenant, username, password, pokey, polinenumber, body);

        // TODO: test validations
    }
    
    /**
     * Update an existing receipt.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putReceiptTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        ReceiptDTO body = null;
        ReceiptDTO response = api.putReceipt(warehouse, tenant, username, password, receiptkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing storer (type defaulted to 1)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putStorerTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO body = null;
        StorerDTO response = api.putStorer(warehouse, tenant, username, password, storerkey, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing storer.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putStorerByKeyAndTypeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        String type = null;
        StorerDTO body = null;
        StorerDTO response = api.putStorerByKeyAndType(warehouse, tenant, username, password, storerkey, type, body);

        // TODO: test validations
    }
    
    /**
     * Create or replace an existing supplier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSupplierTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String storerkey = null;
        StorerDTO body = null;
        StorerDTO response = api.putSupplier(warehouse, tenant, username, password, storerkey, body);

        // TODO: test validations
    }
    
    /**
     * Execute Receipt Reversal on a single receipt by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void receiptReversalTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        ReceiptDTO body = null;
        ReceiptDTO response = api.receiptReversal(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Execute Receipt All on a single receipt by key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void receiveAllTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptkey = null;
        ReceiptDTO response = api.receiveAll(warehouse, tenant, username, password, receiptkey);

        // TODO: test validations
    }
    
    /**
     * Get the receive delivery details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void receiveDeliveryListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        Integer recordcount = null;
        ReceiveDeliveryBODListDTO response = api.receiveDeliveryList(warehouse, tenant, username, password, serialkey, recordcount);

        // TODO: test validations
    }
    
    /**
     * release a lot on hold
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseHoldTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        LotDTO body = null;
        String reasoncode = null;
        api.releaseHold(warehouse, tenant, username, password, body, reasoncode);

        // TODO: test validations
    }
    
    /**
     * Release an existing order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseShipmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        OrderDTO response = api.releaseShipment(warehouse, tenant, username, password, orderkey);

        // TODO: test validations
    }
    
    /**
     * Receive by case ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rfIDReceiveByCaseIDTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        LPNDetailDTO body = null;
        List<Object> response = api.rfIDReceiveByCaseID(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Receive by pallet ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rfIDReceiveByPalletIDTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        LPNDetailDTO body = null;
        List<Object> response = api.rfIDReceiveByPalletID(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * Receive by case or pallet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rfidReceivingTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        LPNDetailDTO body = null;
        String objecttype = null;
        List<Object> response = api.rfidReceiving(warehouse, tenant, username, password, body, objecttype);

        // TODO: test validations
    }
    
    /**
     * Ship an existing order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shipShipmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        OrderDTO response = api.shipShipment(warehouse, tenant, username, password, orderkey);

        // TODO: test validations
    }
    
    /**
     * Update shipping information on a shipped order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shipShipmentComponentsTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        OrderDTO body = null;
        Boolean cycleCount = null;
        OrderDTO response = api.shipShipmentComponents(warehouse, tenant, username, password, body, cycleCount);

        // TODO: test validations
    }
    
    /**
     * Get the advance ship notice details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showAdvanceShipNoticeListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        Integer recordcount = null;
        AdvanceShipNoticeBODListDTO response = api.showAdvanceShipNoticeList(warehouse, tenant, username, password, serialkey, recordcount);

        // TODO: test validations
    }
    
    /**
     * Get inventory balance details with the division into holdtype and date manufacture
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showInvBalanceDetailListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer offset = null;
        Integer limit = null;
        Integer needbydate = null;
        StorerSKUListDTO body = null;
        InvBalanceDetailListDTO response = api.showInvBalanceDetailList(warehouse, tenant, username, password, offset, limit, needbydate, body);

        // TODO: test validations
    }
    
    /**
     * Get inventorybalance details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showInventoryBalanceListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        Integer recordcount = null;
        InventoryBalanceListDTO response = api.showInventoryBalanceList(warehouse, tenant, username, password, serialkey, recordcount);

        // TODO: test validations
    }
    
    /**
     * Inventory count
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showInventoryCountTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String item = null;
        String owner = null;
        InventoryCountHeaderDetailDTO response = api.showInventoryCount(warehouse, tenant, username, password, item, owner);

        // TODO: test validations
    }
    
    /**
     * Get the pick list details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showPickListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        Integer recordcount = null;
        PickListBODListDTO response = api.showPickList(warehouse, tenant, username, password, serialkey, recordcount);

        // TODO: test validations
    }
    
    /**
     * Get the shipment order details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showShipmentOrderListTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        Integer serialkey = null;
        Integer recordcount = null;
        ShipmentOrderBODListDTO response = api.showShipmentOrderList(warehouse, tenant, username, password, serialkey, recordcount);

        // TODO: test validations
    }
    
    /**
     * Add serial numbers to receipt
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storeSerialNumbersTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        ReceiptDetailDTO body = null;
        List<Object> response = api.storeSerialNumbers(warehouse, tenant, username, password, body);

        // TODO: test validations
    }
    
    /**
     * update lot with external lot
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void synchronizeTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String lot = null;
        String externallot = null;
        api.synchronize(warehouse, tenant, username, password, lot, externallot);

        // TODO: test validations
    }
    
    /**
     * Create tranfer for ASN+SKU
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferCreateTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String receiptKey = null;
        String type = null;
        String externTransferKey = null;
        TransferStorerSkuListDTO body = null;
        TransferDTO response = api.transferCreate(warehouse, tenant, username, password, receiptKey, type, externTransferKey, body);

        // TODO: test validations
    }
    
    /**
     * Unallocate an existing order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unallocateShipmentTest() {
        String warehouse = null;
        String tenant = null;
        String username = null;
        String password = null;
        String orderkey = null;
        OrderDTO response = api.unallocateShipment(warehouse, tenant, username, password, orderkey);

        // TODO: test validations
    }
    
}
