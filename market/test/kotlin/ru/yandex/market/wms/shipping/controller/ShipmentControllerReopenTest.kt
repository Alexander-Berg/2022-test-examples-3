package ru.yandex.market.wms.shipping.controller

import com.github.springtestdbunit.annotation.DatabaseSetup
import com.github.springtestdbunit.annotation.ExpectedDatabase
import com.github.springtestdbunit.assertion.DatabaseAssertionMode
import org.junit.jupiter.api.Test
import org.springframework.http.MediaType
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders
import org.springframework.test.web.servlet.result.MockMvcResultMatchers
import ru.yandex.market.wms.common.spring.IntegrationTest
import ru.yandex.market.wms.shipping.HttpAssert

class ShipmentControllerReopenTest : IntegrationTest() {

    private val httpAssert = HttpAssert { mockMvc }

    @Test
    @DatabaseSetup("/controller/shipping/shipments/reopen/happy_before.xml")
    @ExpectedDatabase(
        value = "/controller/shipping/shipments/reopen/happy_after.xml",
        assertionMode = DatabaseAssertionMode.NON_STRICT_UNORDERED
    )
    fun reopenShipment() {
        httpAssert.assertApiCall(
            MockMvcRequestBuilders.post("/reopen")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ \"shipmentId\" : 1 }")
        )
    }

    @Test
    @DatabaseSetup("/controller/shipping/shipments/reopen/wrong_status_before.xml")
    @ExpectedDatabase(
        value = "/controller/shipping/shipments/reopen/wrong_status_before.xml",
        assertionMode = DatabaseAssertionMode.NON_STRICT_UNORDERED
    )
    fun reopenShipment_wrongStatus() {
        httpAssert.assertApiCall(
            MockMvcRequestBuilders.post("/reopen")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ \"shipmentId\" : 1 }"),
            MockMvcResultMatchers.status().isUnprocessableEntity,
            responseFile = "controller/shipping/shipments/reopen/wrong_status_response.json"
        )
    }

    @Test
    @DatabaseSetup("/controller/shipping/shipments/reopen/withdrawal_happy_before.xml")
    @ExpectedDatabase(
        value = "/controller/shipping/shipments/reopen/withdrawal_happy_after.xml",
        assertionMode = DatabaseAssertionMode.NON_STRICT_UNORDERED
    )
    fun reopenShipmentWithdrawal() {
        httpAssert.assertApiCall(
            MockMvcRequestBuilders.post("/reopen")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ \"shipmentId\" : 1 }")
        )
    }

    @Test
    @DatabaseSetup("/controller/shipping/shipments/reopen/withdrawal_wrong_status_before.xml")
    @ExpectedDatabase(
        value = "/controller/shipping/shipments/reopen/withdrawal_wrong_status_before.xml",
        assertionMode = DatabaseAssertionMode.NON_STRICT_UNORDERED
    )
    fun reopenShipmentWithdrawal_wrongStatus() {
        httpAssert.assertApiCall(
            MockMvcRequestBuilders.post("/reopen")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ \"shipmentId\" : 1 }"),
            MockMvcResultMatchers.status().isUnprocessableEntity,
            responseFile = "controller/shipping/shipments/reopen/wrong_status_response.json"
        )
    }
}
