application.name=partner-marketing
partner-marketing.postgresql.driver=org.postgresql.Driver
partner-marketing.postgresql.max.pool.size=10

#database.name, username, password, hosts will be set through ya vault secrets
partner-marketing.postgresql.username=postgres
partner-marketing.postgresql.password=postgres

partner-marketing.postgresql.url=jdbc:postgresql://localhost:#{embeddedPostgres.getPort()}/postgres
partner-marketing.postgresql.properties=ssl=false&targetServerType=master&prepareThreshold=0

liquibase.changelog.unittest=classpath:/liquibase/changelog_test.xml
spring.liquibase=disabled
spring.jooq.sqlDialect=POSTGRES

application.separate-ping-and-monitoring=false

http.port=34682
http.maxThreads=10
http.threadPool.maxSize=100
http.threadPool.minThreads=10
http.maxIdleTime=5000

partner.marketing.memcached.server.list.global=partner-marketing-cache.tst.vs.market.yandex.net:11262
partner.marketing.memcached.server.list.local=partner-marketing-cache.tst.vs.market.yandex.net:11262

mbi.api.url=http://localhost:#{mbiMock.port()}

# Memcached
# expiry in seconds
memcached.default.expiry=7200
memcached.compress.enabled=true
memcached.compress.threshold=8192
memcached.default_encoding=UTF-8
memcached.max.conn.local=20
memcached.min.conn.local=20
memcached.max.conn.global=10
memcached.min.conn.global=4
# these properties are in milliseconds
memcached.socket.connect.to=10
# if read didn't reply in 50 ms then something is definitely wrong with
# the network
memcached.socket.to=50
memcached.max.idle=60000
# removing in 2 seconds potentially hung sockets because of the network
# problems (such a long timeout because it's better to finish delete transactions
memcached.max.busy=2000
memcached.alivecheck=true
memcached.failover=true
memcached.failback=false
memcached.max.failed.pings=2
memcached.min.successful.pings=2
memcached.ping.period=20

