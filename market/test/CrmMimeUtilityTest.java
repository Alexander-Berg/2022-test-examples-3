package ru.yandex.market.jmf.module.mail.test;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import ru.yandex.market.jmf.module.mail.impl.CrmMimeUtility;

public class CrmMimeUtilityTest {

    @Test
    public void testCyrillic() {
        String raw = "=?utf-8?B?0LfQsNC60LDQtw==?=";
        String decoded = CrmMimeUtility.unfoldAndDecode(raw);
        Assertions.assertEquals("заказ", decoded);
    }

    @Test
    public void testCut() {
        String raw = "=?utf-8?B?0LfQsNA=?=\r\n"
                + "=?utf-8?B?utCw0Lc=?=";
        String decoded = CrmMimeUtility.unfoldAndDecode(raw);
        Assertions.assertEquals("заказ", decoded);
    }

    @Test
    public void testInnerWords() {
        String raw = "=?utf-8?B?0LfQsNC60LDQtw==?=123";
        String decoded = CrmMimeUtility.unfoldAndDecode(raw);
        Assertions.assertEquals("заказ123", decoded);
    }

    /**
     * Below are some test cases from
     * <a href="https://android.googlesource.com/platform/packages/apps/Email/+/2517a3dfd15a4bdb01677fd1ed6a63645eaad3f7/tests/src/com/android/email/mail/internet/MimeUtilityTest.java">MimeUtilityTest.java</a>
     * <br/> <hr/>
     * Test that decode is working for simple strings
     */
    @Test
    public void testDecodeSimple() {
        // a string without any unicode
        String shortPlain = "abcd";
        Assertions.assertSame(shortPlain, CrmMimeUtility.unfoldAndDecode(shortPlain));

        // up arrow, down arrow, left arrow, right arrow
        String shortUnicode = "\u2191\u2193\u2190\u2192";
        String shortUnicodeEncoded = "=?UTF-8?B?4oaR4oaT4oaQ4oaS?=";
        Assertions.assertEquals(shortUnicode, CrmMimeUtility.unfoldAndDecode(shortUnicodeEncoded));
    }

    /**
     * test decoding complex string from google calendar that has two gotchas for the decoder.
     * also tests a couple of degenerate cases that should "fail" decoding and pass through.
     */
    @Test
    public void testComplexDecode() {
        /*
         * a string generated by google calendar that contains two interesting gotchas:
         * 1.  Uses windows-1252 encoding, and en-dash recoded appropriately (\u2013 / =96)
         * 2.  Because the first encoded char requires '=XX' encoding, we create an "internal"
         * "?=" that the decoder must correctly skip over.
         **/
        String calendarSubjectUnicode = "=?windows-1252?Q?=5BReminder=5D_test_=40_Fri_Mar_20_10=3A30am_=96_11am_"
                + "=28andro?="
                + "\r\n\t"
                + "=?windows-1252?Q?id=2Etr=40gmail=2Ecom=29?=";

        String result1 = CrmMimeUtility.unfoldAndDecode(calendarSubjectUnicode);
        String calendarSubjectPlain = "[Reminder] test @ Fri Mar 20 10:30am \u2013 11am (android.tr@gmail.com)";
        Assertions.assertEquals(calendarSubjectPlain, result1);

        // These degenerate cases should "fail" and return the same string
        // Some basic degenerate strings designed to exercise error handling in the decoder
        String calendarDegenerateUnicode1 = "=?windows-1252?Q=5B?=";
        String degenerate1 = CrmMimeUtility.unfoldAndDecode(calendarDegenerateUnicode1);
        Assertions.assertEquals(calendarDegenerateUnicode1, degenerate1, "degenerate case 1");

        String calendarDegenerateUnicode2 = "=?windows-1252Q?=5B?=";
        String degenerate2 = CrmMimeUtility.unfoldAndDecode(calendarDegenerateUnicode2);
        Assertions.assertEquals(calendarDegenerateUnicode2, degenerate2, "degenerate case 2");

        String calendarDegenerateUnicode3 = "=?windows-1252?=";
        String degenerate3 = CrmMimeUtility.unfoldAndDecode(calendarDegenerateUnicode3);
        Assertions.assertEquals(calendarDegenerateUnicode3, degenerate3, "degenerate case 3");

        String calendarDegenerateUnicode4 = "=?windows-1252";
        String degenerate4 = CrmMimeUtility.unfoldAndDecode(calendarDegenerateUnicode4);
        Assertions.assertEquals(calendarDegenerateUnicode4, degenerate4, "degenerate case 4");
    }

}
