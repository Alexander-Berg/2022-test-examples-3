import {
  AcceptanceStatus,
  BindingKind,
  ContentLabState,
  ContentLabTicketType,
  ContentProcessingStatus,
  MappingConfidence,
  MappingDestination,
  Offer,
  ProcessingStatus,
  SkutchType,
  SkuType,
  MappingStatus,
} from 'src/java/definitions';
import { testSupplierIdBase } from 'src/test/data/supplier';

const testOfferIdBase = 8869;

const dummyValuesOffer = {
  acceptanceStatus: AcceptanceStatus.NEW,
  uploadToYtDoneTs: 'uploadToYtDoneTs',
  uploadToYtRequestTs: 'uploadToYtRequestTs',
  uploadToYtStamp: 12,
  uploadedToYt: false,
  vendor: 'vendor',
  vendorCode: 'vendorCode',
  suggestSkuMapping: {
    mappingId: 1,
    timestamp: '133',
    skuType: SkuType.MARKET,
    instant: '2020-01-01',
  },
  suggestSkuMappingType: SkutchType.BARCODE_SKUTCH,
  suggestedSkuIdStr: 'suggestedSkuIdStr',
  supplierId: testSupplierIdBase,
  businessId: testSupplierIdBase,
  supplierSkuIdStr: 'supplierSkuIdStr',
  supplierSkuMapping: {
    mappingId: 1,
    timestamp: '133',
    skuType: SkuType.MARKET,
    instant: '2020-01-01',
  },
  supplierSkuMappingChangeReason: 'supplierSkuMappingChangeReason',
  supplierSkuMappingCheckLogin: 'supplierSkuMappingCheckLogin',
  supplierSkuMappingCheckTs: 'supplierSkuMappingCheckTs',
  supplierSkuMappingStatus: MappingStatus.ACCEPTED,
  throughContentLab: false,
  fullContentComment: 'fullContentComment',
  golden: true,
  lastVersion: 7,
  mappingDestination: MappingDestination.BLUE,
  marketModelName: 'marketModelName',
  marketVendorName: 'marketVendorName',
  new: true,
  processingStatus: ProcessingStatus.IN_MODERATION,
  processingStatusModified: 'processingStatusModified',
  contentProcessingStatus: ContentProcessingStatus.NONE,
  contentProcessingStatusModified: 'contentProcessingStatusModified',
  realization: true,
  reclassified: true,
  reprocessRequested: false,
  acceptanceStatusModified: 'acceptanceStatusModified',
  approvedSkuIdStr: 'approvedSkuIdStr',
  approvedSkuMapping: {
    mappingId: 1,
    timestamp: '133',
    skuType: SkuType.MARKET,
    instant: '2020-01-01',
  },
  deletedApprovedSkuMapping: {
    mappingId: 1,
    timestamp: '133',
    skuType: SkuType.MARKET,
    instant: '2020-01-01',
  },
  barCode: 'barCode 1',
  bindingKind: BindingKind.APPROVED,
  contentChangedTs: 'contentChangedTs',
  contentComment: 'contentComment',
  contentLabMessage: 'contentLabMessage',
  contentLabState: ContentLabState.CL_PLANNED,
  contentProcessingTaskId: 5,
  contentSkuId: 6,
  manualVendor: false,
  contentSkuMapping: {
    mappingId: 1,
    timestamp: '133',
    skuType: SkuType.MARKET,
    instant: '2020-01-01',
  },
  automaticClassification: false,
  additionalTickets: { WAIT_CONTENT: 'waitContentTicket' },
  commentsFromClab: [],
  contentLabTicketType: ContentLabTicketType.WAIT_CONTENT,
  supplierModelMappingId: 31,
};

let testOfferId = testOfferIdBase;

export const testOffer = (sample?: Partial<Offer>): Offer => ({
  ...dummyValuesOffer,
  '1pOffer': false,
  forceOldFashionWithoutHash: false,
  id: testOfferId++,
  acceptanceStatus: AcceptanceStatus.NEW,
  created: Date.now().toString(),
  shopCategoryName: 'Категория shopCategoryName',
  shopSku: 'shopSku',
  supplierId: testSupplierIdBase,
  businessId: testSupplierIdBase,
  title: 'title',
  updated: Date.now().toString(),
  dataCampOffer: sample?.dataCampOffer || false,
  approvedSkuMappingConfidence: MappingConfidence.CONTENT,
  serviceOffers: [],
  deletedApprovedSkuMappingConfidence: MappingConfidence.CONTENT,
  pskuHasContentMappings: sample?.pskuHasContentMappings || false,
  parallelImported: false,
  suggestSM: false,
  serviceOffersSuppliers: [],
  transientBaseOfferSupplierId: -1,
  uploadToErpDoneTs: '',
  uploadToMdmDoneTs: '',
  uploadedToErp: false,
  uploadedToMdm: false,
  offerDestination: MappingDestination.BLUE,
  offerDestinationInternal: MappingDestination.BLUE,
  resale: false,
  ...sample,
});
