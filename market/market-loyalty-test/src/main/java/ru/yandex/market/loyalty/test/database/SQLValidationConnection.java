package ru.yandex.market.loyalty.test.database;

import org.apache.commons.dbcp2.DelegatingConnection;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class SQLValidationConnection extends DelegatingConnection<Connection> {
    private SQLValidator validator;
    private final ResultSetAccounter resultSetAccounter;

    public SQLValidationConnection(Connection connection, SQLValidator validator, ResultSetAccounter resultSetAccounter) {
        super(connection);
        this.validator = validator;
        this.resultSetAccounter = resultSetAccounter;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new SQLValidationCallableStatement(getDelegate().prepareCall(sql, resultSetType, resultSetConcurrency), validator, resultSetAccounter);
    }

    @Override
    public CallableStatement prepareCall(
            String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability
    ) throws SQLException {
        return new SQLValidationCallableStatement(getDelegate().prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), validator, resultSetAccounter);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return new SQLValidationCallableStatement(getDelegate().prepareCall(sql), validator, resultSetAccounter);
    }

    @Override
    public PreparedStatement prepareStatement(
            String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability
    ) throws SQLException {
        validator.validate(sql);
        return new SQLValidationPreparedStatement<>(getDelegate().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), validator, resultSetAccounter);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        validator.validate(sql);
        return new SQLValidationPreparedStatement<>(getDelegate().prepareStatement(sql, autoGeneratedKeys), validator, resultSetAccounter);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        validator.validate(sql);
        return new SQLValidationPreparedStatement<>(getDelegate().prepareStatement(sql, columnIndexes), validator, resultSetAccounter);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        validator.validate(sql);
        return new SQLValidationPreparedStatement<>(getDelegate().prepareStatement(sql, columnNames), validator, resultSetAccounter);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        validator.validate(sql);
        return new SQLValidationPreparedStatement<>(getDelegate().prepareStatement(sql), validator, resultSetAccounter);
    }

    @Override
    public PreparedStatement prepareStatement(
            String sql, int resultSetType, int resultSetConcurrency
    ) throws SQLException {
        validator.validate(sql);
        return new SQLValidationPreparedStatement<>(getDelegate().prepareStatement(sql, resultSetType, resultSetConcurrency), validator, resultSetAccounter);
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new SQLValidationStatement<>(getDelegate().createStatement(), validator, resultSetAccounter);
    }
}
