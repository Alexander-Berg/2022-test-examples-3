{
  "owner": "checkout",
  "tableName": "carter2_testing",
  "splits": {
    "http_method": "http_method",
    "method": "method",
    "dc": "if(substring(host, 1, 3) in ('iva', 'man', 'vla', 'sas'), substring(host, 1, 3), if(endsWith(host, 'yp-c.yandex.net'), substring(host, position(host, '.') + 1, 3), if(dictGetString('dc', 'dc', sipHash64(host)) <> '', dictGetString('dc', 'dc', sipHash64(host)), 'undefined_dc')))",
    "host": "host"
  },
  "metrics": [
    //    RPS
    {
      "metricNameArray": [
        "market-carter.TESTING.rps",
        "market-carter.TESTING.dc.${dc}.rps",
        "market-carter.TESTING.host.${host}.rps"
      ],
      "period": "FIVE_MIN",
      "metricField": "count()/(5*60)",
      "filter": "method != 'carter_ping'",
      "type": "SIMPLE"
    },
    {
      "metricNameArray": [
        "market-carter.TESTING.resource.${method}.${http_method}.rps"
      ],
      "period": "FIVE_MIN",
      "metricField": "count()/(5*60)",
      "type": "SIMPLE"
    },
    // TIMINGS
    {
      "metricNameArray": [
        "market-carter.TESTING.timings",
        "market-carter.TESTING.dc.${dc}.timings",
        "market-carter.TESTING.host.${host}.timings"
      ],
      "period": "FIVE_MIN",
      "metricField": "resptime_ms",
      "filter": "method != 'carter_ping' and http_code < 400",
      "type": "QUANTILE_TIMING"
    },
    {
      "metricNameArray": [
        "market-carter.TESTING.resource.${method}.${http_method}.timings"
      ],
      "period": "FIVE_MIN",
      "metricField": "resptime_ms",
      "filter": "http_code < 400",
      "type": "QUANTILE_TIMING"
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_list.GET.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_list' and http_method = 'GET' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.cart_list_default_item.POST.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'cart_list_default_item' and http_method = 'POST' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.cart_list_default_item.DELETE.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'cart_list_default_item' and http_method = 'DELETE' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_list_default_item_by_id.DELETE.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_list_default_item_by_id' and http_method = 'DELETE' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_list_default_item_by_id.PUT.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_list_default_item_by_id' and http_method = 'PUT' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_item.POST.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_item' and http_method = 'POST' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uid_list.GET.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_uid_list' and http_method = 'GET' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uuid_list.GET.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_uuid_list' and http_method = 'GET' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uuid_list.PATCH.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_uuid_list' and http_method = 'PATCH' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uuid_list_item.POST.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_uuid_list_item' and http_method = 'POST' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uid_list_item.POST.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_uid_list_item' and http_method = 'POST' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uid_list_item_by_id.DELETE.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_uid_list_item_by_id' and http_method = 'DELETE' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_list_default_item.POST.timings.0_99",
      "period": "FIVE_MIN",
      "metricField": "quantileTimingIf(0.99)(resptime_ms, method = 'carter_list_default_item' and http_method = 'POST' and http_code < 400)",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    // 5xx-PERCENT
    {
      "metricNameArray": [
        "market-carter.TESTING.5xx-percent",
        "market-carter.TESTING.dc.${dc}.5xx-percent",
        "market-carter.TESTING.host.${host}.5xx-percent"
      ],
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method != 'carter_ping'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricNameArray": [
        "market-carter.TESTING.resource.${method}.${http_method}.5xx-percent"
      ],
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method != 'carter_ping'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_list.GET.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_list' and http_method = 'GET'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_list_default_item.POST.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_list_default_item' and http_method = 'POST'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_list_default_item.DELETE.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_list_default_item' and http_method = 'DELETE'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_list_default_item_by_id.PUT.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_list_default_item_by_id' and http_method = 'PUT'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_item.POST.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_item' and http_method = 'POST'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.cart_UID_X_list.GET.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = '/cart/UID/*/list' and http_method = 'GET'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uuid_list.GET.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_uuid_list' and http_method = 'GET'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uuid_list.PATCH.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_uuid_list' and http_method = 'PATCH'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uuid_list_item.POST.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_uuid_list_item' and http_method = 'POST'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uid_list_item.POST.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_uid_list_item' and http_method = 'POST'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uid_list_item_by_id.DELETE.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_uid_list_item_by_id' and http_method = 'DELETE'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricName": "market-carter.TESTING.resource.carter_uuid_list_item_by_id.DELETE.5xx-percent",
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >=500 and http_code < 600) / count() * 100",
      "filter": "method = 'carter_uuid_list_item_by_id' and http_method = 'DELETE'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    // ERRORS-PERCENT
    {
      "metricNameArray": [
        "market-carter.TESTING.errors-percent",
        "market-carter.TESTING.dc.${dc}.errors-percent",
        "market-carter.TESTING.host.${host}.errors-percent"
      ],
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >= 300) / count() * 100",
      "filter": "method != 'carter_ping'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricNameArray": [
        "market-carter.TESTING.resource.${method}.${http_method}.errors-percent"
      ],
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code >= 300) / count() * 100",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    // by code 420
    {
      "metricNameArray": [
        "market-carter.TESTING.by-code.420",
        "market-carter.TESTING.dc.${dc}.by-code.420",
        "market-carter.TESTING.host.${host}.by-code.420"
      ],
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code = 420)",
      "filter": "method != 'carter_ping'",
      "type": "SIMPLE",
      "valueOnNan": 0
    },
    {
      "metricNameArray": [
        "market-carter.TESTING.resource.${method}.${http_method}.by-code.420"
      ],
      "period": "FIVE_MIN",
      "metricField": "countIf(http_code = 420)",
      "type": "SIMPLE",
      "valueOnNan": 0
    }
  ]
}
