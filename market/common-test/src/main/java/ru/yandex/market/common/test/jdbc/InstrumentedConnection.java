package ru.yandex.market.common.test.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import ru.yandex.market.common.test.transformer.StringTransformer;

/**
 * Проксирующий {@link Connection}, используемый в юнит-тестах, чтобы модифицировать sql-запросы перед отправкой их в
 * СУБД. Запросы необходимо модифицировать, чтобы делать оракл-запросы совместимымм с h2/hsql
 *
 * @author zoom
 */
public class InstrumentedConnection extends ConnectionDelegate {

    private final StringTransformer stringTransformer;

    public InstrumentedConnection(Connection delegate, StringTransformer stringTransformer) {
        super(delegate);
        this.stringTransformer = stringTransformer;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new InstrumentedStatement(getDelegate().createStatement(), stringTransformer);
    }

    @Override
    public Statement createStatement(int resultSetType,
                                     int resultSetConcurrency) throws SQLException {
        return new InstrumentedStatement(getDelegate().createStatement(resultSetType, resultSetConcurrency),
                stringTransformer);
    }

    @Override
    public Statement createStatement(int resultSetType,
                                     int resultSetConcurrency,
                                     int resultSetHoldability) throws SQLException {
        Statement statement = getDelegate().createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
        return new InstrumentedStatement(statement, stringTransformer);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new InstrumentedPreparedStatement(getDelegate().prepareStatement(stringTransformer.transform(sql)));
    }

    @Override
    public PreparedStatement prepareStatement(String sql,
                                              int resultSetType,
                                              int resultSetConcurrency) throws SQLException {
        return new InstrumentedPreparedStatement(getDelegate().prepareStatement(stringTransformer.transform(sql),
                resultSetType, resultSetConcurrency));
    }

    @Override
    public PreparedStatement prepareStatement(String sql,
                                              int resultSetType,
                                              int resultSetConcurrency,
                                              int resultSetHoldability) throws SQLException {
        return new InstrumentedPreparedStatement(getDelegate().prepareStatement(stringTransformer.transform(sql),
                resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public PreparedStatement prepareStatement(String sql,
                                              int autoGeneratedKeys) throws SQLException {
        return new InstrumentedPreparedStatement(getDelegate().prepareStatement(stringTransformer.transform(sql),
                autoGeneratedKeys));
    }

    @Override
    public PreparedStatement prepareStatement(String sql,
                                              int[] columnIndexes) throws SQLException {
        return new InstrumentedPreparedStatement(getDelegate().prepareStatement(stringTransformer.transform(sql),
                columnIndexes));
    }

    @Override
    public PreparedStatement prepareStatement(String sql,
                                              String[] columnNames) throws SQLException {
        return new InstrumentedPreparedStatement(getDelegate().prepareStatement(stringTransformer.transform(sql),
                columnNames));
    }
}
