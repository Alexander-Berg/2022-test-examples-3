package ru.yandex.market.mbo.db.modelstorage.http.generated;

import org.junit.Assert;
import ru.yandex.market.mbo.core.modelstorage.util.ModelProtoConverter;
import ru.yandex.market.mbo.db.modelstorage.http.ModelCardApiServiceImpl;
import ru.yandex.market.mbo.db.modelstorage.http.utils.ProtobufHelper;
import ru.yandex.market.mbo.gwt.models.modelstorage.CommonModel;
import ru.yandex.market.mbo.gwt.models.modelstorage.ParameterValue;
import ru.yandex.market.mbo.gwt.utils.WordUtil;
import ru.yandex.market.mbo.http.ModelCardApi;
import ru.yandex.market.mbo.http.ModelStorage;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * @author s-ermakov
 */
@SuppressWarnings({"checkstyle:magicNumber", "checkstyle:lineLenght"})
class SaveGeneratedModelsTask implements Callable<Void> {

    private static final String TEST_SESSION_ID = "20000101_0000";
    private static final int TEST_MODELS_COUNT = 10;

    private ModelCardApiServiceImpl modelCardApiService;
    private GenerateModelFunction generateModelFunction;
    private Function<Long, List<CommonModel>> loadGenerationModelsFunction;

    private final long categoryId;
    private final long vendorId;

    private int totalCreated;
    private int totalChanged;
    private int totalRemoved;

    SaveGeneratedModelsTask(long categoryId, long vendorId) {
        this.categoryId = categoryId;
        this.vendorId = vendorId;
    }

    public void setModelCardApiService(ModelCardApiServiceImpl modelCardApiService) {
        this.modelCardApiService = modelCardApiService;
    }

    public void setGenerateModelFunction(GenerateModelFunction generateModelFunction) {
        this.generateModelFunction = generateModelFunction;
    }

    public void setLoadGenerationModelsFunction(Function<Long, List<CommonModel>> loadGenerationModelsFunction) {
        this.loadGenerationModelsFunction = loadGenerationModelsFunction;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public int getTotalCreated() {
        return totalCreated;
    }

    public int getTotalChanged() {
        return totalChanged;
    }

    public int getTotalRemoved() {
        return totalRemoved;
    }

    public int getCurrentlyExistingModels() {
        return totalCreated - totalRemoved;
    }

    @Override
    public Void call() throws Exception {
        saveAutoGeneratedModels();
        complexModelsUpdate();
        return null;
    }

    private void saveAutoGeneratedModels() {
        // Создаем пачку новых моделек
        List<ModelStorage.Model> models = IntStream.range(0, TEST_MODELS_COUNT)
            .mapToObj(i -> generateModel("Autogenerated_1." + i, categoryId, vendorId))
            .collect(Collectors.toList());

        GeneratedCardsHistory cardsHistory = new GeneratedCardsHistory();
        cardsHistory.setExpectedStatus(models, ModelStorage.OperationType.CREATE, ModelStorage.OperationStatusType.OK);
        totalCreated += models.size();

        // сохраняем их и валидируем ответ
        ModelCardApi.SaveAutoGeneratedModelsRequest saveRequest = createSaveModelsRequest(models);
        ModelStorage.OperationResponse saveResponse = modelCardApiService.saveAutoGeneratedModels(saveRequest);

        // Записываем статусы выполнения операций и актуальные модели в историю
        cardsHistory.writeOperationStatuses(saveResponse.getStatusesList());
        cardsHistory.writeActualModels(loadTestGeneratedModels(categoryId));

        // валидируем результат
        cardsHistory.printResults();
        cardsHistory.assertResults();
    }

    private void complexModelsUpdate() {
        List<ModelStorage.Model> modelsToRemove = new ArrayList<>();
        List<ModelStorage.Model> invalidModels = new ArrayList<>();
        List<ModelStorage.Model> modelsToUpdate = new ArrayList<>();
        List<ModelStorage.Model> modelsToSave = new ArrayList<>();

        List<ModelStorage.Model> savedModels = loadTestGeneratedModels(categoryId);
        Assert.assertEquals(TEST_MODELS_COUNT, savedModels.size());
        for (int idx = 0; idx < savedModels.size(); idx++) {
            ModelStorage.Model model = savedModels.get(idx);

            // Каждую третью удалим перед сохранением итогового батча
            if (idx % 3 == 0) {
                modelsToRemove.add(model);
            } else if (idx % 2 == 0) {
                // В каждой второй поставим меньший modified_ts
                invalidModels.add(changeModifiredTs(model, model.getModifiedTs() - TimeUnit.HOURS.toMillis(1)));
            } else {
                // В оставшейся просто поменяем поле
                modelsToUpdate.add(updateCommentValue(model, "Updated_" + idx));
            }

            modelsToSave.add(generateModel("Autogenerated_2." + idx, categoryId, vendorId));
        }
        totalRemoved += modelsToRemove.size();
        totalCreated += modelsToSave.size();
        totalChanged += modelsToUpdate.size();

        GeneratedCardsHistory cardsHistory = new GeneratedCardsHistory();
        cardsHistory.setExpectedStatus(modelsToRemove, ModelStorage.OperationType.CHANGE,
            ModelStorage.OperationStatusType.MODEL_MODIFIED);
        cardsHistory.setDeletedModels(modelsToRemove);
        cardsHistory.setExpectedStatus(invalidModels, ModelStorage.OperationType.CHANGE,
            ModelStorage.OperationStatusType.MODEL_MODIFIED);
        cardsHistory.setExpectedStatus(modelsToUpdate, ModelStorage.OperationType.CHANGE,
            ModelStorage.OperationStatusType.OK);
        cardsHistory.setExpectedStatus(modelsToSave, ModelStorage.OperationType.CREATE,
            ModelStorage.OperationStatusType.OK);

        // удалим часть моделей
        ModelCardApi.RemoveAutoGeneratedModelsRequest removeModelsRequest = createRemoveModelsRequest(modelsToRemove);
        modelCardApiService.removeAutoGeneratedModels(removeModelsRequest);

        // сохраняем все модели
        List<ModelStorage.Model> allModels = new ArrayList<>();
        allModels.addAll(modelsToRemove);
        allModels.addAll(invalidModels);
        allModels.addAll(modelsToUpdate);
        allModels.addAll(modelsToSave);

        ModelCardApi.SaveAutoGeneratedModelsRequest saveRequest = createSaveModelsRequest(allModels);
        ModelStorage.OperationResponse saveResponse = modelCardApiService.saveAutoGeneratedModels(saveRequest);
        cardsHistory.writeOperationStatuses(saveResponse.getStatusesList());
        cardsHistory.writeActualModels(loadTestGeneratedModels(categoryId));
        cardsHistory.printResults();
        cardsHistory.assertResults();
    }

    private ModelCardApi.SaveAutoGeneratedModelsRequest createSaveModelsRequest(List<ModelStorage.Model> models) {
        ModelCardApi.SaveAutoGeneratedModelsRequest.Builder request =
            ModelCardApi.SaveAutoGeneratedModelsRequest.newBuilder();
        request.setSessionId(TEST_SESSION_ID);
        request.setCategoryId((int) categoryId);
        request.addAllModels(models);
        return request.build();
    }

    private ModelCardApi.RemoveAutoGeneratedModelsRequest createRemoveModelsRequest(List<ModelStorage.Model> models) {
        ModelCardApi.RemoveAutoGeneratedModelsRequest.Builder request =
            ModelCardApi.RemoveAutoGeneratedModelsRequest.newBuilder();
        request.setSessionId(TEST_SESSION_ID);
        request.setCategoryId((int) categoryId);
        request.addAllModels(models);
        return request.build();
    }

    private ModelStorage.Model updateCommentValue(ModelStorage.Model model, String comment) {
        CommonModel commonModel = ModelProtoConverter.convert(model);
        ParameterValue operatorCommentValue =
            commonModel.getSingleParameterValue(ProtobufHelper.OPERATOR_COMMENT_PARAM_ID);
        operatorCommentValue.setStringValue(WordUtil.defaultWords(comment));

        return ModelProtoConverter.convert(commonModel);
    }

    private ModelStorage.Model changeModifiredTs(ModelStorage.Model model, long timestamp) {
        return model.toBuilder()
            .setModifiedTs(timestamp)
            .build();
    }

    private List<ModelStorage.Model> loadTestGeneratedModels(long categoryId) {
        List<CommonModel> models = loadGenerationModelsFunction.apply(categoryId);
        return ModelProtoConverter.convertAll(models);
    }

    private ModelStorage.Model generateModel(String modelSuffix, long categoryId, long vendorId) {
        CommonModel commonModel = generateModelFunction.generateModel(modelSuffix, categoryId, vendorId);
        return ModelProtoConverter.convert(commonModel);
    }

    public interface GenerateModelFunction {
        CommonModel generateModel(String modelSuffix, long categoryId, long vendorId);
    }
}
