package ru.yandex.market.mboc.common;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

import javax.annotation.Nonnull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.MutablePropertySources;
import org.springframework.core.io.AbstractResource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.support.ResourcePropertySource;

import ru.yandex.market.application.properties.etcd.EtcdClient;
import ru.yandex.market.application.properties.etcd.resources.RemoteEtcdResource;
import ru.yandex.market.mboc.common.config.properties.PropertyScannerFactory;

/**
 * @author yuramalinov
 * @created 27.09.18
 */
public class IntegrationTestSourcesInitializer
    implements ApplicationContextInitializer<ConfigurableApplicationContext> {
    private static final Logger log = LoggerFactory.getLogger(IntegrationTestSourcesInitializer.class);
    private static final String ETCD_DATASOURCES =
        "/datasources/development/yandex/market-datasources/datasources.properties";

    @Override
    public void initialize(@Nonnull ConfigurableApplicationContext applicationContext) {
        EtcdClient etcdClient = PropertyScannerFactory.etcdClient();
        MutablePropertySources propertySources = applicationContext.getEnvironment().getPropertySources();
        RemoteEtcdResource remoteEtcdResource = new RemoteEtcdResource(ETCD_DATASOURCES, etcdClient);
        remoteEtcdResource.getProperties();
        List<AbstractResource> resources = new ArrayList<>(Arrays.asList(
            remoteEtcdResource,
            new ClassPathResource("/integration-test.properties"),
            new ClassPathResource("/51-integration-test-autogenerated.local.properties"),
            new ClassPathResource("/integration-test.local.properties") // Для локальных запусков из идеи
        ));

        String extraProperties = applicationContext.getEnvironment().getProperty("extra-properties");
        if (extraProperties != null) {
            Stream.of(extraProperties.split(";")).forEach(path -> {
                ClassPathResource resource = new ClassPathResource(path);
                resources.add(resource);
            });
        }

        resources.forEach(resource -> {
            try {
                if (resource.exists()) {
                    propertySources.addFirst(new ResourcePropertySource(resource));
                } else {
                    log.warn("Skipping {} as it doesn't exists", resource);
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
    }
}
