package ru.yandex.market.crm.operatorwindow.toloka;

import java.util.Map;

import javax.inject.Inject;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.transaction.annotation.Transactional;

import ru.yandex.market.jmf.module.toloka.AssessmentRule;
import ru.yandex.market.jmf.module.toloka.Ticket;
import ru.yandex.market.jmf.module.toloka.TolokaExchanger;
import ru.yandex.market.jmf.module.toloka.model.TolokaCreateTaskResponse;
import ru.yandex.market.jmf.module.toloka.model.TolokaTask;
import ru.yandex.market.jmf.timings.test.impl.TimerTestUtils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.ASSESSMENT_TICKET_FQN;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.CREATED_POOL_ID;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.EMPTY_TASKS_LIST;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.POOL_CLONE_OPERATION_ID;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.POOL_CLONE_PENDING_OPERATION;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.POOL_CLONE_SUCCESS_OPERATION;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.POOL_OPEN_OPERATION_ID;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.POOL_OPEN_PENDING_OPERATION;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.POOL_OPEN_SUCCESS_OPERATION;
import static ru.yandex.market.crm.operatorwindow.toloka.TolokaTestConstants.REFERENCE_POOL_ID;
import static ru.yandex.market.jmf.module.toloka.Service.ASSESSMENT_RULE;

/**
 * При назначении обращению статуса {@link Ticket#STATUS_ASSESSMENT_REQUIRED assessmentRequired} в процессе
 * его регистрации/создания и статуса {@link Ticket#STATUS_ASSESSMENT assessment} в процессе публикации в
 * Толоку, для него взводится таймер {@link Ticket#REOPEN_TIME переоткрытия} согласно настройкам
 * {@link AssessmentRule правила} ассессмента {@link AssessmentRule#PENDING_TIME pendingTime} и
 * {@link AssessmentRule#PENDING_TIME assessmentTime} соответственно<p/>
 * <p>
 * По факту срабатывания таймера статус должен смениться на {@link Ticket#STATUS_REOPENED reopened}
 * <p>
 * https://testpalm.yandex-team.ru/testcase/ocrm-1325<br/>
 * https://testpalm.yandex-team.ru/testcase/ocrm-1324<br/>
 */
public class TolokaTicketReopenTest extends TolokaAbstractTest {

    @Inject
    private TimerTestUtils timerTestUtils;
    @Inject
    private TolokaExchanger tolokaExchanger;

    @BeforeEach
    public void setUp() {
        when(tolokaClient.clonePool(REFERENCE_POOL_ID)).thenReturn(POOL_CLONE_PENDING_OPERATION);
        when(tolokaClient.getOperation(POOL_CLONE_OPERATION_ID)).thenReturn(POOL_CLONE_SUCCESS_OPERATION);
        when(tolokaClient.getTasks(eq(CREATED_POOL_ID), anyInt())).thenReturn(EMPTY_TASKS_LIST);
        when(tolokaClient.createTasks(anyList()))
                .thenReturn(new TolokaCreateTaskResponse(Map.of(0, new TolokaTask("t1", CREATED_POOL_ID, Map.of()))));
        when(tolokaClient.openPool(CREATED_POOL_ID)).thenReturn(POOL_OPEN_PENDING_OPERATION);
        when(tolokaClient.getOperation(POOL_OPEN_OPERATION_ID)).thenReturn(POOL_OPEN_SUCCESS_OPERATION);
    }

    @Transactional
    @ParameterizedTest(name = "Imitate publication = {0}")
    @ValueSource(booleans = {true, false})
    public void assessmentTicketReopenedTest(boolean imitatePublication) {
        triggerService.withSyncTriggersMode(() -> {
            setTolokaExchangeEnabled(true);

            var rule = createAssessmentRule();
            bcpService.edit(rule, AssessmentRule.POOL_ID, REFERENCE_POOL_ID);

            var service = createService();
            bcpService.edit(service, ASSESSMENT_RULE, rule);

            var ticket = ticketTestUtils.createTicket(ASSESSMENT_TICKET_FQN, Map.of(Ticket.SERVICE, service));
            assertEquals(Ticket.STATUS_ASSESSMENT_REQUIRED, ticket.getStatus());
            assertEquals(rule.getAssessmentTime(), ticket.getReopenTime());

            if (imitatePublication) { // для перевода тикетов в статус assessment
                tolokaExchanger.publishTasks(rule);

                assertEquals(Ticket.STATUS_ASSESSMENT, ticket.getStatus());
                assertEquals(rule.getAssessmentTime(), ticket.getReopenTime());
            }

            timerTestUtils.simulateTimerExpiration(ticket.getGid(), "reopenTimer");
            assertEquals(Ticket.STATUS_REOPENED, ticket.getStatus());
        });
    }
}
