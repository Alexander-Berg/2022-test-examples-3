# coding: utf-8

from hamcrest import assert_that, has_entries, equal_to, has_items, is_not, all_of
import pytest
import time
import uuid
import yt.wrapper as yt

from market.idx.datacamp.routines.yatf.resources.config_mock import RoutinesConfigMock
from market.idx.datacamp.yatf.utils import create_meta, dict2tskv, create_update_meta, create_ts
from market.idx.datacamp.yatf.matchers.matchers import HasStatus
from market.idx.datacamp.proto.api.DatacampMessage_pb2 import DatacampMessage
from market.idx.datacamp.proto.business.Business_pb2 import BusinessStatus
import market.idx.datacamp.proto.common.RemoveStrategy_pb2 as remove_strategy
import market.idx.datacamp.proto.tables.Partner_pb2 as Partner
from market.idx.yatf.matchers.lb_matchers import HasNoUnreadData
from market.idx.yatf.matchers.protobuf_matchers import IsSerializedProtobuf, IsProtobufMap
from market.idx.yatf.matchers.yt_rows_matchers import HasDatacampYtUnitedOffersRows, HasDatacampBusinessStatusYtRows
from market.idx.yatf.resources.lbk_topic import LbkTopic
from market.idx.yatf.resources.yt_table_resource import YtTableResource
from market.idx.yatf.resources.datacamp.datacamp_tables import (
    DataCampBusinessStatusTable,
    DataCampPartnersTable,
    DataCampBasicOffersTable,
    DataCampServiceOffersTable,
    DataCampBasicSearchOffersTable,
    DataCampServiceSearchOffersTable,
    DataCampActualServiceSearchOffersTable
)
from market.idx.datacamp.routines.yatf.test_env import DatacampCleanerEnv, HttpRoutinesTestEnv
import market.idx.datacamp.proto.offer.DataCampOffer_pb2 as DTC


NOW = int(time.time())
TS_FRESH = NOW - 60 * 5
TS_NOT_FRESH = NOW - 10 * 24 * 60 * 60 - 1
# Офферы, мигрировавшие в другой бизнес
TS_FOR_MIGRATED = NOW - 10
# Базовые офферы, созданные более суток назад, и оставшиеся без сервисных частей
TS_BASIC_WITHOUT_SERVICE = NOW - 7 * 24 * 60 * 60 - 1
# Сервисные офферы, созданные более суток назад, и оставшиеся без базовой части
TS_SERVICE_WITHOUT_BASIC = NOW - 24 * 60 * 60 - 1
# Офферы, помеченные как удаленные более часа назад
TS_FOR_REMOVED = NOW - 1 * 60 * 60 - 1
# Офферы, у которых указан не тот склад, удаляем через 3 дня
TS_WRONG_WAREHOUSE = NOW - 3 * 24 * 60 * 60 - 1
# В тестинге скрытые офферы из определенных магазинов удаляем через трое суток.
TS_DISABLED = NOW - 3 * 24 * 60 * 60 - 1
# Удаляем скрытые офферы директа через неделю
TS_DISABLED_DIRECT = NOW - 7 * 24 * 60 * 60 - 1
# Удаляем офферы директа со отключенным магазином через день
TS_DISABLED_SHOP_DIRECT = NOW - 24 * 60 * 60 - 1
# удаляем чисто-ТВ офферы, на которых vertical_approved = false более 3-х дней
TS_VERTICAL_APPROVED_FRESH = NOW - 24 * 60 * 60
TS_VERTICAL_APPROVED_NOT_FRESH = NOW - 3 * 24 * 60 * 60 - 1
# время до и после TTL на определение некоректной мигрции
TS_OUTSIDE_INVALID_MIGRATION_TTL = NOW - 24 * 60 * 60 - 1
TS_UNDER_INVALID_MIGRATION_TTL = NOW - 23 * 60 * 60
# офферы без базового контента удаляем через день
TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT = NOW - 1 * 24 * 60 * 60 - 1

SELF_TVM_ID = 100500
GOOD_SERVICE_TVM_ID = 200500
BAD_SERVICE_TVM_ID = 300500
# generated by `ya tool tvmknife unittest service -s 200500 -d 100500`
GOOD_TVM_TICKET = '3:serv:CBAQ__________9_IggItJ4MEJSRBg:WyM18H3jis-OOQsE4CMc3gHHOQd1rI9NsBNIvQthqJwy1XAQjK6SJqpu-lkL_47j_lIMqUWBgYOeyHVCqYoFvw0Mc0JJ_9WhWqGVHkce1c9Yxqev8eyMRCc4_wwS5Kc9A7kzI5NrJ2TFUmSaemH3w8HsgEQSzUUrzETRrgrOcJE'  # noqa
# generated by `ya tool tvmknife unittest service -s 300500 -d 100500`
BAD_TVM_TICKET = '3:serv:CBAQ__________9_IggI1KsSEJSRBg:DMDtlD91lqEBxdldILQDjhoEyBjWDL1i35WWXHxlmHHlniNWQFI7exJctC_Lk3ucGGPypd1NsbLNGw1W0GtsutyaF7rwRyCF6LMbpnT6tG0lQAe4YSxyqtCeeGOwhdFX6MFqaiVcfeWCYmAN4SyKmnPbE6Ay7i1aVjMbEWKrOTc'  # noqa

BUSINESS_STATUS_IN_TTL = 1000
BUSINESS_STATUS_OVER_TTL = 2000
BUSINESS_STATUS_LOCKED = 3000

PARTNERS = [
    {
        'shop_id': 1,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 1, 'business_id': 1, 'warehouse_id': 145}),
            dict2tskv({'shop_id': 1, 'business_id': 1, 'warehouse_id': 147}),
            dict2tskv({'shop_id': 1, 'business_id': 1, 'warehouse_id': 654321}),
        ]),
    },
    {
        'shop_id': 2,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 2, 'business_id': 2, 'warehouse_id': 145}),
        ]),
    },
    # Магазины в тестинге, которые попадают под удаление скрытых офферов
    {
        'shop_id': 200,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 200, 'business_id': 3, 'warehouse_id': 145}),
            dict2tskv({'shop_id': 200, 'business_id': 3, 'warehouse_id': 123456}),
        ]),
    },
    {
        'shop_id': 300,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 300, 'business_id': 3, 'warehouse_id': 345678}),
        ]),
    },
    # Магазин со скрытым оффером, но не попадающий под чистку
    {
        'shop_id': 3,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 3, 'business_id': 3, 'warehouse_id': 789789}),
        ]),
    },
    # Магазин директа
    {
        'shop_id': 10,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 10, 'business_id': 6, 'warehouse_id': 0, 'direct_standby': True})
        ])
    },
    # Белый магазин в одном бизнесе с директом
    {
        'shop_id': 20,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 20, 'business_id': 6, 'warehouse_id': 0})
        ])
    },
    # Маркетный магазин, который размещается в директе
    {
        'shop_id': 30,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 30, 'business_id': 6, 'warehouse_id': 0, 'direct_standby': True, 'is_site_market': True})
        ])
    },
    # Отключенный магазин директа
    {
        'shop_id': 40,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 40, 'business_id': 6, 'warehouse_id': 0, 'direct_standby': True})
        ]),
        'partner_additional_info': Partner.PartnerAdditionalInfo(
            last_change_status_ts=create_ts(TS_DISABLED_SHOP_DIRECT),
            disabled_since_ts=create_ts(TS_DISABLED_SHOP_DIRECT)
        ).SerializeToString(),
        'status': 'publish'
    },
    # Магазин для тестирования снятия стратегии удаления с базовой части
    {
        'shop_id': 50,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 50, 'business_id': 7, 'warehouse_id': 507507}),
        ]),
    },
    # Магазин для тестирования PURE_VERTICAL_NOT_VERTICAL_APPROVED стратегии
    {
        'shop_id': 60,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 60, 'business_id': 6, 'warehouse_id': 0, 'vertical_share': True})
        ])
    },
    # Магазин для тестирования INVALID_MIGRATION стратегии
    {
        'shop_id': 70,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 70, 'business_id': 8, 'warehouse_id': 507507})
        ]),
    },
    # Магазин для тестирования отмены стратегии удаления по хешу партнерского контента
    {
        'shop_id': 80,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 80, 'business_id': 9, 'warehouse_id': 705705}),
        ]),
    },
    # Еще один магазин директа
    {
        'shop_id': 90,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 90, 'business_id': 6, 'warehouse_id': 0, 'direct_standby': True})
        ])
    },

    # Магазин с оферами Еды
    {
        'shop_id': 100,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 100, 'business_id': 10, 'warehouse_id': 100100, 'is_eats': True})
        ])
    },
    # Магазин с оферами без базового контента
    {
        'shop_id': 110,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 110, 'business_id': 11, 'warehouse_id': 110110, 'is_site_market': True})
        ])
    },
]


BUSINESS_STATUS = [{
    'business_id': 5,
    'status': BusinessStatus(
        value=BusinessStatus.Status.LOCKED,
        finish_ts=create_ts(60 * 30),
    ).SerializeToString(),
}, {
    'business_id': BUSINESS_STATUS_IN_TTL,
    'status': BusinessStatus(
        value=BusinessStatus.Status.UNLOCKED,
        finish_ts=create_ts(NOW - 60 * 30),
    ).SerializeToString(),
}, {
    'business_id': BUSINESS_STATUS_OVER_TTL,
    'status': BusinessStatus(
        value=BusinessStatus.Status.UNLOCKED,
        finish_ts=create_ts(NOW - 60 * 61),
    ).SerializeToString(),
}, {
    'business_id': BUSINESS_STATUS_LOCKED,
    'status': BusinessStatus(
        value=BusinessStatus.Status.LOCKED,
    ).SerializeToString(),
}]


def make_offer_id(offer_id, system=None):
    return offer_id + '~System' if system else offer_id


def make_basic_offer(business_id, shop_sku, ts_created, removed_ts=None, strategy=None, original_partner_content=True, name=None, is_resale=None):
    return (business_id, shop_sku, ts_created, removed_ts, strategy, original_partner_content, name, is_resale)


BASIC_OFFERS_DATA = [
    make_basic_offer(1, 'ValidOfferStaysAlive', TS_FOR_REMOVED),
    make_basic_offer(1, 'RemovedOffer', TS_FOR_REMOVED, TS_FOR_REMOVED),
    make_basic_offer(2, 'MigratedOfferNoServiceRemained', TS_BASIC_WITHOUT_SERVICE),
    make_basic_offer(2, 'MigratedOfferServiceRemained', TS_BASIC_WITHOUT_SERVICE),
    make_basic_offer(1, 'BasicWithoutService', TS_BASIC_WITHOUT_SERVICE),
    make_basic_offer(1, 'ZeroWarehouse', TS_FRESH),
    make_basic_offer(1, 'InvalidMigration', TS_FRESH),
    make_basic_offer(2, 'InvalidMigration', TS_FRESH),
    make_basic_offer(2, 'InvalidMigrationUnderTtl', TS_FRESH),
    make_basic_offer(3, 'InvalidMigration', TS_FRESH),
    make_basic_offer(5, 'InvalidMigration', TS_FRESH),
    make_basic_offer(1, 'InvalidWarehouse', TS_WRONG_WAREHOUSE),
    make_basic_offer(3000, 'InvalidWarehouseNoShopsDat', TS_WRONG_WAREHOUSE),
    # Опубликованные оффера не удаляются.
    # Если есть опубликованный дубликат, то все неопубликованные будут удалены, даже если они свежее опубликованного.
    make_basic_offer(1, 'PublishOriginalPartnerContentDuplicate_1', TS_FRESH + 3, name='PublishOriginalPartnerContentDuplicate'),
    make_basic_offer(1, 'PublishOriginalPartnerContentDuplicate_2', TS_FRESH + 2, name='PublishOriginalPartnerContentDuplicate'),
    make_basic_offer(1, 'PublishOriginalPartnerContentDuplicate_3', TS_FRESH + 1, name='PublishOriginalPartnerContentDuplicate'),
    # Если опубликованных дубликатов нет, останется только самый свежий оффер
    make_basic_offer(1, 'NotPublishOriginalPartnerContentDuplicate_1', TS_SERVICE_WITHOUT_BASIC + 1, name='NotPublishOriginalPartnerContentDuplicate'),
    make_basic_offer(1, 'NotPublishOriginalPartnerContentDuplicate_2', TS_FRESH + 2, name='NotPublishOriginalPartnerContentDuplicate'),
    make_basic_offer(1, 'NotPublishOriginalPartnerContentDuplicate_3', TS_FRESH + 3, name='NotPublishOriginalPartnerContentDuplicate'),
    # Б/у оффера пропускаются при рассчете дубликатов
    make_basic_offer(1, 'NotPublishOriginalPartnerContentDuplicateInvisibleOffer', TS_FRESH + 4, name='NotPublishOriginalPartnerContentDuplicate', is_resale=True),
    # Оффера без title (name) пропускаются при рассчете дубликатов
    make_basic_offer(1, 'NotPublishOriginalPartnerContentDuplicateWithoutTitle_1', TS_FRESH + 1, name=None),
    make_basic_offer(1, 'NotPublishOriginalPartnerContentDuplicateWithoutTitle_2', TS_FRESH + 2, name=None),
    # Оффер с fulfillment складом не удалится, хоть и дубликат
    make_basic_offer(1, 'NotPublishOriginalPartnerContentDuplicateWithFFstock', TS_FRESH, name='NotPublishOriginalPartnerContentDuplicate'),
    # Базовые дубликаты без сервисных частей отлично удалятся
    make_basic_offer(1, 'BasicOnlyOriginalPartnerContentDuplicate_1', TS_FRESH + 10, name='BasicOnlyOriginalPartnerContentDuplicate'),
    make_basic_offer(1, 'BasicOnlyOriginalPartnerContentDuplicate_2', TS_FRESH + 1, name='BasicOnlyOriginalPartnerContentDuplicate'),
    # Базовый оффер неопубликован по умолчанию, потому что у него нет сервисных. Но не удалится, потому что у него нет дубликотов.
    make_basic_offer(1, 'BasicOnlyOriginalPartnerContentNonDuplicate', TS_FRESH, name='BasicOnlyOriginalPartnerContentNonDuplicate'),
    make_basic_offer(1, 'EraseByFilter', TS_FRESH),
    make_basic_offer(4, 'RemoveUnitedByIdsTable', TS_FRESH),
    make_basic_offer(4, 'RemoveServiceByIdsTable', TS_FRESH),
    make_basic_offer(4, 'RemoveByFilter', TS_FRESH),
    make_basic_offer(1, 'RemovedFFOfferWithMarketStocks', TS_FRESH),
    # Оффера в тестинге
    make_basic_offer(3, 'TestingNotDisabled', TS_NOT_FRESH),
    make_basic_offer(3, 'TestingDisabledFresh', TS_NOT_FRESH),
    make_basic_offer(3, 'TestingDisabledOld', TS_NOT_FRESH),
    make_basic_offer(3, 'TestingDisabledButNotInCleaningShops', TS_NOT_FRESH),
    # Оффера директа
    make_basic_offer(6, 'DirectAndWhiteFeedDisabled', TS_DISABLED_DIRECT),
    make_basic_offer(6, 'DirectSiteDisabled', TS_DISABLED_DIRECT),
    make_basic_offer(6, 'MarketOfferWithDirectColor-O_O', TS_DISABLED_DIRECT),
    make_basic_offer(6, 'DirectWithDisabledShop', TS_DISABLED_DIRECT),
    make_basic_offer(6, 'DirectFreshNoService', TS_FRESH),
    # Оффера для тестирования отмены стратегии
    # для оффера снимется удаление, потому что появились сервисные / складские части
    make_basic_offer(7, 'RemoveNoServiceStrategyFromBasic', TS_NOT_FRESH, TS_NOT_FRESH, remove_strategy.NO_SERVICE),
    # не снимется удаление, потому что сервисные / складские части тоже размечены удаленными
    make_basic_offer(
        7, 'DontRemoveNoServiceStrategyFromBasic_1', TS_BASIC_WITHOUT_SERVICE, TS_FRESH,
        remove_strategy.NO_SERVICE),
    # не снимется удаление, потому что сервисных и складских частей вообще нету
    make_basic_offer(
        7, 'DontRemoveNoServiceStrategyFromBasic_2', TS_BASIC_WITHOUT_SERVICE, TS_FRESH,
        remove_strategy.NO_SERVICE),
    # появилась хорошая базовая часть для сервисных / складских офферов, которые помечены к удалению
    make_basic_offer(7, 'RemoveNoBasicStrategyFromService', TS_FRESH),
    # базовая часть для проверки что с сервисных / складских офферов не снимется удаление, если базовая размечена
    # удаленной
    make_basic_offer(
        7, 'DontRemoveNoBasicStrategyFromService_1', TS_FOR_REMOVED, TS_FOR_REMOVED,
        remove_strategy.REMOVED),
    # стратегии должны взаимно отмениться, если базовая недавно размечена как удаленная NO_SERVICE и сервисные +
    # складские размечены недавно NO_BASIC то надо снимать и то, и то (вообще в такую ситуацию мы не можем попасть, но
    # если звезды сойдутся, то это надо спасти оффер)
    make_basic_offer(
        7, 'FreshNoServiceAndNoBasicAreDuoRevertable', TS_BASIC_WITHOUT_SERVICE, TS_FRESH,
        remove_strategy.NO_SERVICE),
    # стратегии должны взаимно отмениться, если базовая давно размечена как удаленная NO_SERVICE и сервисные + складские
    # размечены давно NO_BASIC и пора всех их удалить то надо снимать и то, и то (вообще в такую ситуацию мы не можем
    # попасть, но если звезlы сойдутся, то это надо спасти оффер)
    make_basic_offer(
        7, 'OldNoServiceAndNoBasicAreDuoRevertable', TS_BASIC_WITHOUT_SERVICE, TS_FOR_REMOVED,
        remove_strategy.NO_SERVICE),
    # стратегия NO_SERVICE не должна отмениться, если есть сервисные + складские, но они недавно размечены
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах не появится этих офферов, потому что стратегию снова рассчитать
    # не выйдет, но и в топике с изменением removed их не будет
    make_basic_offer(
        7, 'FreshNoServiceAndInvalidMigrationAreNotDuoRevertable', TS_BASIC_WITHOUT_SERVICE, TS_FRESH,
        remove_strategy.NO_SERVICE),
    # стратегия NO_SERVICE не должна отмениться, если есть сервисные + складские, и они давно размечены
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах появятся эти оффера, потому что расчитается стратегия REMOVED
    make_basic_offer(
        7, 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable', TS_BASIC_WITHOUT_SERVICE, TS_NOT_FRESH,
        remove_strategy.NO_SERVICE),
    # стратегия NO_BASIC не должна отмениться с сервисных / складских, если есть базовая недавно размеченая
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах не появится этих офферов, потому что стратегию снова
    # рассчитать не выйдет, но и в топике с изменением removed их не будет
    make_basic_offer(
        7, 'FreshNoBasicAndInvalidMigrationAreNotDuoRevertable', TS_FRESH, TS_FRESH,
        remove_strategy.INVALID_MIGRATION),
    # стратегия NO_BASIC не должна отмениться  с сервисных / складских, если есть базовая и она давно размечена
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах появятся эти оффера, потому что расчитается стратегия REMOVED
    make_basic_offer(
        7, 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable', TS_NOT_FRESH, TS_NOT_FRESH,
        remove_strategy.INVALID_MIGRATION),
    # удаление чисто-ТВ офферов
    make_basic_offer(6, 'PureVerticalApproved', TS_NOT_FRESH),
    make_basic_offer(6, 'PureVerticalNotApproved', TS_NOT_FRESH),
    make_basic_offer(6, 'PureVerticalNotApprovedRecently', TS_NOT_FRESH),
    make_basic_offer(6, 'PureVerticalWithoutAnyFlag', TS_NOT_FRESH),
    # # Оффера для тестирования удаления стратегии дубликатности по хешу от оригинального партнерского контента
    # не снимется удаление, так как хеш продублирован
    make_basic_offer(9, 'DontRemoveOriginalPartnerContentDuplicatesStrategy', TS_FRESH, TS_FRESH, strategy=remove_strategy.OFFER_DUPLICATED, name='OriginalPartnerContentDuplicatesStrategy'),
    # не снимется удаление, так как хеш продублирован, и удалится как помеченная к удалению более часа назад
    make_basic_offer(
        9, 'DontRemoveOriginalPartnerContentDuplicatesStrategy_1', TS_FOR_REMOVED, TS_FOR_REMOVED,
        strategy=remove_strategy.OFFER_DUPLICATED, name='OriginalPartnerContentDuplicatesStrategy'),
    # снимется удаление, так как хеш продублирован, но теперь наиболее свежая
    make_basic_offer(
        9, 'RemoveOriginalPartnerContentDuplicatesStrategyFromTheMostRecentOffer', TS_FRESH + 1, TS_FRESH + 1,
        strategy=remove_strategy.OFFER_DUPLICATED, name='OriginalPartnerContentDuplicatesStrategy'),
    # снимется удаление, так как дубликатов больше нет
    make_basic_offer(
        9, 'RemoveOriginalPartnerContentDuplicatesStrategyFromTheOnlyOffer', TS_FRESH, TS_FRESH,
        strategy=remove_strategy.OFFER_DUPLICATED, name='TheOnlyOffer'),

    # Удаление оферов Еды
    make_basic_offer(10, 'EatsFreshOffer', TS_NOT_FRESH),
    make_basic_offer(10, 'EatsNotFreshOffer', TS_NOT_FRESH),
    # Удаление офферов без базового контента
    make_basic_offer(11, 'MarketOfferWithAllContent', TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT),
    make_basic_offer(11, 'MarketOfferWithBasicContent', TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT),
    make_basic_offer(11, 'MarketOfferWithServiceContent', TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, original_partner_content=None),
    make_basic_offer(11, 'MarketOfferWithoutAnyContentNotFresh', TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, original_partner_content=None),
    make_basic_offer(11, 'MarketOfferWithoutAnyContentFresh', TS_FRESH, original_partner_content=None),
    make_basic_offer(10, 'EatsOfferWithoutAnyContentNotFresh', TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, original_partner_content=None),
    make_basic_offer(11, 'MarketOfferWithoutAnyContentNotFreshRemoved', TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, TS_FOR_REMOVED, original_partner_content=None),
]

BASIC_OFFERS = [{
    'business_id': business_id,
    'shop_sku': make_offer_id(shop_sku, system),
    'identifiers': DTC.OfferIdentifiers(
        business_id=business_id,
        offer_id=make_offer_id(shop_sku, system),
    ).SerializeToString(),
    'meta': create_meta(ts_created, scope=DTC.BASIC, ts_first_added=ts_created, system=system).SerializeToString(),
    'status': None if (removed_ts is None and strategy is None) else DTC.OfferStatus(
        removed=None if removed_ts is None else DTC.Flag(
            flag=True,
            meta=create_update_meta(removed_ts)
        ),
        remove_strategy=None if strategy is None else DTC.RemoveStrategy(
            trash_strategy=strategy,
            meta=create_update_meta(removed_ts)
        ),
    ).SerializeToString(),
    'original_partner_content': None if original_partner_content is None else DTC.OriginalSpecification(
        name=DTC.StringValue(
            value=shop_sku if name is None else name,
            meta=create_update_meta(ts_created),
        ),
        is_resale=DTC.Flag(
            flag=None if is_resale is None else is_resale,
            meta=create_update_meta(ts_created),
        ),
    ).SerializeToString(),
} for business_id, shop_sku, ts_created, removed_ts, strategy, original_partner_content, name, is_resale in BASIC_OFFERS_DATA for system in [None , True]]

BASIC_SEARCH_OFFERS = [{
    'business_id': offer[0],
    'shop_sku': make_offer_id(offer[1], system)
} for offer in BASIC_OFFERS_DATA for system in [None, True]]

ERASED_BASICS = {
    # Удалится, т.к. помечен как удаленный
    (1, 'RemovedOffer'),
    # Удалится, т.к. помечен как удаленный
    (7, 'DontRemoveNoBasicStrategyFromService_1'),
    # Удалится, т.к. помечен к удалению давно и стратегия не отменилась
    (7, 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable'),
    # Удалится, т.к. помечен к удалению давно и стратегия не отменилась
    (7, 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable'),
    # Удалится, т.к. помечен к удалению давно и стратегия не отменилась
    (9, 'DontRemoveOriginalPartnerContentDuplicatesStrategy_1'),
    # Удалится, т.к. помечен к удалению давно и стратегия не отменилась
    (11, 'MarketOfferWithoutAnyContentNotFreshRemoved'),
}
REMOVED_BASICS = {
    # Удалены дубликаты
    (1, 'PublishOriginalPartnerContentDuplicate_1'),
    (1, 'NotPublishOriginalPartnerContentDuplicate_1'),
    (1, 'NotPublishOriginalPartnerContentDuplicate_2'),
    (1, 'BasicOnlyOriginalPartnerContentDuplicate_2'),
    # Не осталось сервисных
    (6, 'DirectSiteDisabled'),
    (6, 'DirectWithDisabledShop'),
    (6, 'DirectFreshNoService'),
    (6, 'PureVerticalNotApproved'),
    (10, 'EatsNotFreshOffer'),
    (11, 'MarketOfferWithServiceContent'),
    (11, 'MarketOfferWithoutAnyContentNotFresh'),
}
REMAINED_BASICS = set([(basic['business_id'], basic['shop_sku']) for basic in BASIC_OFFERS]) - ERASED_BASICS


def make_service_offers_data(
    business_id,
    shop_sku,
    shop_id,
    ts_created,
    removed_ts=None,
    publish=True,
    disabled_ts=None,
    strategy=None,
    rgb=None,
    disabled_source=DTC.PUSH_PARTNER_FEED,
    vertical_approved_flag=None,
    vertical_approved_flag_ts=None,
    ts_first_added=None,
    ts_vat=None,
    original_partner_content=True,
    name=None
):
    return (
        business_id,
        shop_sku,
        shop_id,
        ts_created,
        removed_ts,
        publish,
        disabled_ts,
        strategy,
        rgb,
        disabled_source,
        vertical_approved_flag,
        vertical_approved_flag_ts,
        ts_first_added,
        ts_vat,
        original_partner_content,
        name,
    )


SERVICE_OFFERS_DATA = [
    make_service_offers_data(1, 'ValidOfferStaysAlive', 1, TS_FOR_REMOVED),
    make_service_offers_data(1, 'RemovedOffer', 1, TS_FOR_REMOVED, TS_FOR_REMOVED),
    make_service_offers_data(2, 'MigratedOfferNoServiceRemained', 1, TS_FOR_MIGRATED, TS_FOR_MIGRATED),
    make_service_offers_data(2, 'MigratedOfferServiceRemained', 1, TS_FOR_MIGRATED, TS_FOR_MIGRATED),
    make_service_offers_data(2, 'MigratedOfferServiceRemained', 2, TS_FOR_MIGRATED, TS_FOR_MIGRATED),
    make_service_offers_data(1, 'ServiceWithoutBasic', 1, TS_SERVICE_WITHOUT_BASIC),
    make_service_offers_data(1, 'ServiceWithoutBasicButWithFfStock', 1, TS_SERVICE_WITHOUT_BASIC),
    make_service_offers_data(1, 'ZeroWarehouse', 1, TS_FRESH),
    make_service_offers_data(1, 'InvalidMigration', 1, TS_FRESH),
    make_service_offers_data(2, 'InvalidMigration', 1, TS_FRESH, ts_first_added=TS_OUTSIDE_INVALID_MIGRATION_TTL),
    make_service_offers_data(2, 'InvalidMigrationUnderTtl', 1, TS_FRESH, ts_first_added=TS_UNDER_INVALID_MIGRATION_TTL),
    make_service_offers_data(3, 'InvalidMigration', 1, TS_FRESH),
    make_service_offers_data(5, 'InvalidMigration', 1, TS_FRESH),
    make_service_offers_data(1, 'InvalidWarehouse', 1, TS_WRONG_WAREHOUSE),
    make_service_offers_data(3000, 'InvalidWarehouseNoShopsDat', 3000, TS_WRONG_WAREHOUSE),
    # Опубликованные оффера не удаляются.
    # Если есть опубликованный дубликат, то все неопубликованные будут удалены, даже если они свежее опубликованного.
    make_service_offers_data(1, 'PublishOriginalPartnerContentDuplicate_1', 1, TS_FRESH + 3, rgb=DTC.WHITE, publish=False, disabled_ts=TS_FRESH + 5),
    make_service_offers_data(1, 'PublishOriginalPartnerContentDuplicate_2', 1, TS_FRESH + 2, rgb=DTC.WHITE),
    make_service_offers_data(1, 'PublishOriginalPartnerContentDuplicate_3', 1, TS_FRESH + 1, rgb=DTC.WHITE),
    # Если опубликованных дубликатов нет, останется только самый свежий оффер
    make_service_offers_data(
        1, 'NotPublishOriginalPartnerContentDuplicate_1', 1, TS_SERVICE_WITHOUT_BASIC + 1,
        rgb=DTC.WHITE, publish=False, disabled_ts=TS_FRESH + 5),
    make_service_offers_data(1, 'NotPublishOriginalPartnerContentDuplicate_2', 1, TS_FRESH + 2, rgb=DTC.WHITE, publish=False, disabled_ts=TS_FRESH + 5),
    make_service_offers_data(1, 'NotPublishOriginalPartnerContentDuplicate_3', 1, TS_FRESH + 3, rgb=DTC.WHITE, publish=False, disabled_ts=TS_FRESH + 5),
    # Оффера без name не учитываются в дубликатах
    make_service_offers_data(1, 'NotPublishOriginalPartnerContentDuplicateWithoutTitle_1', 1, TS_FRESH + 1, rgb=DTC.WHITE, publish=False, disabled_ts=TS_FRESH + 1),
    make_service_offers_data(1, 'NotPublishOriginalPartnerContentDuplicateWithoutTitle_2', 1, TS_FRESH + 2, rgb=DTC.WHITE, publish=False, disabled_ts=TS_FRESH + 2),
    # Оффер с fulfillment складом не удалится, хоть и дубликат
    make_service_offers_data(1, 'NotPublishOriginalPartnerContentDuplicateWithFFstock', 1, TS_FRESH, rgb=DTC.WHITE, publish=False, disabled_ts=TS_FRESH + 6),
    make_service_offers_data(1, 'EraseByFilter', 1, TS_FRESH),
    make_service_offers_data(1, 'EraseByFilter', 333, TS_FRESH),
    make_service_offers_data(4, 'RemoveUnitedByIdsTable', 1111, TS_FRESH),
    make_service_offers_data(4, 'RemoveUnitedByIdsTable', 2222, TS_FRESH),
    make_service_offers_data(4, 'RemoveServiceByIdsTable', 1111, TS_FRESH),
    make_service_offers_data(4, 'RemoveServiceByIdsTable', 2222, TS_FRESH),
    make_service_offers_data(4, 'RemoveByFilter', 1111, TS_FRESH),
    make_service_offers_data(4, 'RemoveByFilter', 2222, TS_FRESH),
    make_service_offers_data(4, 'RemoveByFilter', 3333, TS_FRESH),
    make_service_offers_data(4, 'RemoveByFilter', 4444, TS_FRESH, disabled_ts=TS_DISABLED),
    make_service_offers_data(4, 'RemoveByFilter', 5555, TS_FRESH, TS_FRESH),
    make_service_offers_data(1, 'RemovedFFOfferWithMarketStocks', 1, TS_FRESH),
    # Оффера в тестинге
    make_service_offers_data(3, 'TestingNotDisabled', 200, TS_NOT_FRESH),
    make_service_offers_data(3, 'TestingDisabledFresh', 200, TS_NOT_FRESH, publish=False, disabled_ts=TS_FRESH),
    make_service_offers_data(3, 'TestingDisabledOld', 200, TS_NOT_FRESH, publish=False, disabled_ts=TS_DISABLED),
    make_service_offers_data(3, 'TestingDisabledOld', 300, TS_NOT_FRESH, publish=False, disabled_ts=TS_DISABLED),
    make_service_offers_data(
        3, 'TestingDisabledButNotInCleaningShops', 3, TS_NOT_FRESH, publish=False, disabled_ts=TS_DISABLED),
    # Оффера для тестирования удаления стратегии с базовой части
    # для базового оффера снимется удаление, потому что появились сервисные / складские части
    make_service_offers_data(7, 'RemoveNoServiceStrategyFromBasic', 50, TS_FRESH),
    # не снимется удаление в базовой, потому что сервисные / складские части тоже размечены удаленными
    make_service_offers_data(
        7, 'DontRemoveNoServiceStrategyFromBasic_1', 50,  TS_FOR_REMOVED, TS_FOR_REMOVED,
        strategy=remove_strategy.REMOVED),
    # с сервисного оффера будет снято удаление, потому что появилась хорошая базовая часть
    make_service_offers_data(
        7, 'RemoveNoBasicStrategyFromService', 50, TS_SERVICE_WITHOUT_BASIC, TS_FRESH,
        strategy=remove_strategy.NO_BASIC),
    # с сервисного не снимется удаление, если базовая размечена удаленной
    make_service_offers_data(
        7, 'DontRemoveNoBasicStrategyFromService_1', 50, TS_SERVICE_WITHOUT_BASIC, TS_FRESH,
        strategy=remove_strategy.NO_BASIC),
    # стратегии должны взаимно отмениться, если базовая недавно размечена как удаленная NO_SERVICE и сервисные +
    # складские размечены недавно NO_BASIC то надо снимать и то, и то (вообще в такую ситуацию мы не можем попасть, но
    # если звезды сойдутся, то это надо спасти оффер)
    make_service_offers_data(
        7, 'FreshNoServiceAndNoBasicAreDuoRevertable', 50, TS_SERVICE_WITHOUT_BASIC, TS_FRESH,
        strategy=remove_strategy.NO_BASIC),
    # стратегии должны взаимно отмениться, если базовая размечена как удаленная NO_SERVICE и сервисные + складские
    # размечены NO_BASIC и пора всех их удалить то надо снимать и то, и то (вообще в такую ситуацию мы не можем попасть,
    # но если звезды сойдутся, то это надо спасти оффер)
    make_service_offers_data(
        7, 'OldNoServiceAndNoBasicAreDuoRevertable', 50, TS_SERVICE_WITHOUT_BASIC, TS_FOR_REMOVED,
        strategy=remove_strategy.NO_BASIC),
    # стратегия NO_SERVICE не должна отмениться, если есть сервисные + складские, но они недавно размечены
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах не появится этих офферов, потому что стратегию снова рассчитать
    # не выйдет, но и в топике с изменением removed их не будет
    make_service_offers_data(
        7, 'FreshNoServiceAndInvalidMigrationAreNotDuoRevertable', 70, TS_FRESH, TS_FRESH,
        strategy=remove_strategy.INVALID_MIGRATION),
    # стратегия NO_SERVICE не должна отмениться, если есть сервисные + складские, и они давно размечены
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах появятся эти оффера, потому что расчитается стратегия REMOVED
    make_service_offers_data(
        7, 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable', 70, TS_BASIC_WITHOUT_SERVICE,
        TS_NOT_FRESH, strategy=remove_strategy.INVALID_MIGRATION),
    # стратегия NO_BASIC не должна отмениться с сервисных / складских, если есть базовая недавно размеченая
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах не появится этих офферов, потому что стратегию снова
    # рассчитать не выйдет, но и в топике с изменением removed их не будет
    make_service_offers_data(
        7, 'FreshNoBasicAndInvalidMigrationAreNotDuoRevertable', 50, TS_SERVICE_WITHOUT_BASIC,
        TS_FRESH, strategy=remove_strategy.NO_BASIC),
    # стратегия NO_BASIC не должна отмениться  с сервисных / складских, если есть базовая и она давно размечена
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах появятся эти оффера, потому что расчитается стратегия REMOVED
    make_service_offers_data(
        7, 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable', 50, TS_SERVICE_WITHOUT_BASIC,
        TS_NOT_FRESH, strategy=remove_strategy.NO_BASIC),
    # # Оффера для тестирования удаления стратегии дубликатности по хешу от оригинального партнерского контента
    # не снимется удаление, так как хеш продублирован
    make_service_offers_data(
        9, 'DontRemoveOriginalPartnerContentDuplicatesStrategy', 80, TS_FRESH, TS_FRESH,
        publish=False, disabled_ts=TS_FRESH + 5, strategy=remove_strategy.OFFER_DUPLICATED, rgb=DTC.WHITE),
    # не снимется удаление, так как хеш продублирован, и удалится как помеченная к удалению более часа назад
    make_service_offers_data(
        9, 'DontRemoveOriginalPartnerContentDuplicatesStrategy_1', 80, TS_FOR_REMOVED, TS_FOR_REMOVED,
        publish=False, disabled_ts=TS_FRESH + 5, strategy=remove_strategy.OFFER_DUPLICATED, rgb=DTC.WHITE),
    # снимется удаление, так как хеш продублирован, но теперь наиболее свежая
    make_service_offers_data(
        9, 'RemoveOriginalPartnerContentDuplicatesStrategyFromTheMostRecentOffer', 80, TS_FRESH + 1, TS_FRESH + 1,
        publish=False, disabled_ts=TS_FRESH + 5, strategy=remove_strategy.OFFER_DUPLICATED, rgb=DTC.WHITE),
    # снимется удаление, так как дубликатов больше нет
    make_service_offers_data(
        9, 'RemoveOriginalPartnerContentDuplicatesStrategyFromTheOnlyOffer', 80, TS_FRESH, TS_FRESH,
        publish=False, disabled_ts=TS_FRESH + 5, strategy=remove_strategy.OFFER_DUPLICATED, rgb=DTC.WHITE),
    make_service_offers_data(
        6, 'DirectAndWhiteFeedDisabled', 10, TS_NOT_FRESH, disabled_ts=TS_DISABLED_DIRECT,
        disabled_source=DTC.PUSH_PARTNER_FEED, rgb=DTC.DIRECT_STANDBY),
    make_service_offers_data(
        6, 'DirectAndWhiteFeedDisabled', 20, TS_NOT_FRESH, disabled_ts=TS_DISABLED_DIRECT,
        disabled_source=DTC.PUSH_PARTNER_FEED, rgb=DTC.WHITE),
    make_service_offers_data(
        6, 'DirectSiteDisabled', 10, TS_NOT_FRESH, disabled_ts=TS_DISABLED_DIRECT,
        disabled_source=DTC.PUSH_PARTNER_SITE, rgb=DTC.DIRECT_STANDBY),
    make_service_offers_data(
        6, 'MarketOfferWithDirectColor-O_O', 30, TS_NOT_FRESH, disabled_ts=TS_DISABLED_DIRECT,
        disabled_source=DTC.PUSH_PARTNER_FEED, rgb=DTC.DIRECT_STANDBY),
    make_service_offers_data(6, 'DirectWithDisabledShop', 40, TS_NOT_FRESH, rgb=DTC.DIRECT_STANDBY),
    make_service_offers_data(
        6, 'DirectFreshNoService', 90, TS_NOT_FRESH, disabled_ts=TS_DISABLED_DIRECT,
        disabled_source=DTC.PUSH_PARTNER_FEED, rgb=DTC.DIRECT_STANDBY),

    # чисто-ТВ оффер с vertical_approved = true
    make_service_offers_data(
        6, 'PureVerticalApproved', 60, TS_NOT_FRESH, vertical_approved_flag=True,
        vertical_approved_flag_ts=TS_VERTICAL_APPROVED_NOT_FRESH, rgb=DTC.VERTICAL_GOODS_ADS),
    make_service_offers_data(
        6, 'PureVerticalNotApproved', 60, TS_NOT_FRESH, vertical_approved_flag=False,
        vertical_approved_flag_ts=TS_VERTICAL_APPROVED_NOT_FRESH, rgb=DTC.VERTICAL_GOODS_ADS),
    make_service_offers_data(
        6, 'PureVerticalNotApprovedRecently', 60, TS_NOT_FRESH, vertical_approved_flag=False,
        vertical_approved_flag_ts=TS_VERTICAL_APPROVED_FRESH, rgb=DTC.VERTICAL_GOODS_ADS),
    make_service_offers_data(6, 'PureVerticalWithoutAnyFlag', 60, TS_NOT_FRESH, rgb=DTC.VERTICAL_GOODS_ADS),

    # Оферы Еды
    make_service_offers_data(10, 'EatsFreshOffer', 100, TS_FRESH, rgb=DTC.EDA, ts_vat=TS_FRESH),
    make_service_offers_data(10, 'EatsNotFreshOffer', 100, TS_FRESH, rgb=DTC.EDA, ts_vat=TS_NOT_FRESH),
    # Удаление офферов без базового контента
    make_service_offers_data(11, 'MarketOfferWithAllContent', 110, TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, rgb=DTC.WHITE),
    make_service_offers_data(11, 'MarketOfferWithBasicContent', 110, TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, rgb=DTC.WHITE, original_partner_content=None),
    make_service_offers_data(11, 'MarketOfferWithServiceContent', 110, TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, rgb=DTC.WHITE),
    make_service_offers_data(11, 'MarketOfferWithoutAnyContentNotFresh', 110, TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, rgb=DTC.WHITE, original_partner_content=None),
    make_service_offers_data(11, 'MarketOfferWithoutAnyContentFresh', 110, TS_FRESH, rgb=DTC.WHITE, original_partner_content=None),
]

SERVICE_OFFERS = [{
    'business_id': business_id,
    'shop_sku': make_offer_id(shop_sku, system),
    'shop_id': shop_id,
    'warehouse_id': 0,
    'outlet_id': 0,
    'identifiers': DTC.OfferIdentifiers(
        business_id=business_id,
        offer_id=make_offer_id(shop_sku, system),
        shop_id=shop_id,
        warehouse_id=0,
    ).SerializeToString(),
    'meta': create_meta(
        ts_created,
        scope=DTC.SERVICE,
        color=rgb,
        ts_first_added=ts_first_added,
        vertical_approved_flag=DTC.Flag(flag=vertical_approved_flag, meta=create_update_meta(vertical_approved_flag_ts))
        if vertical_approved_flag is not None else None,
        system=system,
    ).SerializeToString(),
    'status': DTC.OfferStatus(
        removed=None if removed_ts is None else DTC.Flag(
            flag=True,
            meta=create_update_meta(removed_ts)
        ),
        remove_strategy=None if strategy is None else DTC.RemoveStrategy(
            trash_strategy=strategy,
            meta=create_update_meta(removed_ts)
        ),
        disabled=None if disabled_ts is None else [
            DTC.Flag(
                flag=True,
                meta=create_update_meta(disabled_ts, source=disabled_source),
            ),
        ],
        publish_by_partner=DTC.AVAILABLE if publish else DTC.UNKNOWN_SUMMARY,
        disabled_by_partner_since_ts=None if disabled_ts is None else create_ts(disabled_ts)
    ).SerializeToString(),
    'original_partner_content': None if original_partner_content is None else DTC.OriginalSpecification(
        name=DTC.StringValue(
            value=shop_sku if name is None else name,
            meta=create_update_meta(ts_created),
        ),
    ).SerializeToString(),
    'price': None if ts_vat is None else DTC.OfferPrice(
        original_price_fields=DTC.OriginalPriceFields(
            vat=DTC.VatValue(
                meta=create_update_meta(ts_vat)
            )
        )
    ).SerializeToString(),
    'state_flags': None if removed_ts is None else 1,
} for
    business_id,
    shop_sku,
    shop_id,
    ts_created,
    removed_ts,
    publish,
    disabled_ts,
    strategy,
    rgb,
    disabled_source,
    vertical_approved_flag,
    vertical_approved_flag_ts,
    ts_first_added,
    ts_vat,
    original_partner_content,
    name in SERVICE_OFFERS_DATA for system in [None, True]
]

SERVICE_SEARCH_OFFERS = [{
    'business_id': offer[0],
    'shop_sku': make_offer_id(offer[1], system),
    'shop_id': offer[2],
} for offer in SERVICE_OFFERS_DATA for system in [None, True]]

ERASED_SERVICES = {
    # Удалится, т.к. помечен как удаленный
    (1, 'RemovedOffer', 1),
    # Удалится, т. к. он как был плохой так и остался
    (7, 'DontRemoveNoServiceStrategyFromBasic_1', 50),
    # Удалится, т.к. помечен к удалению давно и стратегия не отменилась
    (7, 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable', 70),
    # Удалится, т.к. помечен к удалению давно и стратегия не отменилась
    (7, 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable', 50),
    # Удалится, т.к. помечен к удалению давно и стратегия не отменилась
    (9, 'DontRemoveOriginalPartnerContentDuplicatesStrategy_1', 80),
}

REMOVED_SERVICES = {
    (1, 'PublishOriginalPartnerContentDuplicate_1', 1),
    (1, 'NotPublishOriginalPartnerContentDuplicate_1', 1),
    (1, 'NotPublishOriginalPartnerContentDuplicate_2', 1),
    # Удалится, т.к. по информации из шопсдат этот магазин в другом бизнесе
    (2, 'InvalidMigration', 1),
    (3, 'InvalidMigration', 1),
    # Удалится, т.к. нет базовой части
    (1, 'ServiceWithoutBasic', 1),
    # Удалятся, т.к. это тестовые магазины попадающие под регулярную чистку от давно скрытых офферов
    (3, 'TestingDisabledOld', 200),
    (3, 'TestingDisabledOld', 300),
    # Удалятся, т.к. это офферы директа, давно скрытые комплитным фидом / диким вебом
    (6, 'DirectAndWhiteFeedDisabled', 10),
    (6, 'DirectSiteDisabled', 10),
    # Удалятся, т.к. это офферы директа с давно отключенным магазином
    (6, 'DirectWithDisabledShop', 40),
    # Удалится, так как размечены DIRECT_DISABLED_BY_PARTNER_FEED
    (6, 'DirectFreshNoService', 90),
    # Удалится, т.к. чисто-ТВ со старым vertical_approved=false
    (6, 'PureVerticalNotApproved', 60),
    # Удалится, т.к. мигрировал в другой бизнес
    (2, 'MigratedOfferNoServiceRemained', 1),
    # Удалится, т.к. мигрировал в другой бизнес
    (2, 'MigratedOfferServiceRemained', 1),

    # Удалился, т.к. истек срок обновления НДС для оферов Еды
    (10, 'EatsNotFreshOffer', 100),
    # Удалились, т.к. имеет значение только базовая часть
    (11, 'MarketOfferWithServiceContent', 110),
    (11, 'MarketOfferWithoutAnyContentNotFresh', 110),
}
REMAINED_SERVICES = set([(
    basic['business_id'],
    basic['shop_sku'],
    basic['shop_id'],
) for basic in SERVICE_OFFERS]) - ERASED_SERVICES


def make_actual_service_offers_data(
    business_id,
    shop_sku,
    shop_id,
    warehouse_id,
    ts_created,
    removed_ts=None,
    rgb=None,
    stock_ts=None,
    strategy=None,
    ts_first_added=None
):
    return(
        business_id,
        shop_sku,
        shop_id,
        warehouse_id,
        ts_created,
        removed_ts,
        rgb,
        stock_ts,
        strategy,
        ts_first_added
    )


ACTUAL_SERVICE_OFFERS_DATA = [
    make_actual_service_offers_data(1, 'ValidOfferStaysAlive', 1, 145, TS_FOR_REMOVED, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'RemovedOffer', 1, 145, TS_FOR_REMOVED, TS_FOR_REMOVED, rgb=DTC.WHITE),
    make_actual_service_offers_data(
        2, 'MigratedOfferNoServiceRemained', 1, 145, TS_FOR_MIGRATED, TS_FOR_MIGRATED, rgb=DTC.WHITE),
    make_actual_service_offers_data(
        2, 'MigratedOfferServiceRemained', 1, 145, TS_FOR_MIGRATED, TS_FOR_MIGRATED, rgb=DTC.WHITE),
    make_actual_service_offers_data(
        2, 'MigratedOfferServiceRemained', 2, 145, TS_FOR_MIGRATED, TS_FOR_MIGRATED, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'ServiceWithoutBasic', 1, 145, TS_SERVICE_WITHOUT_BASIC, rgb=DTC.WHITE),
    make_actual_service_offers_data(
        1, 'ServiceWithoutBasicButWithFfStock', 1, 145, TS_SERVICE_WITHOUT_BASIC, rgb=DTC.WHITE,
        stock_ts=TS_SERVICE_WITHOUT_BASIC),
    make_actual_service_offers_data(1, 'ZeroWarehouse', 1, 0, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'ZeroWarehouse', 1, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'ZeroWarehouse', 1, 654322, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'InvalidMigration', 1, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'InvalidMigration', 1, 147, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(
        2, 'InvalidMigration', 1, 145, TS_FRESH, rgb=DTC.WHITE, stock_ts=TS_SERVICE_WITHOUT_BASIC,
        ts_first_added=TS_OUTSIDE_INVALID_MIGRATION_TTL),
    make_actual_service_offers_data(
        2, 'InvalidMigration', 1, 147, TS_FRESH, rgb=DTC.WHITE, ts_first_added=TS_OUTSIDE_INVALID_MIGRATION_TTL),
    make_actual_service_offers_data(
        2, 'InvalidMigrationUnderTtl', 1, 147, TS_FRESH, rgb=DTC.WHITE,
        ts_first_added=TS_UNDER_INVALID_MIGRATION_TTL),
    make_actual_service_offers_data(3, 'InvalidMigration', 1, 0, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(5, 'InvalidMigration', 1, 0, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'InvalidWarehouse', 1, 145, TS_WRONG_WAREHOUSE, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'InvalidWarehouse', 1, 654321, TS_WRONG_WAREHOUSE, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'InvalidWarehouse', 1, 654322, TS_WRONG_WAREHOUSE, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'NotPublishOriginalPartnerContentDuplicateWithFFstock', 1, 145, TS_FRESH, rgb=DTC.WHITE, stock_ts=TS_FRESH + 6),
    make_actual_service_offers_data(3000, 'InvalidWarehouseNoShopsDat', 3000, 654322, TS_WRONG_WAREHOUSE, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'EraseByFilter', 1, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(1, 'EraseByFilter', 333, 0, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveUnitedByIdsTable', 1111, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveUnitedByIdsTable', 2222, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveServiceByIdsTable', 1111, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveServiceByIdsTable', 1111, 147, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveServiceByIdsTable', 2222, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveByFilter', 1111, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveByFilter', 2222, 145, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveByFilter', 3333, 0, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveByFilter', 4444, 0, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(4, 'RemoveByFilter', 5555, 0, TS_FRESH, TS_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(
        1, 'RemovedFFOfferWithMarketStocks', 1, 145, TS_FOR_REMOVED, TS_FOR_REMOVED, rgb=DTC.WHITE, stock_ts=TS_FOR_REMOVED),
    # Оффера в тестинге
    make_actual_service_offers_data(
        3, 'TestingNotDisabled', 200, 145, TS_NOT_FRESH, rgb=DTC.WHITE, stock_ts=TS_NOT_FRESH),
    make_actual_service_offers_data(
        3, 'TestingDisabledFresh', 200, 123456, TS_NOT_FRESH, rgb=DTC.WHITE, stock_ts=TS_NOT_FRESH),
    make_actual_service_offers_data(
        3, 'TestingDisabledOld', 200, 145, TS_NOT_FRESH, rgb=DTC.WHITE, stock_ts=TS_NOT_FRESH),
    make_actual_service_offers_data(
        3, 'TestingDisabledOld', 200, 123456, TS_NOT_FRESH, rgb=DTC.WHITE, stock_ts=TS_NOT_FRESH),
    make_actual_service_offers_data(
        3, 'TestingDisabledOld', 300, 345678, TS_NOT_FRESH, rgb=DTC.WHITE, stock_ts=TS_NOT_FRESH),
    make_actual_service_offers_data(
        3, 'TestingDisabledButNotInCleaningShops', 3, 789789, TS_NOT_FRESH, rgb=DTC.WHITE, stock_ts=TS_NOT_FRESH),
    # Оффера бизнеса с директом
    make_actual_service_offers_data(6, 'DirectAndWhiteFeedDisabled', 10, 0, TS_NOT_FRESH, rgb=DTC.DIRECT_STANDBY),
    make_actual_service_offers_data(6, 'DirectAndWhiteFeedDisabled', 20, 0, TS_NOT_FRESH, rgb=DTC.WHITE),
    make_actual_service_offers_data(6, 'DirectSiteDisabled', 10, 0, TS_NOT_FRESH, rgb=DTC.DIRECT_STANDBY),
    make_actual_service_offers_data(6, 'MarketOfferWithDirectColor-O_O', 30, 0, TS_NOT_FRESH, rgb=DTC.DIRECT_STANDBY),
    make_actual_service_offers_data(6, 'DirectWithDisabledShop', 40, 0, TS_NOT_FRESH, rgb=DTC.DIRECT_STANDBY),
    make_actual_service_offers_data(6, 'DirectFreshNoService', 90, 0, TS_NOT_FRESH, rgb=DTC.DIRECT_STANDBY),
    # Оффера для тестирования удаления стратегии с базовой части
    # для базового оффера снимется удаление, потому что появились сервисные / складские части
    make_actual_service_offers_data(7, 'RemoveNoServiceStrategyFromBasic', 50, 507507, TS_FRESH, rgb=DTC.WHITE),
    # со складского оффера будет снято удаление, потому что появилась хорошая базовая часть
    make_actual_service_offers_data(
        7, 'RemoveNoBasicStrategyFromService', 50, 507507, TS_SERVICE_WITHOUT_BASIC, TS_FRESH, rgb=DTC.WHITE,
        strategy=remove_strategy.NO_BASIC),
    # со складского оффера не снимется удаление, если базовая размечена удаленной
    make_actual_service_offers_data(
        7, 'DontRemoveNoBasicStrategyFromService_1', 50, 507507, TS_SERVICE_WITHOUT_BASIC, TS_FRESH, rgb=DTC.WHITE,
        strategy=remove_strategy.NO_BASIC),
    # стратегии должны взаимно отмениться, если базовая недавно размечена как удаленная NO_SERVICE и сервисные +
    # складские размечены недавно NO_BASIC то надо снимать и то, и то (вообще в такую ситуацию мы не можем попасть,
    # но если звезды сойдутся, то это надо спасти оффер)
    make_actual_service_offers_data(
        7, 'FreshNoServiceAndNoBasicAreDuoRevertable', 50, 507507, TS_SERVICE_WITHOUT_BASIC, TS_FRESH, rgb=DTC.WHITE,
        strategy=remove_strategy.NO_BASIC),
    # стратегии должны взаимно отмениться, если базовая размечена как удаленная NO_SERVICE и сервисные + складские
    # размечены NO_BASIC и пора всех их удалить то надо снимать и то, и то (вообще в такую ситуацию мы не можем попасть,
    # но если звезды сойдутся, то это надо спасти оффер)
    make_actual_service_offers_data(
        7, 'OldNoServiceAndNoBasicAreDuoRevertable', 50, 507507, TS_SERVICE_WITHOUT_BASIC, TS_FOR_REMOVED,
        rgb=DTC.WHITE, strategy=remove_strategy.NO_BASIC),
    # стратегия NO_SERVICE не должна отмениться, если есть сервисные + складские, но они недавно размечены
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах не появится этих офферов, потому что стратегию снова рассчитать
    # не выйдет, но и в топике с изменением removed их не будет
    make_actual_service_offers_data(
        7, 'FreshNoServiceAndInvalidMigrationAreNotDuoRevertable', 70, 507507, TS_FRESH, TS_FRESH, rgb=DTC.WHITE,
        strategy=remove_strategy.INVALID_MIGRATION),
    # стратегия NO_SERVICE не должна отмениться, если есть сервисные + складские, и они давно размечены
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах появятся эти оффера, потому что расчитается стратегия REMOVED
    make_actual_service_offers_data(
        7, 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable', 70, 507507, TS_BASIC_WITHOUT_SERVICE, TS_NOT_FRESH,
        rgb=DTC.WHITE, strategy=remove_strategy.INVALID_MIGRATION),
    # стратегия NO_BASIC не должна отмениться с сервисных / складских, если есть базовая недавно размеченая
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах не появится этих офферов, потому что стратегию снова
    # рассчитать не выйдет, но и в топике с изменением removed их не будет
    make_actual_service_offers_data(
        7, 'FreshNoBasicAndInvalidMigrationAreNotDuoRevertable', 50, 507507, TS_SERVICE_WITHOUT_BASIC, TS_FRESH,
        rgb=DTC.WHITE, strategy=remove_strategy.NO_BASIC),
    # стратегия NO_BASIC не должна отмениться  с сервисных / складских, если есть базовая и она давно размечена
    # INVALID_MIGRATION (которая НЕ снимется) в таблицах появятся эти оффера, потому что расчитается стратегия REMOVED
    make_actual_service_offers_data(
        7, 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable', 50, 507507, TS_SERVICE_WITHOUT_BASIC, TS_NOT_FRESH,
        rgb=DTC.WHITE, strategy=remove_strategy.NO_BASIC),
    make_actual_service_offers_data(6, 'PureVerticalApproved', 60, 0, TS_NOT_FRESH, rgb=DTC.VERTICAL_GOODS_ADS),
    make_actual_service_offers_data(6, 'PureVerticalNotApproved', 60, 0, TS_NOT_FRESH, rgb=DTC.VERTICAL_GOODS_ADS),
    make_actual_service_offers_data(
        6, 'PureVerticalNotApprovedRecently', 60, 0, TS_NOT_FRESH, rgb=DTC.VERTICAL_GOODS_ADS),
    make_actual_service_offers_data(6, 'PureVerticalWithoutAnyFlag', 60, 0, TS_NOT_FRESH, rgb=DTC.VERTICAL_GOODS_ADS),

    # оферы Еды
    make_actual_service_offers_data(
        10, 'EatsFreshOffer', 100, 705705, TS_FRESH, TS_FRESH,
        rgb=DTC.EDA),
    # маркетные офферы с и без базового контента
    make_actual_service_offers_data(11, 'MarketOfferWithAllContent', 110, 110110, TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, rgb=DTC.WHITE),
    make_actual_service_offers_data(11, 'MarketOfferWithBasicContent', 110, 110110, TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, rgb=DTC.WHITE),
    make_actual_service_offers_data(11, 'MarketOfferWithServiceContent', 110, 110110, TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, rgb=DTC.WHITE),
    make_actual_service_offers_data(11, 'MarketOfferWithoutAnyContentNotFresh', 110, 110110, TS_MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT, rgb=DTC.WHITE),
    make_actual_service_offers_data(11, 'MarketOfferWithoutAnyContentFresh', 110, 110110, TS_FRESH, rgb=DTC.WHITE),
]

ACTUAL_SERVICE_OFFERS = [{
    'business_id': business_id,
    'shop_sku': make_offer_id(shop_sku, system),
    'shop_id': shop_id,
    'warehouse_id': warehouse_id,
    'outlet_id': 0,
    'identifiers': DTC.OfferIdentifiers(
        business_id=business_id,
        offer_id=make_offer_id(shop_sku, system),
        shop_id=shop_id,
        warehouse_id=warehouse_id,
    ).SerializeToString(),
    'meta': create_meta(ts_created, color=rgb, scope=DTC.SERVICE, ts_first_added=ts_first_added, system=system).SerializeToString(),
    'status': DTC.OfferStatus(
        removed=None if removed_ts is None else DTC.Flag(
            flag=True,
            meta=create_update_meta(removed_ts)
        ),
        remove_strategy=None if strategy is None else DTC.RemoveStrategy(
            trash_strategy=strategy,
            meta=create_update_meta(removed_ts)
        ),
        disabled=None if stock_ts is None else [
            DTC.Flag(
                flag=False,
                meta=create_update_meta(stock_ts, source=DTC.MARKET_STOCK),
            ),
        ]
    ).SerializeToString(),
    'state_flags': None if removed_ts is None else 1,
} for
    business_id,
    shop_sku,
    shop_id,
    warehouse_id,
    ts_created,
    removed_ts,
    rgb,
    stock_ts,
    strategy,
    ts_first_added in ACTUAL_SERVICE_OFFERS_DATA for system in [None , True]
]

ACTUAL_SERVICE_SEARCH_OFFERS = [{
    'business_id': offer[0],
    'shop_sku': make_offer_id(offer[1], system),
    'shop_id': offer[2],
    'warehouse_id': offer[3],
    'outlet_id': 0,
} for offer in ACTUAL_SERVICE_OFFERS_DATA for system in [None, True]]

ERASED_ACTUALS = {
    # Удалится, т.к. в шопсдат такого склада нет
    (1, 'InvalidWarehouse', 1, 654322),
    # Удалится, т.к. склад нулевой
    (1, 'ZeroWarehouse', 1, 0),
    # Удалится, т.к. помечен как удаленный
    (1, 'RemovedOffer', 1, 145),
    # Удаляем, не смотря на наличие маркетного стока, потому что помечен к удалению
    (1, 'RemovedFFOfferWithMarketStocks', 1, 145),
    # Удаляем, т.к. помечен к удалению давно и стратегия не отменилась
    (7, 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable', 70, 507507),
    # Удалится, т.к. помечен к удалению давно и стратегия не отменилась
    (7, 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable', 50, 507507),
}
REMOVED_ACTUALS = {
    # Удалится, т.к. нет базовой части
    (1, 'ServiceWithoutBasic', 1, 145),
    # Удалится, т.к. по информации из шопсдат этот магазин в другом бизнесе
    (2, 'InvalidMigration', 1, 145),
    (2, 'InvalidMigration', 1, 147),
    (3, 'InvalidMigration', 1, 0),
    # Удалятся, т.к. это тестовые магазины попадающие под регулярную чистку от давно скрытых офферов
    (3, 'TestingDisabledOld', 200, 145),
    (3, 'TestingDisabledOld', 200, 123456),
    (3, 'TestingDisabledOld', 300, 345678),
    # Удалятся, т.к. соответствующие сервисные директа давно скрыты
    (6, 'DirectAndWhiteFeedDisabled', 10, 0),
    (6, 'DirectSiteDisabled', 10, 0),
    (6, 'DirectWithDisabledShop', 40, 0),
    # Удалятся, так как сервисные отмечены DIRECT_DISABLED_BY_PARTNER_FEED
    (6, 'DirectFreshNoService', 90, 0),
    # чисто-ТВ со старым vertical_approved=false
    (6, 'PureVerticalNotApproved', 60, 0),
    # Удалится, т.к. мигрировал в другой бизнес
    (2, 'MigratedOfferNoServiceRemained', 1, 145),
    # Удалится, т.к. мигрировал в другой бизнес
    (2, 'MigratedOfferServiceRemained', 1, 145),
    # удалятся вместе с базовой частью без контента
    (11, 'MarketOfferWithServiceContent', 110, 110110),
    (11, 'MarketOfferWithoutAnyContentNotFresh', 110, 110110),
}
REMAINED_ACTUALS = set([(
    basic['business_id'],
    basic['shop_sku'],
    basic['shop_id'],
    basic['warehouse_id'],
) for basic in ACTUAL_SERVICE_OFFERS]) - ERASED_ACTUALS


def make_offer(business_id, offer_id, shops=None, warehouses=None, basic_removed=None):
    def _generate_status(is_removed, strategy):
        status = None
        if is_removed:
            status = {
                'removed': {
                    'flag': True,
                },
                'remove_strategy': {
                    'trash_strategy': strategy,
                } if strategy else None,
            }
        elif is_removed is False:
            status = {
                'removed': {
                    'flag': False,
                },
            }
        return status

    result = {}

    is_basic_removed = None
    basic_remove_strategy = None
    if basic_removed:
        is_basic_removed, basic_remove_strategy = basic_removed

    status = _generate_status(is_basic_removed, basic_remove_strategy)

    result['basic'] = {
        'identifiers': {
            'business_id': business_id,
            'offer_id': offer_id,
        },
        'meta': {
            'scope': DTC.BASIC,
        },
        'status': status
    }

    if shops:
        service = {}
        for shop_id, is_removed, strategy in shops:
            status = _generate_status(is_removed, strategy)

            service[shop_id] = {
                'identifiers': {
                    'business_id': business_id,
                    'shop_id': shop_id,
                    'offer_id': offer_id,
                },
                'meta': {
                    'scope': DTC.SERVICE,
                },
                'status': status,
            }
        result['service'] = IsProtobufMap(service)

    if warehouses:
        actual = {}
        for shop_id, warehouse_ids in warehouses:
            actual_warehouses = {}
            for warehouse_id, is_removed, strategy in warehouse_ids:
                status = _generate_status(is_removed, strategy)
                actual_warehouses[warehouse_id] = {
                    'identifiers': {
                        'business_id': business_id,
                        'shop_id': shop_id,
                        'offer_id': offer_id,
                        'warehouse_id': warehouse_id,
                    },
                    'meta': {
                        'scope': DTC.SERVICE,
                    },
                    'status': status
                }
            actual[shop_id] = {
                'warehouse': IsProtobufMap(actual_warehouses)
            }
        result['actual'] = IsProtobufMap(actual)

    return result


OFFERS_TO_BE_SEND_IN_DATACAMP_WITH_UPDATED_FOR_REMOVE_FLAG = [
    make_offer(
        2,
        'MigratedOfferNoServiceRemained',
        shops=[(1, True, remove_strategy.INVALID_MIGRATION)],
        warehouses=[(1, [(145, True, remove_strategy.INVALID_MIGRATION)])]
    ),
    make_offer(
        2,
        'MigratedOfferServiceRemained',
        shops=[(1, True, remove_strategy.INVALID_MIGRATION)],
        warehouses=[(1, [(145, True, remove_strategy.INVALID_MIGRATION)])]
    ),
    make_offer(
        1,
        'PublishOriginalPartnerContentDuplicate_1',
        basic_removed=(True, remove_strategy.OFFER_DUPLICATED),
        shops=[(1, True, remove_strategy.OFFER_DUPLICATED)],
    ),
    make_offer(
        1,
        'NotPublishOriginalPartnerContentDuplicate_1',
        basic_removed=(True, remove_strategy.OFFER_DUPLICATED),
        shops=[(1, True, remove_strategy.OFFER_DUPLICATED)],
    ),
    make_offer(
        1,
        'NotPublishOriginalPartnerContentDuplicate_2',
        basic_removed=(True, remove_strategy.OFFER_DUPLICATED),
        shops=[(1, True, remove_strategy.OFFER_DUPLICATED)],
    ),
    make_offer(
        1,
        'BasicOnlyOriginalPartnerContentDuplicate_2',
        basic_removed=(True, remove_strategy.OFFER_DUPLICATED),
    ),
    make_offer(
        1,
        'ServiceWithoutBasic',
        shops=[(1, True, remove_strategy.NO_BASIC)],
        warehouses=[(1, [(145, True, remove_strategy.NO_BASIC)])],
    ),
    make_offer(
        2,
        'InvalidMigration',
        shops=[(1, True, remove_strategy.INVALID_MIGRATION)],
        warehouses=[(1, [(145, True, remove_strategy.INVALID_MIGRATION), (147, True, remove_strategy.INVALID_MIGRATION)])]
    ),
    make_offer(
        3,
        'InvalidMigration',
        shops=[(1, True, remove_strategy.INVALID_MIGRATION)],
        warehouses=[(1, [(0, True, remove_strategy.INVALID_MIGRATION)])]
    ),
    make_offer(
        3,
        'TestingDisabledOld',
        shops=[(200, True, remove_strategy.DISABLED_BY_PARTNER), (300, True, remove_strategy.DISABLED_BY_PARTNER)],
        warehouses=[(200, [(123456, True, remove_strategy.DISABLED_BY_PARTNER), (145, True, remove_strategy.DISABLED_BY_PARTNER)]),
                    (300, [(345678, True, remove_strategy.DISABLED_BY_PARTNER)])]
    ),
    make_offer(
        6,
        'DirectAndWhiteFeedDisabled',
        shops=[(10, True, remove_strategy.DIRECT_DISABLED_BY_PARTNER_FEED)],
        warehouses=[(10, [(0, True, remove_strategy.DIRECT_DISABLED_BY_PARTNER_FEED)])]
    ),
    make_offer(
        6,
        'DirectSiteDisabled',
        basic_removed=(True, remove_strategy.NO_SERVICE),
        shops=[(10, True, remove_strategy.DIRECT_DISABLED_BY_PARTNER_SITE)],
        warehouses=[(10, [(0, True, remove_strategy.DIRECT_DISABLED_BY_PARTNER_SITE)])]
    ),
    make_offer(
        6,
        'DirectWithDisabledShop',
        basic_removed=(True, remove_strategy.NO_SERVICE),
    ),
    make_offer(
        6,
        'DirectFreshNoService',
        basic_removed=(True, remove_strategy.NO_SERVICE),
        warehouses=[(90, [(0, True, remove_strategy.DIRECT_DISABLED_BY_PARTNER_FEED)])]
    ),
    make_offer(
        7,
        'RemoveNoServiceStrategyFromBasic',
        basic_removed=(False, None),
    ),
    make_offer(
        7,
        'RemoveNoBasicStrategyFromService',
        shops=[(50, False, None)],
        warehouses=[(50, [(507507, False, None)])]
    ),
    make_offer(
        7,
        'FreshNoServiceAndNoBasicAreDuoRevertable',
        basic_removed=(False, None),
        shops=[(50, False, None)],
        warehouses=[(50, [(507507, False, None)])]
    ),
    make_offer(
        7,
        'OldNoServiceAndNoBasicAreDuoRevertable',
        basic_removed=(False, None),
        shops=[(50, False, None)],
        warehouses=[(50, [(507507, False, None)])]
    ),
    make_offer(
        6,
        'PureVerticalNotApproved',
        basic_removed=(True, remove_strategy.NO_SERVICE),
        shops=[(60, True, remove_strategy.PURE_VERTICAL_NOT_VERTICAL_APPROVED)],
        warehouses=[(60, [(0, True, remove_strategy.PURE_VERTICAL_NOT_VERTICAL_APPROVED)])]
    ),
    make_offer(
        9,
        'RemoveOriginalPartnerContentDuplicatesStrategyFromTheMostRecentOffer',
        basic_removed=(False, None),
        shops=[(80, False, None)],
    ),
    make_offer(
        9,
        'RemoveOriginalPartnerContentDuplicatesStrategyFromTheOnlyOffer',
        basic_removed=(False, None),
        shops=[(80, False, None)],
    ),
    make_offer(
        10,
        'EatsNotFreshOffer',
        basic_removed=(True, remove_strategy.NO_SERVICE),
        shops=[(100, True, remove_strategy.EATS_UNAVAILABLE_OFFER)],
    ),
    make_offer(
        11,
        'MarketOfferWithServiceContent',
        basic_removed=(True, remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT),
        shops=[(110, True, remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT)],
        warehouses=[(110, [(110110, True, remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT)])],
    ),
    make_offer(
        11,
        'MarketOfferWithoutAnyContentNotFresh',
        basic_removed=(True, remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT),
        shops=[(110, True, remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT)],
        warehouses=[(110, [(110110, True, remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT)])],
    ),
]


def make_config(yt_server, log_broker_stuff, topic, tvm_api):
    config = RoutinesConfigMock(
        yt_server=yt_server,
        log_broker_stuff=log_broker_stuff,
        config={
            'general': {
                'color': 'white',
                'yt_home': '//home/datacamp/united'
            },
            'routines': {
                'enable_datacamp_cleaner': True,
                'remove_vertical_not_approved': True,
                'datacamp_cleaner_topic': topic,
                'delete_rows_limit': 2,
                'enable_remove_disabled_offers': True,
                'shops_ids_for_remove_disabled': '100,200,300',
                'datacamp_cleaner_enable_revert_strategies': True,
            },
            'cleaner': {
                'enable_remove_market_offers_without_basic_original_partner_content': True,
                'enable_remove_original_partner_content_duplicates': True,
            },
            'yt': {
                'map_reduce_proxies': [yt_server.get_yt_client().config["proxy"]["url"]],
                'datacamp_cleaner_dir': 'trash'
            },
            'tvm': {
                'client_id': SELF_TVM_ID,
                'allowed_ids': [GOOD_SERVICE_TVM_ID],
                'port': tvm_api.port,
            }
        })
    return config


@pytest.fixture(scope='module')
def config(yt_server, log_broker_stuff, datacamp_cleaner_topic, tvm_api):
    return make_config(yt_server, log_broker_stuff, datacamp_cleaner_topic.topic, tvm_api)


@pytest.fixture(scope='module')
def http_config(yt_server, log_broker_stuff, datacamp_cleaner_topic_http, tvm_api):
    return make_config(yt_server, log_broker_stuff, datacamp_cleaner_topic_http.topic, tvm_api)


@pytest.fixture(scope='module')
def partners_table(yt_server, config):
    return DataCampPartnersTable(yt_server, config.yt_partners_tablepath, data=PARTNERS)


@pytest.fixture(scope='module')
def basic_offers_table(yt_server, config):
    return DataCampBasicOffersTable(yt_server, config.yt_basic_offers_tablepath, data=BASIC_OFFERS)


@pytest.fixture(scope='module')
def service_offers_table(yt_server, config):
    return DataCampServiceOffersTable(yt_server, config.yt_service_offers_tablepath, data=SERVICE_OFFERS)


@pytest.fixture(scope='module')
def actual_service_offers_table(yt_server, config):
    return DataCampServiceOffersTable(yt_server, config.yt_actual_service_offers_tablepath, data=ACTUAL_SERVICE_OFFERS)


@pytest.fixture(scope='module')
def basic_search_offers_table(yt_server, config):
    return DataCampBasicSearchOffersTable(yt_server, config.yt_basic_search_offers_tablepath, data=BASIC_SEARCH_OFFERS)


@pytest.fixture(scope='module')
def service_search_offers_table(yt_server, config):
    return DataCampServiceSearchOffersTable(yt_server, config.yt_service_search_offers_tablepath, data=SERVICE_SEARCH_OFFERS)


@pytest.fixture(scope='module')
def actual_service_search_offers_table(yt_server, config):
    return DataCampActualServiceSearchOffersTable(yt_server, config.yt_actual_service_search_offers_tablepath, data=ACTUAL_SERVICE_SEARCH_OFFERS)


@pytest.fixture(scope='module')
def business_status_table(yt_server, config):
    return DataCampBusinessStatusTable(yt_server, config.yt_business_status_tablepath, data=BUSINESS_STATUS)


@pytest.fixture(scope='module')
def datacamp_cleaner_topic(log_broker_stuff):
    topic = LbkTopic(log_broker_stuff)
    return topic


@pytest.fixture(scope='module')
def datacamp_cleaner_topic_http(log_broker_stuff):
    topic = LbkTopic(log_broker_stuff)
    return topic


@pytest.yield_fixture(scope='module')
def routines(
    yt_server,
    config,
    partners_table,
    basic_offers_table,
    service_offers_table,
    actual_service_offers_table,
    datacamp_cleaner_topic,
    business_status_table,
    basic_search_offers_table,
    service_search_offers_table,
    actual_service_search_offers_table
):
    resources = {
        'config': config,
        'partners_table': partners_table,
        'basic_offers_table': basic_offers_table,
        'service_offers_table': service_offers_table,
        'actual_service_offers_table': actual_service_offers_table,
        'datacamp_cleaner_topic': datacamp_cleaner_topic,
        'business_status_table': business_status_table,
        'basic_search_offers_table': basic_search_offers_table,
        'service_search_offers_table': service_search_offers_table,
        'actual_service_search_offers_table': actual_service_search_offers_table,
    }
    with DatacampCleanerEnv(yt_server, **resources) as routines_env:
        yield routines_env


@pytest.yield_fixture(scope='module')
def routines_http(
    yt_server,
    http_config,
    partners_table,
    basic_offers_table,
    service_offers_table,
    actual_service_offers_table,
    basic_search_offers_table,
    service_search_offers_table,
    actual_service_search_offers_table,
    datacamp_cleaner_topic_http,
    united_offer_ids_table,
    service_offer_ids_table,
):
    resources = {
        'partners_table': partners_table,
        'basic_offers_table': basic_offers_table,
        'service_offers_table': service_offers_table,
        'actual_service_offers_table': actual_service_offers_table,
        'basic_search_offers_table': basic_search_offers_table,
        'service_search_offers_table': service_search_offers_table,
        'actual_service_search_offers_table': actual_service_search_offers_table,
        'config': http_config,
        'datacamp_cleaner_topic_http': datacamp_cleaner_topic_http,
        'united_offer_ids_table': united_offer_ids_table,
        'service_offer_ids_table': service_offer_ids_table,
    }
    with HttpRoutinesTestEnv(yt_server, **resources) as routines_http_env:
        yield routines_http_env


@pytest.yield_fixture(scope='module')
def basic_trash(yt_server, routines, config):
    yt_client = yt_server.get_yt_client()
    return list(yt_client.read_table(yt.ypath_join(config.datacamp_cleaner_dir, 'recent', 'basic')))


@pytest.yield_fixture(scope='module')
def service_trash(yt_server, routines, config):
    yt_client = yt_server.get_yt_client()
    return list(yt_client.read_table(yt.ypath_join(config.datacamp_cleaner_dir, 'recent', 'service')))


@pytest.yield_fixture(scope='module')
def actual_trash(yt_server, routines, config):
    yt_client = yt_server.get_yt_client()
    return list(yt_client.read_table(yt.ypath_join(config.datacamp_cleaner_dir, 'recent', 'actual')))


@pytest.fixture(scope='module')
def united_offer_ids_table(yt_server):
    return YtTableResource(
        yt_server,
        '//home/basic_offer_ids' + str(uuid.uuid4()),
        attributes=dict(
            dynamic=False,
            external=False,
            schema=[
                dict(name='business_id', type='uint32'),
                dict(name='offer_id', type='string'),
            ]
        ),
        data=[
            {'business_id': 4, 'offer_id': 'RemoveUnitedByIdsTable'},
        ])


@pytest.fixture(scope='module')
def service_offer_ids_table(yt_server):
    return YtTableResource(
        yt_server,
        '//home/service_offer_ids' + str(uuid.uuid4()),
        attributes=dict(
            dynamic=False,
            external=False,
            schema=[
                dict(name='business_id', type='uint32'),
                dict(name='offer_id', type='string'),
                dict(name='shop_id', type='uint32'),
            ]
        ),
        data=[
            {'business_id': 4, 'offer_id': 'RemoveServiceByIdsTable', 'shop_id': 1111},
        ])


@pytest.yield_fixture(scope='module')
def original_partner_content_hash(yt_server, routines, config):
    yt_client = yt_server.get_yt_client()
    return list(yt_client.read_table(yt.ypath_join(config.datacamp_cleaner_dir, 'recent', 'original_partner_content_hash')))


@pytest.yield_fixture(scope='module')
def original_partner_content_hash_duplicates(yt_server, routines, config):
    yt_client = yt_server.get_yt_client()
    return list(yt_client.read_table(yt.ypath_join(config.datacamp_cleaner_dir, 'recent', 'original_partner_content_hash_duplicates')))


@pytest.yield_fixture(scope='module')
def table_with_duplicates_count_grouped_by_business_id(yt_server, routines, config):
    yt_client = yt_server.get_yt_client()
    return list(yt_client.read_table(yt.ypath_join(config.datacamp_cleaner_dir, 'recent', 'original_partner_content_hash_duplicates_count_by_business_id')))


@pytest.yield_fixture(scope='module')
def to_remove(yt_server, routines, config):
    yt_client = yt_server.get_yt_client()
    return list(yt_client.read_table(yt.ypath_join(config.datacamp_cleaner_dir, 'recent', 'remove')))


@pytest.yield_fixture(scope='module')
def datacamp_cleaner_topic_data(routines, datacamp_cleaner_topic):
    result = datacamp_cleaner_topic.read(count=1)

    # проверяем, что в топике больше нет данных, которые мы можем вычитать
    assert_that(datacamp_cleaner_topic, HasNoUnreadData())

    return result


def test_trash_size(basic_trash, service_trash, actual_trash, to_remove):
    """ Проверяем размер собранного мусора """
    assert_that(len(basic_trash), equal_to(len(ERASED_BASICS) + len(REMOVED_BASICS)))
    assert_that(len(service_trash), equal_to(len(ERASED_SERVICES) + len(REMOVED_SERVICES)))
    assert_that(len(actual_trash), equal_to(len(ERASED_ACTUALS) + len(REMOVED_ACTUALS)))
    assert_that(len(to_remove), equal_to(len(OFFERS_TO_BE_SEND_IN_DATACAMP_WITH_UPDATED_FOR_REMOVE_FLAG)))


def test_valid_offer_stays_alive(basic_trash, service_trash, actual_trash):
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ValidOfferStaysAlive',
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledFresh',
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledButNotInCleaningShops',
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingNotDisabled',
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectAndWhiteFeedDisabled',
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'MarketOfferWithDirectColor-O_O',
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalApproved',
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalNotApprovedRecently',
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalWithoutAnyFlag',
        }),
    )))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ValidOfferStaysAlive',
            'shop_id': 1,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingNotDisabled',
            'shop_id': 200,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledFresh',
            'shop_id': 200,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledButNotInCleaningShops',
            'shop_id': 3,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectAndWhiteFeedDisabled',
            'shop_id': 20,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectAndWhiteFeedDisabled',
            'shop_id': 30,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalApproved',
            'shop_id': 60,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalNotApprovedRecently',
            'shop_id': 60,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalWithoutAnyFlag',
            'shop_id': 60,
            'warehouse_id': 0,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ValidOfferStaysAlive',
            'shop_id': 1,
            'warehouse_id': 145,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingNotDisabled',
            'shop_id': 200,
            'warehouse_id': 145,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledFresh',
            'shop_id': 200,
            'warehouse_id': 123456,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledButNotInCleaningShops',
            'shop_id': 3,
            'warehouse_id': 789789,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectAndWhiteFeedDisabled',
            'shop_id': 20,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectAndWhiteFeedDisabled',
            'shop_id': 30,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalApproved',
            'shop_id': 60,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalNotApprovedRecently',
            'shop_id': 60,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalWithoutAnyFlag',
            'shop_id': 60,
            'warehouse_id': 0,
        }),
    )))


def test_migrated_offers(service_trash, actual_trash):
    """ Удаляем мигрировавшие под другой бизнес магазины """
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 2,
            'offer_id': 'MigratedOfferNoServiceRemained',
            'shop_id': 1,
            'warehouse_id': 0,
            'strategy': remove_strategy.INVALID_MIGRATION,
        }),
        has_entries({
            'business_id': 2,
            'offer_id': 'MigratedOfferServiceRemained',
            'shop_id': 1,
            'warehouse_id': 0,
            'strategy': remove_strategy.INVALID_MIGRATION,
        }),
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 70,
            'warehouse_id': 0,
            'strategy': remove_strategy.MIGRATED,
        }),
    ))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 2,
            'offer_id': 'MigratedOfferServiceRemained',
            'shop_id': 2,
            'warehouse_id': 0,
        }),
    )))
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 2,
            'offer_id': 'MigratedOfferNoServiceRemained',
            'shop_id': 1,
            'warehouse_id': 145,
            'strategy': remove_strategy.INVALID_MIGRATION,
        }),
        has_entries({
            'business_id': 2,
            'offer_id': 'MigratedOfferServiceRemained',
            'shop_id': 1,
            'warehouse_id': 145,
            'strategy': remove_strategy.INVALID_MIGRATION,
        }),
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 70,
            'warehouse_id': 507507,
            'strategy': remove_strategy.MIGRATED,
        }),
    ))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 2,
            'offer_id': 'MigratedOfferServiceRemained',
            'shop_id': 2,
            'warehouse_id': 145,
        }),
    )))


def test_no_service_after_migrated(basic_trash):
    """ Если после удаления мигрировавших сервисных частей осталась только базовая, то удаляем ее (по TTL от ts_created)
    """
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 2,
            'offer_id': 'MigratedOfferServiceRemained',
        }),
    )))
    assert_that(basic_trash, has_items(
        is_not(has_entries({
            'business_id': 2,
            'offer_id': 'MigratedOfferNoServiceRemained',
            'strategy': remove_strategy.NO_SERVICE,
        })),
    ))


def test_no_service_trash_strategy_delete_from_basic(basic_trash, service_trash, actual_trash):
    """Тест проверяет, что стратегия удаления NO_SERVICE убирается из базового оффера,
    если есть хоть какая-то сервисная / складская, которая не помечена к удалению"""
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'RemoveNoServiceStrategyFromBasic',
        }),
    )))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'RemoveNoServiceStrategyFromBasic',
            'shop_id': 50,
            'warehouse_id': 0,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'RemoveNoServiceStrategyFromBasic',
            'shop_id': 50,
            'warehouse_id': 507507,
        }),
    )))


def test_no_service_trash_strategy_dont_delete_from_basic(service_trash, datacamp_cleaner_topic_data):
    """Тест проверяет, что стратегия удаления NO_SERVICE не убирается из базового оффера,
    если все сервисные / складские части помечены удаленными
    также проверяет, что стратегия удаления NO_SERVICE не убирается из базового оффера,
    если у него нету сервисных и складских части помечены удаленными"""
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'DontRemoveNoServiceStrategyFromBasic_1',
            'shop_id': 50,
            'warehouse_id': 0,
            'strategy': remove_strategy.REMOVED,
        }),
    ))
    assert_that(datacamp_cleaner_topic_data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    7,
                    'DontRemoveNoServiceStrategyFromBasic_1',
                    basic_removed=(False, None),
                ),
            ]
        }]
    })))
    assert_that(datacamp_cleaner_topic_data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    7,
                    'DontRemoveNoServiceStrategyFromBasic_2',
                    basic_removed=(False, None),
                ),
            ]
        }]
    })))


def test_no_basic_trash_strategy_delete_from_service(basic_trash, service_trash, actual_trash):
    """Тест проверяет, что стратегия удаления NO_BASIC убирается из сервисных и складских офферов,
    если есть хоть какая-то сервисная / складская, которая не помечена к удалению"""
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'RemoveNoBasicStrategyFromService',
        }),
    )))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'RemoveNoBasicStrategyFromService',
            'shop_id': 50,
            'warehouse_id': 0,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'RemoveNoBasicStrategyFromService',
            'shop_id': 50,
            'warehouse_id': 507507,
        }),
    )))


def test_no_basic_trash_strategy_dont_delete_from_service(basic_trash, datacamp_cleaner_topic_data):
    """Тест проверяет, что стратегия удаления NO_BASIC не убирается из сервисных / складских офферов,
    если базовая часть помечена удаленной"""
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'DontRemoveNoBasicStrategyFromService_1',
            'strategy': remove_strategy.REMOVED,
        }),
    ))
    assert_that(datacamp_cleaner_topic_data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    7,
                    'DontRemoveNoBasicStrategyFromService_1',
                    shops=[(50, False, None)],
                ),
            ]
        }]
    })))
    assert_that(datacamp_cleaner_topic_data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    7,
                    'DontRemoveNoBasicStrategyFromService_1',
                    warehouses=[(50, [(507507, False, None)])],
                ),
            ]
        }]
    })))


def test_no_basic_and_no_service_fresh_trash_strategies_are_duo_revertable(basic_trash, service_trash, actual_trash):
    """Тест проверяет, что недавно проставленные стратегии NO_BASIC и NO_SERVICE должны взаимо отмениться,
       если базовая размечена как удаленная NO_SERVICE и сервисные + складские размечены NO_BASIC и эта пометка появилась недавно
       то надо снимать и то, и то (вообще в такую ситуацию мы не можем попасть, но если звезды сойдутся, то это надо спасти оффер)
    """
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoServiceAndNoBasicAreDuoRevertable',
            'strategy': remove_strategy.NO_SERVICE,
        }),
    )))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoServiceAndNoBasicAreDuoRevertable',
            'shop_id': 50,
            'warehouse_id': 0,
            'strategy': remove_strategy.NO_BASIC,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoServiceAndNoBasicAreDuoRevertable',
            'shop_id': 50,
            'warehouse_id': 507507,
            'strategy': remove_strategy.NO_BASIC,
        }),
    )))


def test_no_basic_and_no_service_old_trash_strategies_are_duo_revertable(basic_trash, service_trash, actual_trash):
    """Тест проверяет, что даже давно проставленные (уже должна удалять оффер) стратегии NO_BASIC и NO_SERVICE должны взаимно отмениться,
       если базовая размечена как удаленная NO_SERVICE и сервисные + складские размечены NO_BASIC и эта пометка появилась недавно
       то надо снимать и то, и то (вообще в такую ситуацию мы не можем попасть, но если звезды сойдутся, то это надо спасти оффер)
    """
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldoServiceAndNoBasicAreDuoRevertable',
            'strategy': remove_strategy.NO_SERVICE,
        }),
    )))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoServiceAndNoBasicAreDuoRevertable',
            'shop_id': 50,
            'warehouse_id': 0,
            'strategy': remove_strategy.NO_BASIC,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoServiceAndNoBasicAreDuoRevertable',
            'shop_id': 50,
            'warehouse_id': 507507,
            'strategy': remove_strategy.NO_BASIC,
        }),
    )))


def test_no_service_and_invalid_migration_fresh_trash_strategies_are_not_duo_revertable(
        basic_trash,
        service_trash,
        actual_trash,
        datacamp_cleaner_topic_data
):
    """Тест проверяет, что стратегия NO_SERVICE не должна отмениться, если есть сервисные + складские,
       но они недавно размечены INVALID_MIGRATION (которая НЕ снимется)
       в таблицах не появится этих офферов, потому что стратегию снова рассчитать не выйдет,
       но и в топике с изменением removed их не будет
    """
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoServiceAndInvalidMigrationAreNotDuoRevertable',
            'strategy': remove_strategy.NO_SERVICE,
        }),
    )))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoServiceAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 70,
            'warehouse_id': 0,
            'strategy': remove_strategy.INVALID_MIGRATION,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoServiceAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 70,
            'warehouse_id': 507507,
            'strategy': remove_strategy.INVALID_MIGRATION,
        }),
    )))

    assert_that(datacamp_cleaner_topic_data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    7,
                    'FreshNoServiceAndInvalidMigrationAreNotDuoRevertable',
                    basic_removed=(True, remove_strategy.NO_SERVICE),
                    shops=[(70, True, remove_strategy.INVALID_MIGRATION)],
                    warehouses=[(70, [(507507, True, remove_strategy.INVALID_MIGRATION)])],
                ),
            ]
        }]
    })))


def test_no_service_and_invalid_migration_old_trash_strategies_are_not_duo_revertable(basic_trash, service_trash, actual_trash):
    """Тест проверяет, что стратегия NO_SERVICE не должна отмениться, если есть сервисные + складские,
       и они давно размечены INVALID_MIGRATION (которая НЕ снимется)
       в таблицах появятся эти оффера, потому что расчитается стратегия REMOVED
    """
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable',
            'strategy': remove_strategy.REMOVED,
        }),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 70,
            'warehouse_id': 0,
            'strategy': remove_strategy.MIGRATED,
        }),
    ))
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoServiceAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 70,
            'warehouse_id': 507507,
            'strategy': remove_strategy.MIGRATED,
        }),
    ))


def test_no_basic_and_invalid_migration_fresh_trash_strategies_are_not_duo_revertable(
        basic_trash,
        service_trash,
        actual_trash,
        datacamp_cleaner_topic_data
):
    """Тест проверяет, что стратегия NO_BASIC не должна отмениться на сервисных + складских,
       если есть базовая недавно размеченная INVALID_MIGRATION (которая НЕ снимется)
       в таблицах не появится этих офферов, потому что стратегию снова рассчитать не выйдет,
       но и в топике с изменением removed их не будет
    """
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoBasicAndInvalidMigrationAreNotDuoRevertable',
            'strategy': remove_strategy.INVALID_MIGRATION,
        }),
    )))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoBasicAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 50,
            'warehouse_id': 0,
            'strategy': remove_strategy.NO_BASIC,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'FreshNoBasicAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 50,
            'warehouse_id': 507507,
            'strategy': remove_strategy.NO_BASIC,
        }),
    )))

    assert_that(datacamp_cleaner_topic_data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    7,
                    'FreshNoBasicAndInvalidMigrationAreNotDuoRevertable',
                    basic_removed=(True, remove_strategy.INVALID_MIGRATION),
                    shops=[(50, True, remove_strategy.NO_BASIC)],
                    warehouses=[(50, [(507507, True, remove_strategy.NO_BASIC)])],
                ),
            ]
        }]
    })))


def test_no_basic_and_invalid_migration_old_trash_strategies_are_not_duo_revertable(basic_trash, service_trash, actual_trash):
    """Тест проверяет, что стратегия NO_BASIC не должна отмениться на сервисных + складских,
       если есть базовая давно размеченная INVALID_MIGRATION (которая НЕ снимется)
       в таблицах появятся эти оффера, потому что расчитается стратегия REMOVED
    """
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable',
            'strategy': remove_strategy.REMOVED,
        }),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 50,
            'warehouse_id': 0,
            'strategy': remove_strategy.REMOVED,
        }),
    ))
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 7,
            'offer_id': 'OldNoBasicAndInvalidMigrationAreNotDuoRevertable',
            'shop_id': 50,
            'warehouse_id': 507507,
            'strategy': remove_strategy.REMOVED,
        }),
    ))


def test_removed_offers(basic_trash, service_trash, actual_trash):
    """ Удаляем офферы, помеченные как удаленные (по TTL от removed.meta.timestamp) """
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'RemovedOffer',
            'strategy': remove_strategy.REMOVED,
        }),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'RemovedOffer',
            'shop_id': 1,
            'warehouse_id': 0,
            'strategy': remove_strategy.REMOVED,
        }),
    ))
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'RemovedOffer',
            'shop_id': 1,
            'warehouse_id': 145,
            'strategy': remove_strategy.REMOVED,
        }),
    ))


def test_removed_offers_actual_for_ff_warehouses(actual_trash):
    """ Удаляем офферы, помеченные как удаленные даже для FF складов (по TTL от removed.meta.timestamp) """
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'RemovedFFOfferWithMarketStocks',
            'shop_id': 1,
            'warehouse_id': 145,
            'strategy': remove_strategy.REMOVED,
        }),
    ))


def test_basic_without_service(basic_trash):
    """ Базовые офферы, если у них нет сервисной части, не удаляются.
        Стратегия NO_SERVICE отменена для всех офферов, кроме директа и товерных вертикалей. """
    assert_that(basic_trash, has_items(
        is_not(has_entries({
            'business_id': 1,
            'offer_id': 'BasicWithoutService',
        })),
    ))


def test_service_without_basic(basic_trash, service_trash, actual_trash):
    """ Удаляем сервисные офферы, если у них нет базовой части (по TTL от ts_created) """
    assert_that(basic_trash, has_items(
        is_not(has_entries({
            'business_id': 1,
            'offer_id': 'ServiceWithoutBasic',
        })),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ServiceWithoutBasic',
            'shop_id': 1,
            'warehouse_id': 0,
            'strategy': remove_strategy.NO_BASIC,
        }),
    ))
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ServiceWithoutBasic',
            'shop_id': 1,
            'warehouse_id': 145,
            'strategy': remove_strategy.NO_BASIC,
        }),
    ))


def test_service_without_basic_but_with_ff_stock(service_trash, actual_trash):
    """ Не удаляем сервисные офферы, даже если у них нет базовой части (по TTL от ts_created), но есть FF-сток """
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ServiceWithoutBasicButWithFfStock',
            'shop_id': 1,
            'warehouse_id': 0,
            'strategy': remove_strategy.NO_BASIC,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ServiceWithoutBasicButWithFfStock',
            'shop_id': 1,
            'warehouse_id': 145,
            'strategy': remove_strategy.NO_BASIC,
        }),
    )))


def test_zero_warehouse(actual_trash):
    """ Удаляем акутальный оффер с нулевым складом, если есть актуальные части со складами. Не проверяем совпадение
        номера склада с данными в shopsdat, т.к. TTL не вышел. """
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ZeroWarehouse',
            'shop_id': 1,
            'warehouse_id': 0,
            'strategy': remove_strategy.ZERO_WAREHOUSE,
        }),
    ))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ZeroWarehouse',
            'shop_id': 1,
            'warehouse_id': 145,
        }),
    )))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'ZeroWarehouse',
            'shop_id': 1,
            'warehouse_id': 654322,
        }),
    )))


def test_invalid_warehouse(actual_trash):
    """ Удаляем акутальный оффер со складом, который не удалось найти в shopsdat, т.к. TTL вышел """
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'InvalidWarehouse',
            'shop_id': 1,
            'warehouse_id': 654322,
            'strategy': remove_strategy.INVALID_WAREHOUSE,
        }),
    ))


def test_invalid_migration(service_trash, actual_trash):
    """ Сервисные части офферов, лежащие не в том бизнесе (с точки зрения шопсдат) удаляются. Но только если бизнес не
        заблокирован мигратором (косвенный признак активного процесса миграции).
    """
    assert_that(service_trash, has_items(*[has_entries({
        'business_id': business_id,
        'offer_id': 'InvalidMigration',
        'shop_id': 1,
        'strategy': remove_strategy.INVALID_MIGRATION,
    }) for business_id in [2, 3]]))
    assert_that(actual_trash, has_items(*[has_entries({
        'business_id': business_id,
        'offer_id': 'InvalidMigration',
        'shop_id': 1,
        'warehouse_id': warehouse_id,
        'strategy': remove_strategy.INVALID_MIGRATION,
    }) for business_id, warehouse_id in [(2, 145), (2, 147), (3, 0)]]))

    assert_that(service_trash, is_not(has_items(has_entries({
        'business_id': 1,
        'offer_id': 'InvalidMigration',
    }))))
    assert_that(service_trash, is_not(has_items(has_entries({
        'business_id': 2,
        'offer_id': 'InvalidMigrationUnderTtl',
    }))))
    assert_that(service_trash, is_not(has_items(has_entries({
        'business_id': 5,
        'offer_id': 'InvalidMigration',
    }))))
    assert_that(actual_trash, is_not(has_items(has_entries({
        'business_id': 1,
        'offer_id': 'InvalidMigration',
    }))))
    assert_that(actual_trash, is_not(has_items(has_entries({
        'business_id': 2,
        'offer_id': 'InvalidMigrationUnderTtl',
    }))))
    assert_that(actual_trash, is_not(has_items(has_entries({
        'business_id': 5,
        'offer_id': 'InvalidMigration',
    }))))


def test_original_partner_content_hash_duplicates(routines, basic_trash, service_trash, actual_trash, original_partner_content_hash_duplicates):
    """ Удаляем дубликаты офферов """
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'PublishOriginalPartnerContentDuplicate_1',
            'strategy': remove_strategy.OFFER_DUPLICATED,
        }),
    ))
    assert_that(basic_trash, has_items(
        is_not(has_entries({
            'business_id': 1,
            'offer_id': 'PublishOriginalPartnerContentDuplicate_2',
        })),
    ))
    assert_that(basic_trash, has_items(
        is_not(has_entries({
            'business_id': 1,
            'offer_id': 'PublishOriginalPartnerContentDuplicate_3',
        })),
    ))
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicate_1',
            'strategy': remove_strategy.OFFER_DUPLICATED,
        }),
    ))
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicate_2',
            'strategy': remove_strategy.OFFER_DUPLICATED,
        }),
    ))
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'BasicOnlyOriginalPartnerContentDuplicate_2',
            'strategy': remove_strategy.OFFER_DUPLICATED,
        }),
    ))
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicateWithFFstock',
        }))),
    )
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'BasicOnlyOriginalPartnerContentNonDuplicate',
        })),
    ))
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicate_3',
        })),
    ))
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicateWithoutTitle_1',
        })),
    ))
    assert_that(basic_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicateWithoutTitle_2',
        })),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicate_1',
            'shop_id': 1,
            'strategy': remove_strategy.OFFER_DUPLICATED,
        }),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'PublishOriginalPartnerContentDuplicate_1',
            'shop_id': 1,
            'strategy': remove_strategy.OFFER_DUPLICATED,
        }),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicate_2',
            'shop_id': 1,
            'strategy': remove_strategy.OFFER_DUPLICATED,
        }),
    ))
    assert_that(service_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicateWithFFstock',
            'shop_id': 1,
            'warehouse_id': 0,
        })),
    ))
    assert_that(actual_trash, is_not(has_items(
        has_entries({
            'business_id': 1,
            'offer_id': 'NotPublishOriginalPartnerContentDuplicateWithFFstock',
            'shop_id': 1,
            'warehouse_id': 145,
        })),
    ))
    assert_that(original_partner_content_hash_duplicates, has_items(
        has_entries({
            'business_id': 1,
            'shop_sku': 'PublishOriginalPartnerContentDuplicate_1',
        }),
    ))
    assert_that(original_partner_content_hash_duplicates, has_items(
        has_entries({
            'business_id': 1,
            'shop_sku': 'NotPublishOriginalPartnerContentDuplicate_1',
        }),
    ))
    assert_that(original_partner_content_hash_duplicates, has_items(
        has_entries({
            'business_id': 1,
            'shop_sku': 'NotPublishOriginalPartnerContentDuplicate_2',
        }),
    ))
    assert_that(original_partner_content_hash_duplicates, has_items(
        has_entries({
            'business_id': 1,
            'shop_sku': 'BasicOnlyOriginalPartnerContentDuplicate_2',
        }),
    ))
    assert_that(original_partner_content_hash_duplicates, is_not(has_items(
        has_entries({
            'business_id': 1,
            'shop_sku': 'NotPublishOriginalPartnerContentDuplicateInvisibleOffer',
        }),
    )))


def test_duplicates_count_grouped_by_business_id(routines, original_partner_content_hash_duplicates, table_with_duplicates_count_grouped_by_business_id):
    expected_offers = [
        (1, 'BasicOnlyOriginalPartnerContentDuplicate_1~System'),
        (1, 'BasicOnlyOriginalPartnerContentDuplicate_2'),
        (1, 'BasicOnlyOriginalPartnerContentDuplicate_2~System'),
        (1, 'BasicOnlyOriginalPartnerContentNonDuplicate~System'),
        (1, 'BasicWithoutService~System'),
        (1, 'NotPublishOriginalPartnerContentDuplicateWithFFstock'),
        (1, 'NotPublishOriginalPartnerContentDuplicateWithFFstock~System'),
        (1, 'NotPublishOriginalPartnerContentDuplicateWithoutTitle_1~System'),
        (1, 'NotPublishOriginalPartnerContentDuplicateWithoutTitle_2~System'),
        (1, 'NotPublishOriginalPartnerContentDuplicate_1'),
        (1, 'NotPublishOriginalPartnerContentDuplicate_1~System'),
        (1, 'NotPublishOriginalPartnerContentDuplicate_2'),
        (1, 'NotPublishOriginalPartnerContentDuplicate_2~System'),
        (1, 'NotPublishOriginalPartnerContentDuplicate_3~System'),
        (1, 'PublishOriginalPartnerContentDuplicate_1'),
        (1, 'PublishOriginalPartnerContentDuplicate_1~System'),
        (7, 'DontRemoveNoServiceStrategyFromBasic_2~System'),
    ]
    map_from_business_id_to_offer_count = {}
    for business_id, offer_id in expected_offers:
        map_from_business_id_to_offer_count[business_id] = map_from_business_id_to_offer_count.get(business_id, 0) + 1
        assert_that(original_partner_content_hash_duplicates, has_items(has_entries({
            'business_id': business_id,
            'shop_sku': offer_id,
        })))
    for business_id, count in map_from_business_id_to_offer_count.items():
        assert_that(table_with_duplicates_count_grouped_by_business_id, has_items(
            has_entries({
                'business_id': business_id,
                'count': count
            }),
        ))


def test_offers_erase(routines):
    """ Проверяем, что осталось в таблицах и что было удалено"""
    for table in [routines.basic_offers_table, routines.basic_search_offers_table]:
        assert_that(len(table.data), equal_to(len(BASIC_OFFERS) - len(ERASED_BASICS)))
        assert_that(table.data, all_of(
            has_items(
                *[has_entries({
                    'business_id': business_id,
                    'shop_sku': offer_id,
                }) for business_id, offer_id in REMAINED_BASICS]
            ),
            is_not(has_items(
                *[has_entries({
                    'business_id': business_id,
                    'shop_sku': offer_id,
                }) for business_id, offer_id in ERASED_BASICS]
            ))
        ))

    for table in [routines.service_offers_table, routines.service_search_offers_table]:
        assert_that(len(table.data), equal_to(len(SERVICE_OFFERS) - len(ERASED_SERVICES)))
        assert_that(table.data, all_of(
            has_items(
                *[has_entries({
                    'business_id': business_id,
                    'shop_sku': offer_id,
                    'shop_id': shop_id,
                }) for business_id, offer_id, shop_id in REMAINED_SERVICES]
            ),
            is_not(has_items(
                *[has_entries({
                    'business_id': business_id,
                    'shop_sku': offer_id,
                    'shop_id': shop_id,
                }) for business_id, offer_id, shop_id in ERASED_SERVICES]
            ))
        ))

    for table in [routines.actual_service_offers_table, routines.actual_service_search_offers_table]:
        assert_that(len(table.data), equal_to(len(ACTUAL_SERVICE_OFFERS) - len(ERASED_ACTUALS)))
        assert_that(table.data, all_of(
            has_items(
                *[has_entries({
                    'business_id': business_id,
                    'shop_sku': offer_id,
                    'shop_id': shop_id,
                    'warehouse_id': warehouse_id,
                }) for business_id, offer_id, shop_id, warehouse_id in REMAINED_ACTUALS]
            ),
            is_not(has_items(
                *[has_entries({
                    'business_id': business_id,
                    'shop_sku': offer_id,
                    'shop_id': shop_id,
                    'warehouse_id': warehouse_id,
                }) for business_id, offer_id, shop_id, warehouse_id in ERASED_ACTUALS]
            ))
        ))


def test_removed_united_offers(routines, datacamp_cleaner_topic_data):
    """
    Проверяем отправку признаков удаления в топик
    """
    for offer in OFFERS_TO_BE_SEND_IN_DATACAMP_WITH_UPDATED_FOR_REMOVE_FLAG:
        assert_that(datacamp_cleaner_topic_data[0], IsSerializedProtobuf(DatacampMessage, {
            'united_offers': [{
                'offer': [offer]
            }]
        }))


def test_erase_by_filter(routines_http):
    """
    Удаление офферов через ручку clean с фильтрацией по business_id-shop_id
    """
    for table in [routines_http.service_offers_table, routines_http.service_search_offers_table]:
        assert_that(table.data, has_items(has_entries({
            'business_id': 1,
            'shop_sku': 'EraseByFilter',
            'shop_id': 333,
        })))

    for table in [routines_http.actual_service_offers_table, routines_http.actual_service_search_offers_table]:
        assert_that(table.data, has_items(has_entries({
            'business_id': 1,
            'shop_sku': 'EraseByFilter',
            'shop_id': 333,
            'warehouse_id': 0,
        })))

    response = routines_http.post('/clean?shop={}-{}&erase=1'.format(1, 333))
    assert_that(response, HasStatus(401))

    response = routines_http.post(
        '/clean?shop={}-{}'.format(1, 333), headers={
            'X-Ya-Service-Ticket': BAD_TVM_TICKET
        }
    )
    assert_that(response, HasStatus(401))

    response = routines_http.post(
        '/clean?shop={}-{}&erase=1'.format(1, 333), headers={
            'X-Ya-Service-Ticket': GOOD_TVM_TICKET
        }
    )
    assert_that(response, HasStatus(200))

    for table in [routines_http.basic_offers_table, routines_http.basic_search_offers_table]:
        assert_that(table.data, has_items(has_entries({
            'business_id': 1,
            'shop_sku': 'EraseByFilter',
        })))
    for table in [routines_http.service_offers_table, routines_http.service_search_offers_table]:
        assert_that(table.data, has_items(has_entries({
            'business_id': 1,
            'shop_sku': 'EraseByFilter',
            'shop_id': 1,
        })))
    for table in [routines_http.actual_service_offers_table, routines_http.actual_service_search_offers_table]:
        assert_that(table.data, has_items(has_entries({
            'business_id': 1,
            'shop_sku': 'EraseByFilter',
            'shop_id': 1,
            'warehouse_id': 145,
        })))
    for table in [routines_http.service_offers_table, routines_http.service_search_offers_table]:
        assert_that(table.data, is_not(has_items(has_entries({
            'business_id': 1,
            'shop_sku': 'EraseByFilter',
            'shop_id': 333,
    }))))
    for table in [routines_http.actual_service_offers_table, routines_http.actual_service_search_offers_table]:
        assert_that(table.data, is_not(has_items(has_entries({
            'business_id': 1,
            'shop_sku': 'EraseByFilter',
            'shop_id': 333,
            'warehouse_id': 0,
        }))))


def test_removed_by_filter(routines_http, datacamp_cleaner_topic_http, united_offer_ids_table, service_offer_ids_table):
    """
    Пометка офферов удаленными через ручку clean с фильтрацией по business_id-shop_id
    - уже помеченные удаленными повторно не помечаются
    - если указан only_disabled, то помечаются на удаление только скрытые, иначе все офферы магазина
    - несколько сервисов попадают в один united-оффер
    """
    response = routines_http.post(
        '/clean?shop=4-2222&shop=4-3333&shop=4-4444&shop=4-5555&only_disabled=1', headers={
            'X-Ya-Service-Ticket': GOOD_TVM_TICKET
        }
    )
    assert_that(response, HasStatus(200))
    data = datacamp_cleaner_topic_http.read(count=1)
    assert_that(data[0], IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    4,
                    'RemoveByFilter',
                    shops=[(4444, True, remove_strategy.ADMIN_CLEANER)],
                    warehouses=[(4444, [(0, True, remove_strategy.ADMIN_CLEANER)])],
                ),
            ]
        }]
    }))
    assert_that(data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    4,
                    'RemoveByFilter',
                    shops=[(2222, True, remove_strategy.ADMIN_CLEANER), (3333, True, remove_strategy.ADMIN_CLEANER)],
                    warehouses=[(2222, [(145, True, remove_strategy.ADMIN_CLEANER)]), (3333, [(0, True, remove_strategy.ADMIN_CLEANER)])],
                ),
            ]
        }]
    })))
    assert_that(data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    4,
                    'RemoveByFilter',
                    shops=[(5555, True, remove_strategy.ADMIN_CLEANER)],
                    warehouses=[(5555, [(0, True, remove_strategy.ADMIN_CLEANER)])],
                ),
            ]
        }]
    })))

    response = routines_http.post(
        '/clean?shop=4-2222&shop=4-3333&shop=4-4444&shop=4-5555', headers={
            'X-Ya-Service-Ticket': GOOD_TVM_TICKET
        }
    )
    assert_that(response, HasStatus(200))
    data = datacamp_cleaner_topic_http.read(count=1)
    assert_that(data[0], IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    4,
                    'RemoveByFilter',
                    shops=[
                        (2222, True, remove_strategy.ADMIN_CLEANER),
                        (3333, True, remove_strategy.ADMIN_CLEANER),
                        (4444, True, remove_strategy.ADMIN_CLEANER)
                    ],
                    warehouses=[
                        (2222, [(145, True, remove_strategy.ADMIN_CLEANER)]),
                        (3333, [(0, True, remove_strategy.ADMIN_CLEANER)]),
                        (4444, [(0, True, remove_strategy.ADMIN_CLEANER)])
                    ],
                ),
            ]
        }]
    }))
    assert_that(data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    4,
                    'RemoveByFilter',
                    shops=[(5555, True, remove_strategy.ADMIN_CLEANER)],
                    warehouses=[(5555, [(0, True, remove_strategy.ADMIN_CLEANER)])],
                ),
            ]
        }]
    })))

    # Проверяем удаление через таблицу с идентификаторами united-офферов
    response = routines_http.post(
        '/clean?ids_table={}'.format(united_offer_ids_table.table_path), headers={
            'X-Ya-Service-Ticket': GOOD_TVM_TICKET
        }
    )
    assert_that(response, HasStatus(200))
    data = datacamp_cleaner_topic_http.read(count=1)
    assert_that(data[0], IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    4,
                    'RemoveUnitedByIdsTable',
                    shops=[
                        (2222, True, remove_strategy.ADMIN_CLEANER),
                        (1111, True, remove_strategy.ADMIN_CLEANER),
                    ],
                    warehouses=[
                        (2222, [(145, True, remove_strategy.ADMIN_CLEANER)]),
                        (1111, [(145, True, remove_strategy.ADMIN_CLEANER)]),
                    ],
                    basic_removed=(True, remove_strategy.ADMIN_CLEANER),
                ),
            ]
        }]
    }))

    # Проверяем удаление через таблицу с идентификаторами сервисных офферов
    response = routines_http.post(
        '/clean?ids_table={}'.format(service_offer_ids_table.table_path), headers={
            'X-Ya-Service-Ticket': GOOD_TVM_TICKET
        }
    )
    assert_that(response, HasStatus(200))
    data = datacamp_cleaner_topic_http.read(count=1)
    assert_that(data[0], IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    4,
                    'RemoveServiceByIdsTable',
                    shops=[
                        (1111, True, remove_strategy.ADMIN_CLEANER),
                    ],
                    warehouses=[
                        (1111, [(145, True, remove_strategy.ADMIN_CLEANER)]),
                        (1111, [(147, True, remove_strategy.ADMIN_CLEANER)]),
                    ],
                ),
            ]
        }]
    }))
    assert_that(data[0], is_not(IsSerializedProtobuf(DatacampMessage, {
        'united_offers': [{
            'offer': [
                make_offer(
                    4,
                    'RemoveServiceByIdsTable',
                    shops=[(2222, True, remove_strategy.ADMIN_CLEANER)],
                ),
            ]
        }]
    })))

    # проверяем, что в топике больше нет данных, которые мы можем вычитать
    assert_that(datacamp_cleaner_topic_http, HasNoUnreadData())

    for table in [routines_http.basic_offers_table, routines_http.basic_search_offers_table]:
        assert_that(table.data, HasDatacampYtUnitedOffersRows([
            {
                'business_id': 4,
                'shop_sku': 'RemoveByFilter',
            }
        ]))

    for table in [routines_http.service_offers_table, routines_http.service_search_offers_table]:
        assert_that(table.data, HasDatacampYtUnitedOffersRows([
            {
                'business_id': 4,
                'shop_sku': 'RemoveByFilter',
                'shop_id': shop_id,
            } for shop_id in [1111, 2222, 3333]
        ]))

    for table in [routines_http.actual_service_offers_table, routines_http.actual_service_search_offers_table]:
        assert_that(table.data, HasDatacampYtUnitedOffersRows([
            {
                'business_id': 4,
                'shop_sku': 'RemoveByFilter',
                'shop_id': shop_id,
                'warehouse_id': warehouse_id,
            } for shop_id, warehouse_id in [(1111, 145), (2222, 145), (3333, 0)]
        ]))


def test_erase_disabled_offers_from_testing_shops(basic_trash, service_trash, actual_trash):
    """ Удаляем офферы заданных магазинов в тестинге, если они скрыты более чем N дней """

    # Базовая часть остается, даже если удалены все сервисные. Стратегия удаления NO_SERVICE отменена.
    assert_that(basic_trash, has_items(
        is_not(has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledOld',
        })),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledOld',
            'shop_id': 200,
            'warehouse_id': 0,
            'strategy': remove_strategy.DISABLED_BY_PARTNER,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledOld',
            'shop_id': 300,
            'warehouse_id': 0,
            'strategy': remove_strategy.DISABLED_BY_PARTNER,
        }),
    ))
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledOld',
            'shop_id': 200,
            'warehouse_id': 145,
            'strategy': remove_strategy.DISABLED_BY_PARTNER,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledOld',
            'shop_id': 200,
            'warehouse_id': 123456,
            'strategy': remove_strategy.DISABLED_BY_PARTNER,
        }),
        has_entries({
            'business_id': 3,
            'offer_id': 'TestingDisabledOld',
            'shop_id': 300,
            'warehouse_id': 345678,
            'strategy': remove_strategy.DISABLED_BY_PARTNER,
        }),
    ))


def test_remove_disabled_direct_offers(basic_trash, service_trash, actual_trash):
    """Проверяем удаление директовых офферов, скрытых комплит-фидом / диким вебом"""
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectSiteDisabled',
            'strategy': remove_strategy.NO_SERVICE,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectWithDisabledShop',
            'strategy': remove_strategy.NO_SERVICE,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectFreshNoService',
            'strategy': remove_strategy.NO_SERVICE,
        }),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectAndWhiteFeedDisabled',
            'strategy': remove_strategy.DIRECT_DISABLED_BY_PARTNER_FEED,
            'shop_id': 10,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectSiteDisabled',
            'strategy': remove_strategy.DIRECT_DISABLED_BY_PARTNER_SITE,
            'shop_id': 10,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectWithDisabledShop',
            'strategy': remove_strategy.DIRECT_SHOP_DISABLED,
            'shop_id': 40,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectFreshNoService',
            'strategy': remove_strategy.DIRECT_DISABLED_BY_PARTNER_FEED,
            'shop_id': 90,
            'warehouse_id': 0,
        }),
    ))
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectAndWhiteFeedDisabled',
            'strategy': remove_strategy.DIRECT_DISABLED_BY_PARTNER_FEED,
            'shop_id': 10,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectSiteDisabled',
            'strategy': remove_strategy.DIRECT_DISABLED_BY_PARTNER_SITE,
            'shop_id': 10,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectWithDisabledShop',
            'strategy': remove_strategy.DIRECT_SHOP_DISABLED,
            'shop_id': 40,
            'warehouse_id': 0,
        }),
        has_entries({
            'business_id': 6,
            'offer_id': 'DirectFreshNoService',
            'strategy': remove_strategy.DIRECT_DISABLED_BY_PARTNER_FEED,
            'shop_id': 90,
            'warehouse_id': 0,
        }),
    ))


def test_remove_vertical_offers(basic_trash, service_trash, actual_trash):
    """Проверяем удаление чисто-ТВ офферов"""
    assert_that(basic_trash, has_items(
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalNotApproved',
            'strategy': remove_strategy.NO_SERVICE,
        }),
    ))
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalNotApproved',
            'strategy': remove_strategy.PURE_VERTICAL_NOT_VERTICAL_APPROVED,
            'shop_id': 60,
            'warehouse_id': 0,
        }),
    ))
    assert_that(actual_trash, has_items(
        has_entries({
            'business_id': 6,
            'offer_id': 'PureVerticalNotApproved',
            'strategy': remove_strategy.PURE_VERTICAL_NOT_VERTICAL_APPROVED,
            'shop_id': 60,
            'warehouse_id': 0,
        }),
    ))


def test_remove_eats_offers(basic_trash, service_trash, actual_trash):
    """Удаляются оферы Еды, которые не обновляли цену более N дней"""
    assert_that(service_trash, has_items(
        has_entries({
            'business_id': 10,
            'offer_id': 'EatsNotFreshOffer',
            'strategy': remove_strategy.EATS_UNAVAILABLE_OFFER,
            'shop_id': 100,
            'warehouse_id': 0,
        }),
    ))


def test_enable_remove_market_offers_without_basic_original_partner_content(routines, basic_trash, service_trash, actual_trash):
    """Удаляются офферы без оригинального партнерского контента в базовой части"""

    for offer_id in ['MarketOfferWithAllContent', 'MarketOfferWithBasicContent', 'MarketOfferWithoutAnyContentFresh']:
        assert_that(basic_trash, has_items(
            is_not(has_entries({
                'business_id': 11,
                'offer_id': offer_id,
                'strategy': remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT,
            }))
        ))
        assert_that(service_trash, has_items(
            is_not(has_entries({
                'business_id': 11,
                'offer_id': offer_id,
                'strategy': remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT,
                'shop_id': 110,
                'warehouse_id': 0,
            }))
        ))
        assert_that(actual_trash, has_items(
            is_not(has_entries({
                'business_id': 11,
                'offer_id': offer_id,
                'strategy': remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT,
                'shop_id': 110,
                'warehouse_id': 110110,
            }))
        ))

    for offer_id in ['MarketOfferWithServiceContent', 'MarketOfferWithoutAnyContentNotFresh']:
        assert_that(basic_trash, has_items(
            has_entries({
                'business_id': 11,
                'offer_id': offer_id,
                'strategy': remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT,
            })
        ))
        assert_that(service_trash, has_items(
            has_entries({
                'business_id': 11,
                'offer_id': offer_id,
                'strategy': remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT,
                'shop_id': 110,
                'warehouse_id': 0,
            })
        ))
        assert_that(actual_trash, has_items(
            has_entries({
                'business_id': 11,
                'offer_id': offer_id,
                'strategy': remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT,
                'shop_id': 110,
                'warehouse_id': 110110,
            })
        ))

        assert_that(basic_trash, has_items(
            is_not(has_entries({
                'business_id': 10,
                'offer_id': 'EatsOfferWithoutAnyContentNotFresh',
                'strategy': remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT,
            }))
        ))

        assert_that(basic_trash, has_items(
            is_not(has_entries({
                'business_id': 11,
                'offer_id': 'MarketOfferWithoutAnyContentNotFreshRemoved',
                'strategy': remove_strategy.MARKET_OFFER_WITHOUT_BASIC_ORIGINAL_PARTNER_CONTENT,
            }))
        ))


def test_business_status_cleaner(routines, business_status_table):
    """ Проверяем удаление записей из таблицы business_status по TTL """
    business_status_table.load()
    assert_that(
        business_status_table.data,
        HasDatacampBusinessStatusYtRows([{
            'business_id': BUSINESS_STATUS_IN_TTL,
        }, {
            'business_id': BUSINESS_STATUS_LOCKED,
        }])
    )
    assert_that(
        business_status_table.data,
        is_not(HasDatacampBusinessStatusYtRows([{
            'business_id': BUSINESS_STATUS_OVER_TTL,
        }]))
    )
