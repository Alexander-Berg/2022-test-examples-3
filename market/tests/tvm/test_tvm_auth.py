# coding: utf-8

import json
import os
import pytest
import uuid
import yatest

from hamcrest import assert_that, equal_to
from google.protobuf.json_format import Parse as MessageFromJson

import market.idx.datacamp.proto.offer.DataCampOffer_pb2 as DTC
from market.idx.datacamp.controllers.stroller.yatf.resources.config_mock import StrollerConfigMock
from market.idx.datacamp.controllers.stroller.yatf.resources.shiny_config import StrollerShinyConfig
from market.idx.datacamp.controllers.stroller.yatf.test_env import make_stroller
from market.idx.datacamp.proto.api import OffersBatch_pb2 as OffersBatch
from market.idx.datacamp.proto.api.SyncChangeOffer_pb2 import ChangeOfferRequest, FullOfferResponse
from market.idx.datacamp.proto.api.SyncSearch_pb2 import SearchRequest
from market.idx.datacamp.proto.business.Business_pb2 import BusinessStatus
from market.idx.datacamp.proto.offer import DataCampOffer_pb2
from market.idx.datacamp.proto.offer.DataCampOffer_pb2 import (
    BLUE,
    OfferPrice,
    PriceBundle,
)
from market.idx.pylibrary.datacamp.conversion import offer_to_basic_row, offer_to_service_row
from market.idx.datacamp.yatf.matchers.matchers import HasStatus
from market.idx.datacamp.yatf.utils import create_meta, dict2tskv, create_update_meta
from market.idx.yatf.matchers.protobuf_matchers import IsSerializedProtobuf
from market.idx.yatf.matchers.yt_rows_matchers import HasOffers
from market.idx.yatf.resources.datacamp.datacamp_tables import (
    DataCampPartnersTable,
    DataCampBasicOffersTable,
    DataCampServiceOffersTable,
    DataCampBusinessStatusTable,
)
from market.proto.common.common_pb2 import PriceExpression
from market.pylibrary.proto_utils import message_from_data

BLOCKED_BUSINESS = 1000
TIMESTAMP = '2019-02-15T15:55:55Z'
SELF_TVM_ID = 100500
GOOT_SERVICE_TVM_ID = 200500
BAD_SERVICE_TVM_ID = 300500
# generated by `ya tool tvmknife unittest service -s 200500 -d 100500`
GOOD_TVM_TICKET = '3:serv:CBAQ__________9_IggItJ4MEJSRBg:WyM18H3jis-OOQsE4CMc3gHHOQd1rI9NsBNIvQthqJwy1XAQjK6SJqpu-lkL_47j_lIMqUWBgYOeyHVCqYoFvw0Mc0JJ_9WhWqGVHkce1c9Yxqev8eyMRCc4_wwS5Kc9A7kzI5NrJ2TFUmSaemH3w8HsgEQSzUUrzETRrgrOcJE'  # noqa
# generated by `ya tool tvmknife unittest service -s 300500 -d 100500`
BAD_TVM_TICKET = '3:serv:CBAQ__________9_IggI1KsSEJSRBg:DMDtlD91lqEBxdldILQDjhoEyBjWDL1i35WWXHxlmHHlniNWQFI7exJctC_Lk3ucGGPypd1NsbLNGw1W0GtsutyaF7rwRyCF6LMbpnT6tG0lQAe4YSxyqtCeeGOwhdFX6MFqaiVcfeWCYmAN4SyKmnPbE6Ay7i1aVjMbEWKrOTc'  # noqa


@pytest.fixture(scope='module', params=['white'])
def color_name(request):
    return request.param


@pytest.fixture(scope='module')
def config(color_name, yt_server, log_broker_stuff):
    cfg = StrollerConfigMock(
        yt_server,
        log_broker_stuff,
        config={
            'general': {
                'color': color_name,
            }
        }
    )
    cfg.tvm_client_id = 0
    cfg.migrator_tvm_id = GOOT_SERVICE_TVM_ID
    cfg.report_topic = 'topic-to-report' + str(uuid.uuid4())
    cfg.loyalty_promos_topic = 'topic-to-loyalty-promos' + str(uuid.uuid4())
    cfg.united_offers_topic = 'topic-to-united-offers' + str(uuid.uuid4())
    cfg.refresh_file_minutes = 1
    cfg.currency_rates_file_path = os.path.join(
        yatest.common.source_path(),
        'market', 'idx', 'yatf', 'resources', 'stubs', 'getter', 'mbi', 'currency_rates.xml'
    )
    return cfg


@pytest.fixture(scope='module')
def partners_table(yt_server, config):
    return DataCampPartnersTable(yt_server, config.yt_partners_tablepath, data=[{
        'shop_id': 1,
        'mbi': '\n\n'.join([
            dict2tskv({'shop_id': 1, 'business_id': 1}),
        ])
    }])


@pytest.fixture(scope='module')
def business_status_table(yt_server, config):
    return DataCampBusinessStatusTable(yt_server, config.yt_business_status_tablepath, data=[
        {
            'business_id': BLOCKED_BUSINESS,
            'status': BusinessStatus(
                value=BusinessStatus.Status.LOCKED,
                shops={
                    2: BLOCKED_BUSINESS + 1
                }
            ).SerializeToString(),
        },
    ])


@pytest.fixture(scope='module')
def basic_offers_table(yt_server, config):
    return DataCampBasicOffersTable(yt_server, config.yt_basic_offers_tablepath, data=[
        offer_to_basic_row(DTC.Offer(
            identifiers=DTC.OfferIdentifiers(
                business_id=BLOCKED_BUSINESS,
                offer_id='offer_for_mboc_after_migration_not_consistent',
            ),
            meta=create_meta(10, scope=DTC.BASIC),
            status=DTC.OfferStatus(
                version=DTC.VersionStatus(
                    offer_version=DTC.VersionCounter(
                        counter=2
                    ),
                    uc_data_version=DTC.VersionCounter(
                        counter=1
                    ),
                ),
                consistency=DTC.ConsistencyStatus(
                    mboc_consistency=True,
                    pricelabs_consistency=True,
                )
            ),
            content=DTC.OfferContent(
                market=DTC.MarketContent(
                    meta=create_update_meta(10),
                    real_uc_version=DTC.VersionCounter(
                        counter=1
                    )
                )
            ),
        )),
    ])


@pytest.fixture(scope='module')
def service_offers_table(yt_server, config):
    return DataCampServiceOffersTable(yt_server, config.yt_service_offers_tablepath, data=[
        offer_to_service_row(DataCampOffer_pb2.Offer(
            identifiers=DataCampOffer_pb2.OfferIdentifiers(
                business_id=1,
                offer_id='T1000',
                shop_id=1,
            ),
            meta=create_meta(10, BLUE),
            price=OfferPrice(
                basic=PriceBundle(
                    binary_price=PriceExpression(
                        price=100,
                    )
                )
            ),
        )),
        offer_to_service_row(DataCampOffer_pb2.Offer(
            identifiers=DataCampOffer_pb2.OfferIdentifiers(
                business_id=1,
                offer_id='T2000',
                shop_id=1,
            ),
            meta=create_meta(10, BLUE),
            price=OfferPrice(
                basic=PriceBundle(
                    binary_price=PriceExpression(
                        price=100,
                    )
                )
            ),
        )),
    ])


@pytest.yield_fixture(scope='module')
def shiny_config(tvm_api):
    return StrollerShinyConfig(
        additional_params={
            'Core': {
                'TvmAuth': {
                    'AllowUnauthenticatedRead': True,
                    'AllowUnauthenticatedWrite': False,
                    'SelfTvmId': SELF_TVM_ID,
                    'AllowedTvmId': [GOOT_SERVICE_TVM_ID, 123],
                    'Host': tvm_api.host,
                    'Port': tvm_api.port
                }
            }
        })


@pytest.yield_fixture(scope='module')
def stroller(
        config,
        yt_server,
        log_broker_stuff,
        partners_table,
        basic_offers_table,
        service_offers_table,
        shiny_config,
        business_status_table,
):
    with make_stroller(
            config,
            yt_server,
            log_broker_stuff,
            shopsdat_cacher=True,
            shiny_config=shiny_config,
            partners_table=partners_table,
            basic_offers_table=basic_offers_table,
            service_offers_table=service_offers_table,
            business_status_table=business_status_table,
    ) as stroller_env:
        yield stroller_env


def request_get_offer(client, shop_id, offer_id, headers=None):
    response = client.get('/shops/{}/offers?offer_id={}'.format(shop_id, offer_id), headers=headers)
    return response


def request_set_offer(client, shop_id, offer_id, price, source, ts, headers=None):
    request = ChangeOfferRequest()
    offer = request.offer.add()
    offer.identifiers.shop_id = shop_id

    offer.price.basic.binary_price.CopyFrom(PriceExpression(price=price))
    offer.price.basic.meta.timestamp.FromJsonString(ts)
    offer.price.basic.meta.source = source

    uri = '/shops/{}/offers/price?offer_id={}'.format(shop_id, offer_id)

    response = client.put(uri, data=request.SerializeToString(), headers=headers)
    return response


def request_search(client, shop_id, req):
    return client.post('/shops/{}/offers/search'.format(shop_id), data=req.SerializeToString())


def test_check_tvm_auth(stroller):
    """Проверяем, что если ручки закрыты tvm тикетами, то без правильного tvm тикета данные не будут меняться"""
    source = DataCampOffer_pb2.PUSH_PARTNER_OFFICE
    timestamp = '2019-02-15T15:55:55Z'
    shop_id = 1
    offer_id = 'T1000'
    price = 500

    response = request_set_offer(stroller, shop_id, offer_id, price, source, timestamp,
                                 headers={
                                     'X-Ya-Service-Ticket': BAD_TVM_TICKET
                                 })
    assert_that(response, HasStatus(401))

    response = request_set_offer(stroller, shop_id, offer_id, price, source, timestamp,
                                 headers={
                                     'X-Ya-Service-Ticket': GOOD_TVM_TICKET
                                 })
    assert_that(response, HasStatus(200))
    assert_that(response.headers['Content-type'], equal_to('application/x-protobuf'))
    assert_that(response.data, IsSerializedProtobuf(FullOfferResponse, {
        'offer': [{
            'identifiers': {
                'shop_id': shop_id,
                'offer_id': offer_id,
            },
            'price': {
                'basic': {
                    'binary_price': {
                        'price': price,
                    },
                },
            }
        }]
    }))


def test_check_non_auth_handlers(stroller):
    """Проверяем, что ручки, не закрытые tvm тикетами будут доступны и для запросов без хедеров, или даже с чужими тикетами
    """
    shop_id = 1
    offer_id = 'T2000'

    response = request_get_offer(stroller, shop_id=shop_id, offer_id=offer_id)
    assert_that(response, HasStatus(200))
    assert_that(response.headers['Content-type'], equal_to('application/x-protobuf'))
    assert_that(response.data, IsSerializedProtobuf(FullOfferResponse, {
        'offer': [{
            'identifiers': {
                'shop_id': shop_id,
                'offer_id': offer_id,
            },
        }]
    }))

    response = request_get_offer(stroller, shop_id=shop_id, offer_id=offer_id,
                                 headers={
                                     'X-Ya-Service-Ticket': BAD_TVM_TICKET
                                 })
    assert_that(response, HasStatus(200))
    assert_that(response.headers['Content-type'], equal_to('application/x-protobuf'))
    assert_that(response.data, IsSerializedProtobuf(FullOfferResponse, {
        'offer': [{
            'identifiers': {
                'shop_id': shop_id,
                'offer_id': offer_id,
            },
        }]
    }))


def test_check_search(stroller):
    """Проверяем, что POST ручка `search` будет доступна без tvm тикета, даже если стоит AllowUnauthenticatedWrite=false"""
    req = SearchRequest(position="", page_size=2, page_skip=1)
    response = request_search(stroller, shop_id=1, req=req)
    assert_that(response, HasStatus(200))


def test_blocked_business_update_by_migrator(stroller):
    """ Проверяем, что обновление/создание оркестратором офферов заблокированного бизнеса происходит """
    body = MessageFromJson(json.dumps({
        'entries': [{
            'method': OffersBatch.RequestMethod.POST,
            'offer': {
                'basic': {
                    'identifiers': {
                        'business_id': BLOCKED_BUSINESS,
                        'offer_id': 'blocked_business',
                    },
                    'meta': {
                        'scope': DataCampOffer_pb2.BASIC
                    },
                }
            }
        }]
    }), OffersBatch.UnitedOffersBatchRequest())

    response = stroller.post('/v1/offers/united/batch', data=body.SerializeToString(), headers={
        'X-Ya-Service-Ticket': GOOD_TVM_TICKET
    })
    assert_that(response, HasStatus(200))
    assert_that(response.data, IsSerializedProtobuf(OffersBatch.UnitedOffersBatchResponse, {
        'entries': [{
            'united_offer': {
                'basic': {
                    'identifiers': {
                        'business_id': BLOCKED_BUSINESS,
                        'offer_id': 'blocked_business',
                    }
                }
            }
        }]
    }))

    assert_that(stroller.basic_offers_table.data, HasOffers([
        message_from_data({
            'identifiers': {
                'business_id': BLOCKED_BUSINESS,
                'offer_id': 'blocked_business',
            }
        }, DTC.Offer()),
    ]))
