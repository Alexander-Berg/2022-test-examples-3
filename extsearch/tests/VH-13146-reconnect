#!/usr/bin/env bash
[ -z "${KEEP}" ] && set -e

SCRIPTS_DIR=$(ya dump root)/extsearch/video/vh/scripts/

REDIS_HOST=${REDIS_HOST:=localhost}
. "${SCRIPTS_DIR}"/config.sh
[ -z "$PROD" ] && . "${SCRIPTS_DIR}"/redis_service
. "${SCRIPTS_DIR}"/util

[ -z "$PROD" ] && . "${SCRIPTS_DIR}"/redis_service_tracks_fill

set -x

if [ -n "$LONG" ]; then
    [ -z `which redis-server` ] && sudo apt install -y redis-server
    redis-cli -h "${REDIS_HOST}" -a "${REDIS_PASSWORD}" dbsize
    for i in {1..3}; do
        ${ARCADIA_ROOT}/apphost/tools/grpc_client/grpc_client --proto-to-json -a "${HOST}:${REDIS_SERVICE_GRPC}/tracks_meta" -c '{ "answers": [  {  "source": "FAKE_NODE",  "type": "http_request", "__content_type": "json", "binary": { "content" : "{ \"TrackIds\": [1] }" }  }  ] }' \
        | jq --exit-status '.answers[1].Tracks[0].TrackId'
    done

    sudo service redis stop
    ! ${ARCADIA_ROOT}/apphost/tools/grpc_client/grpc_client --proto-to-json -a "${HOST}:${REDIS_SERVICE_GRPC}/tracks_meta" -c '{ "answers": [  {  "source": "FAKE_NODE",  "type": "http_request", "__content_type": "json", "binary": { "content" : "{ \"TrackIds\": [1] }" }  }  ] }'
    sudo service redis restart
    sleep 1
    redis-cli -h "${REDIS_HOST}" -a "${REDIS_PASSWORD}" dbsize

    for i in {1..5}; do
        ${ARCADIA_ROOT}/apphost/tools/grpc_client/grpc_client --proto-to-json -a "${HOST}:${REDIS_SERVICE_GRPC}/tracks_meta" -c '{ "answers": [  {  "source": "FAKE_NODE",  "type": "http_request", "__content_type": "json", "binary": { "content" : "{ \"TrackIds\": [1] }" }  }  ] }' \
        | jq --exit-status '.answers[1].Tracks[0].TrackId'
    done
fi
