#!/usr/bin/env bash
# bsconfig defines following environment variables:
#
#   BSCONFIG_DBTOP
#   BSCONFIG_IDIR
#   BSCONFIG_IHOST
#   BSCONFIG_INAME
#   BSCONFIG_IPORT
#   BSCONFIG_ITAGS
#   BSCONFIG_REQUIRES_SHARDS
#   BSCONFIG_SHARDDIR
#   BSCONFIG_SHARDNAME
#   BSCONFIG_SHARDREPLICA
#
# also loop script has following variables pre-defined:
#   stdout
#   stderr
#   pid_file
#   state_dir (directory to store pid files and etc.)
#   type      (daemon, cron)
#   logs_dir
#   section   (config section)

[defaults]
its_poll = 1
status_update_restart_period_backoff = 1.1
logs_dir = /usr/local/www/logs/
ram_disk_path = /ramdisk
fast_data_volume = /fast_data
fast_data_path = fast_data
bstr_downloads_path = %(fast_data_path)s/bstr_downloads
fast_data_storage_path = %(fast_data_path)s/storage
fast_data_storage_limit = 2048
unified_agent_state_dir = /db/bsconfig/webstate/unified_agent
xml_reqans_ratio = 100
rt_reqans_ratio = 100
fat_reqans_ratio = 100

[push_agent]
binary = push_agent
rename_binary = wrap-%(section)s-%(BSCONFIG_IPORT)s
install_script = set -x;
    cat %(BSCONFIG_IDIR)s/push_agent.conf | sed 's/PUSH_AGENT_PORT/'$((%(BSCONFIG_IPORT)s + 7))'/g' > push_agent_real.conf
arguments = --config push_agent_real.conf

[noapacheupper]
binary = httpsearch
rename_binary = noapache-%(BSCONFIG_IPORT)s
env_match = ^ENV_(.*)$
opt_match = ^OPT_(.*)$
eval_apphost_port = /bin/bash -c 'let "i = %(BSCONFIG_IPORT)s + 1"; echo $i'
conf_match = ^conf_(.*)$
terminate_timeout = 10
config = apache.ywsearch.cfg
install_script = 
    set -x
    if ! [ -f %(BSCONFIG_IDIR)s/apache.ywsearch.cfg ]; then
        cp %(BSCONFIG_IDIR)s/%(BUNDLE)s/apache.ywsearch.cfg %(BSCONFIG_IDIR)s/apache.ywsearch.cfg
    fi
    rdyn_res=%(BSCONFIG_IDIR)s/rearrange.dynamic
    # iss agent sometimes stores strange files in resource folder, so we ignore them
    rdyn_name=$rdyn_res/$( ls -1 $rdyn_res | grep rearrange.dynamic_bundle )
    if ! [ -d rdyn ] ; then
        if ! ln -sfn $rdyn_name rdyn ; then
            echo "Failed symlink $rdyn_name to rdyn"
            exit 1
        fi
    fi
    rdat_res=%(BSCONFIG_IDIR)s/rearrange_data
    # iss agent sometimes stores strange files in resource folder, so we ignore them
    rdat_name=$rdat_res/$( ls -1 $rdat_res | grep rearrange_data )
    if ! [ -d rdat ] ; then
        if ! ln -sfn $rdat_name rdat ; then
            echo "Failed symlink $rdat_name to rdat"
            exit 1
        fi
    fi
    if [ -e %(BSCONFIG_IDIR)s/rearrange.fast ] ; then
        # only web/video has fast data by now, so abscense is not an error
        echo "Fast data detected, setting symlinks"
        rm -rf %(fast_data_volume)s/%(BSCONFIG_INAME)s
        if ( mkdir -p %(fast_data_volume)s ) ; then
            # Other sections (e.g. fast_data_status) can create fast_data directory in cwd concurrently and incorrectly,
            # so we create and remove dir to be sure that the volume will be symlinked to this path after all.
            mkdir -p %(fast_data_path)s; rm -rf %(fast_data_path)s
            if ! ln -sfn %(fast_data_volume)s %(fast_data_path)s ; then
                echo "Failed to symlink fast data"
                exit 1
            fi
        else
            mkdir %(fast_data_path)s
        fi
        mkdir -p %(fast_data_storage_path)s
        rfast_stable_res=%(BSCONFIG_IDIR)s/rearrange.fast
        rfast_stable_name=$rfast_stable_res/$( ls -1 $rfast_stable_res | grep rearrange.fast )
        rfast_stable=%(BSCONFIG_IDIR)s/rfast_stable
        ln -sfn $rfast_stable_name $rfast_stable
        rfast_symlink=%(BSCONFIG_IDIR)s/rfast
        ln -sfn $rfast_stable $rfast_symlink
        if [ -x %(BSCONFIG_IDIR)s/callback ]; then
            export YT_TOKEN="$(cat %(BSCONFIG_IDIR)s/fast_data_deploy_keys/yt_token)"
            %(BSCONFIG_IDIR)s/callback --verbose --daemon noapache \
                --cluster locke --cypress-dir //home/search-runtime/fast-data \
                download --file rearrange.fast.tar.gz --storage %(fast_data_storage_path)s --symlink $rfast_symlink --stable-data $rfast_stable --limit %(fast_data_storage_limit)s
        fi
    fi
    echo "Starting"
restart_script = set -x
    if ! [ -f %(BSCONFIG_IDIR)s/apache.ywsearch.cfg ]; then
        cp %(BSCONFIG_IDIR)s/%(BUNDLE)s/apache.ywsearch.cfg  %(BSCONFIG_IDIR)s/apache.ywsearch.cfg
    fi
prepare_script = 
    if ! [ -f %(BSCONFIG_IDIR)s/apache.ywsearch.cfg ]; then
        cp %(BSCONFIG_IDIR)s/%(BUNDLE)s/apache.ywsearch.cfg  %(BSCONFIG_IDIR)s/apache.ywsearch.cfg
    fi
    if [ -r gdb_toolkit.tgz ] ; then
        tar xzf gdb_toolkit.tgz
    fi
    # symlink logs into instance folder (SEARCH-5218)
    ln -sf %(logs_dir)s/current-eventlog-noapache-%(BSCONFIG_IPORT)s current-eventlog
    ln -sf %(logs_dir)s/current-eventlog-noapache-%(BSCONFIG_IPORT)s.1 prev-eventlog
status_script = set -x
    # 'eval'-variables are evaluated only for 'arguments' section (see instancectl docs)
    # so we evaluate it here once more
    noapache_apphost_port=$((%(BSCONFIG_IPORT)s + 1))
    retcode=$(curl -o /dev/null -w '%%{http_code}' http://localhost:$noapache_apphost_port/_admin?action=ping)
    if [ $retcode -eq 200 ] 2>/dev/null; then
        exit 0
    fi
    exit 1
reopenlog_script = wget -qO /dev/null "http://localhost:%(BSCONFIG_IPORT)s/admin?action=reopenlog"
stop_script = wget -qO /dev/null "http://localhost:%(BSCONFIG_IPORT)s/admin?action=shutdown"
arguments = -d apache.ywsearch.cfg
    -V Port=%(BSCONFIG_IPORT)s
    -V AppHostPort={apphost_port}
    -V RearrangeDataDir=%(BSCONFIG_IDIR)s/rdat
    -V RearrangeDynamicDataDir=%(BSCONFIG_IDIR)s/rdyn
    -V RearrangeDataFastDir=%(BSCONFIG_IDIR)s/rfast
    -V ServerLog=%(logs_dir)scurrent-serverlog-noapache-%(BSCONFIG_IPORT)s
    -V EventLog=%(logs_dir)scurrent-eventlog-noapache-%(BSCONFIG_IPORT)s
    -V LoadLog=%(logs_dir)scurrent-loadlog-noapache-%(BSCONFIG_IPORT)s
    -V ScarabReqAnsLog=%(logs_dir)scurrent-scarab-reqans-noapache-%(BSCONFIG_IPORT)s
    -V DirectScarabReqAnsLog=%(logs_dir)scurrent-direct-report-search-reqans-event-log-%(BSCONFIG_IPORT)s
    -V SiteSearchScarabReqAnsLog=%(logs_dir)scurrent-sitesearch-report-search-reqans-event-log-%(BSCONFIG_IPORT)s
    -V ServerThreads=8
    -V ServerQueueSize=10
    -V ServerAdminThreads=1
    -V ServerCompression=true
    -V NehThreads=0
    -V RequestThreads=40
    -V MultiContextThreads=24
    -V ReqAnsUnifiedAgentLog=unix://%(unified_agent_state_dir)s/proto_reqans
    -V XmlReqAnsUnifiedAgentLog=unix://%(unified_agent_state_dir)s/proto_xml_reqans
    -V RtReqAnsUnifiedAgentLog=unix://%(unified_agent_state_dir)s/proto_rt_reqans
    -V FatReqAnsUnifiedAgentLog=unix://%(unified_agent_state_dir)s/proto_fat_reqans
    -V AliceReqAnsUnifiedAgentLog=unix://%(unified_agent_state_dir)s/alice_proto_reqans
    -V ErrorBoosterUnifiedAgentLog=unix://%(unified_agent_state_dir)s/error_booster
    -V CType=%(a_ctype)s
    -V XmlReqansLogRatio=%(xml_reqans_ratio)s
    -V RtReqansLogRatio=%(rt_reqans_ratio)s
    -V FatReqansLogRatio=%(fat_reqans_ratio)s
    -V UAClientLog=%(logs_dir)scurrent-ua-client-log
limit_core = unlimited
coredumps_format = coredump
# this should fix cores aggregation after changes in porto
core_pattern = .*%(NANNY_SERVICE_ID)s.*noapache.*
minidumps_push = 1
minidumps_service = noapacheupper
minidumps_aggregator_url = https://coredumps.n.yandex-team.ru/submit_core
coredump_probability = 5

