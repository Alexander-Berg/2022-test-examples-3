# -*- coding: utf-8 -*-

import pytest
import re
import os
import subprocess

from report.functional.web.base import BaseFuncTest
from report.const import *

"""
DO NOT DELETE !!!
XXX TestMetaMarker
DO NOT DELETE !!!
"""


@pytest.mark.skipif(not os.environ.get('REPORT_INVERTED') == '1', reason="SERP-67197")
class TestMeta(BaseFuncTest):
    """
    keep functional tests self organized
    """

    def test_unused_files(self, root_dir, schema_dir, static_root_dir):
        cat = '-exec cat {} \\;'
        code = subprocess.Popen(
            "find {} -type f -name '*.py' {}".format(root_dir, cat),
            shell=True,
            stdout=subprocess.PIPE
        ).communicate()[0].split("\n")
        # assert not code, "\n".join(code)

        code = filter(lambda l: not re.search(r'^\s*#', l), code)
        assert code, 'no codebase was slurped'
        code_all = '\n'.join(code)

        marker_ok = r'^XXX\s+TestMetaMarker$'
        marker_wrong = r'^XXX\s+TestMetaMarker888$'
        re_marker_ok = re.compile(marker_ok, re.M)
        re_marker_wrong = re.compile(marker_wrong, re.M)

        assert filter(re_marker_ok.search, code), 'slurped wrong code'
        assert re_marker_ok.search(code_all), 'slurped wrong code'
        assert not filter(re_marker_wrong.search, code), 'slurped wrong code'
        assert not re_marker_wrong.search(code_all), 'slurped wrong code'

        cat = '-exec cat {} \\;'
        schemas = subprocess.Popen(
            "find {} -type f -name '*.json' -not -path '{}/contexts/*' {}".format(schema_dir, schema_dir, cat),
            shell=True,
            stdout=subprocess.PIPE).communicate()[0].split("\n")
        assert schemas, 'no schemas was slurped'
        code_all += ''.join(schemas)

        def search_code(f):
            # raw mentions
            m = re.search(r'(?:^|[^a-zA-Z0-9_-])' + f + r'(?:[^a-zA-Z0-9_-]|$)', code_all, re.MULTILINE)
            if m:
                return m

            # autogenerated scheme_path
            test_def = re.sub(r'\.(\w+)$', '', f)
            m = re.search(r'^\s*def\s+' + test_def + r'\(.*\bschema_path\b', code_all, re.MULTILINE)
            if m:
                return m

        assert search_code(marker_ok), 'search_code self test failed'
        assert not search_code(marker_wrong), 'search_code self test failed'

        files = set()
        for storage_dir in [schema_dir, static_root_dir]:
            for file_abs in subprocess.Popen(
                "find {} -type f -name '*.json' -or -name '*.xml' | grep -v '/contexts/'".format(storage_dir),
                shell=True,
                stdout=subprocess.PIPE,
            ).communicate()[0].split("\n"):
                f = os.path.basename(file_abs)
                if f:
                    files.add((f, file_abs))

        assert files, 'no data files found'

        unused_files = []
        for ft in files:
            if not search_code(ft[0]):
                unused_files.append(ft[1])

        """
        TODO mention_some_really_used_file_here.json
        """
        assert len(unused_files) != len(files), 'weird error - all %d files are unused' % len(files)
        assert not unused_files, (
            '\n%s\nfound %d unused files. Please remove or mention them in the comment above this assert' % (
                "svn del " + " ".join(sorted(unused_files)), len(unused_files)
            )
        )
