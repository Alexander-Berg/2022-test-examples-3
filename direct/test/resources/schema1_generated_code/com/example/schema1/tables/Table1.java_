/*
 * This file is generated by jOOQ.
 */
package com.example.schema1.tables;


import com.example.schema1.Indexes;
import com.example.schema1.Keys;
import com.example.schema1.Schema1;
import com.example.schema1.tables.records.Table1Record;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Table1 extends TableImpl<Table1Record> {

    private static final long serialVersionUID = 1963106223;

    /**
     * The reference instance of <code>schema1.table1</code>
     */
    public static final Table1 TABLE1 = new Table1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Table1Record> getRecordType() {
        return Table1Record.class;
    }

    /**
     * The column <code>schema1.table1.id</code>.
     */
    public final TableField<Table1Record, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>schema1.table1.id2</code>.
     */
    public final TableField<Table1Record, Long> ID2 = createField(DSL.name("id2"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>schema1.table1.long_val</code>.
     */
    public final TableField<Table1Record, Long> LONG_VAL = createField(DSL.name("long_val"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>schema1.table1.ulong_val</code>.
     */
    public final TableField<Table1Record, Long> ULONG_VAL = createField(DSL.name("ulong_val"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>schema1.table1.ulong_hash</code>.
     */
    public final TableField<Table1Record, ULong> ULONG_HASH = createField(DSL.name("ulong_hash"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>schema1.table1.int_val</code>.
     */
    public final TableField<Table1Record, Long> INT_VAL = createField(DSL.name("int_val"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>schema1.table1.uint_val</code>.
     */
    public final TableField<Table1Record, Long> UINT_VAL = createField(DSL.name("uint_val"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>schema1.table1</code> table reference
     */
    public Table1() {
        this(DSL.name("table1"), null);
    }

    /**
     * Create an aliased <code>schema1.table1</code> table reference
     */
    public Table1(String alias) {
        this(DSL.name(alias), TABLE1);
    }

    /**
     * Create an aliased <code>schema1.table1</code> table reference
     */
    public Table1(Name alias) {
        this(alias, TABLE1);
    }

    private Table1(Name alias, Table<Table1Record> aliased) {
        this(alias, aliased, null);
    }

    private Table1(Name alias, Table<Table1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Table1(Table<O> child, ForeignKey<O, Table1Record> key) {
        super(child, key, TABLE1);
    }

    @Override
    public Schema getSchema() {
        return Schema1.SCHEMA1;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TABLE1_ID2, Indexes.TABLE1_PRIMARY);
    }

    @Override
    public UniqueKey<Table1Record> getPrimaryKey() {
        return Keys.KEY_TABLE1_PRIMARY;
    }

    @Override
    public List<UniqueKey<Table1Record>> getKeys() {
        return Arrays.<UniqueKey<Table1Record>>asList(Keys.KEY_TABLE1_PRIMARY);
    }

    @Override
    public Table1 as(String alias) {
        return new Table1(DSL.name(alias), this);
    }

    @Override
    public Table1 as(Name alias) {
        return new Table1(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Table1 rename(String name) {
        return new Table1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Table1 rename(Name name) {
        return new Table1(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Long, ULong, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
