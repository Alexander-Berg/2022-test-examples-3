// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Suggest SuggestTypeStaff Should pass props to base component 1`] = `
<WithBemMod(Suggest)[type:staff]
  prop1="val1"
  prop2="val2"
  type="staff"
>
  <WithBemModEnhance(MockComponent)
    className="Suggest_type_staff"
    prop1="val1"
    prop2="val2"
    type="staff"
  >
    <MockComponent
      className="Suggest_type_staff"
      dataProvider={[Function]}
      prop1="val1"
      prop2="val2"
      renderChoice={[Function]}
      renderChosen={[Function]}
    >
      <input
        data-attrs={
          Object {
            "className": "Suggest_type_staff",
            "dataProvider": [Function],
            "prop1": "val1",
            "prop2": "val2",
            "renderChoice": [Function],
            "renderChosen": [Function],
          }
        }
        id="mockComponent"
        onChange={[Function]}
      />
    </MockComponent>
  </WithBemModEnhance(MockComponent)>
</WithBemMod(Suggest)[type:staff]>
`;

exports[`Suggest SuggestTypeStaff Should render simple component 1`] = `
<WithBemMod(Suggest)[type:staff]
  type="staff"
>
  <WithBemModEnhance(MockComponent)
    className="Suggest_type_staff"
    type="staff"
  >
    <MockComponent
      className="Suggest_type_staff"
      dataProvider={[Function]}
      renderChoice={[Function]}
      renderChosen={[Function]}
    >
      <input
        data-attrs={
          Object {
            "className": "Suggest_type_staff",
            "dataProvider": [Function],
            "renderChoice": [Function],
            "renderChosen": [Function],
          }
        }
        id="mockComponent"
        onChange={[Function]}
      />
    </MockComponent>
  </WithBemModEnhance(MockComponent)>
</WithBemMod(Suggest)[type:staff]>
`;

exports[`Suggest SuggestWithDataprovider Should change component props after onValueChange call 1`] = `
<Component
  dataProvider={[Function]}
>
  <MockComponent
    choices={
      Array [
        Object {
          "id": "test1",
        },
        Object {
          "id": "test2",
        },
      ]
    }
    loading={false}
    onValueChange={[Function]}
  >
    <input
      data-attrs={
        Object {
          "choices": Array [
            Object {
              "id": "test1",
            },
            Object {
              "id": "test2",
            },
          ],
          "loading": false,
          "onValueChange": [Function],
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;

exports[`Suggest SuggestWithDataprovider Should not crash on dataProvider rejected promise 1`] = `
<Component
  dataProvider={[Function]}
>
  <MockComponent
    choices={Array []}
    loading={false}
    onValueChange={[Function]}
  >
    <input
      data-attrs={
        Object {
          "choices": Array [],
          "loading": false,
          "onValueChange": [Function],
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;

exports[`Suggest SuggestWithDataprovider Should render simple component 1`] = `
<Component
  dataProvider={[Function]}
>
  <MockComponent
    choices={Array []}
    loading={false}
    onValueChange={[Function]}
  >
    <input
      data-attrs={
        Object {
          "choices": Array [],
          "loading": false,
          "onValueChange": [Function],
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;

exports[`Suggest SuggestWithDataprovider Should set loading state while fetching 1`] = `
<Component
  dataProvider={[Function]}
>
  <MockComponent
    choices={Array []}
    loading={true}
    onValueChange={[Function]}
  >
    <input
      data-attrs={
        Object {
          "choices": Array [],
          "loading": true,
          "onValueChange": [Function],
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;

exports[`Suggest SuggestWithDefaults Should not fail with rejected promise 1`] = `
<Component
  chosen={Array []}
  dataProvider={[Function]}
  defaults={
    Array [
      "first",
      "second",
    ]
  }
  onChosenChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <MockComponent
    checkDisabled={[Function]}
    chosen={Array []}
    dataProvider={[Function]}
    loading={false}
    onChosenChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <input
      data-attrs={
        Object {
          "checkDisabled": [Function],
          "chosen": Array [],
          "dataProvider": [Function],
          "loading": false,
          "onChosenChange": [MockFunction] {
            "calls": Array [
              Array [
                Array [],
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;

exports[`Suggest SuggestWithDefaults Should not set defaults with other chosen items 1`] = `
<Component
  chosen={
    Array [
      Object {
        "id": "chosen1",
      },
      Object {
        "id": "chosen2",
      },
    ]
  }
  dataProvider={[Function]}
  defaults={
    Array [
      "first",
      "second",
    ]
  }
  onChosenChange={[MockFunction]}
>
  <MockComponent
    checkDisabled={[Function]}
    chosen={
      Array [
        Object {
          "id": "chosen1",
        },
        Object {
          "id": "chosen2",
        },
      ]
    }
    dataProvider={[Function]}
    loading={false}
    onChosenChange={[MockFunction]}
  >
    <input
      data-attrs={
        Object {
          "checkDisabled": [Function],
          "chosen": Array [
            Object {
              "id": "chosen1",
            },
            Object {
              "id": "chosen2",
            },
          ],
          "dataProvider": [Function],
          "loading": false,
          "onChosenChange": [MockFunction],
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;

exports[`Suggest SuggestWithDefaults Should render component with defaults 1`] = `
<Component
  dataProvider={[Function]}
  defaults={
    Array [
      "first",
      "second",
    ]
  }
  onChosenChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [
            Object {
              "id": "first1",
            },
            Object {
              "id": "second1",
            },
          ],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <MockComponent
    checkDisabled={[Function]}
    dataProvider={[Function]}
    loading={false}
    onChosenChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [
              Object {
                "id": "first1",
              },
              Object {
                "id": "second1",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <input
      data-attrs={
        Object {
          "checkDisabled": [Function],
          "chosen": undefined,
          "dataProvider": [Function],
          "loading": false,
          "onChosenChange": [MockFunction] {
            "calls": Array [
              Array [
                Array [
                  Object {
                    "id": "first1",
                  },
                  Object {
                    "id": "second1",
                  },
                ],
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;

exports[`Suggest SuggestWithDefaults Should render component without defaults 1`] = `
<Component
  dataProvider={[Function]}
  defaults={Array []}
  onChosenChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <MockComponent
    checkDisabled={[Function]}
    dataProvider={[Function]}
    loading={false}
    onChosenChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <input
      data-attrs={
        Object {
          "checkDisabled": [Function],
          "chosen": undefined,
          "dataProvider": [Function],
          "loading": false,
          "onChosenChange": [MockFunction] {
            "calls": Array [
              Array [
                Array [],
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;

exports[`Suggest SuggestWithExcludedRobots Should render simple component 1`] = `
<WithBemMod(Suggest)[excludeRobots:true]
  excludeRobots={true}
>
  <WithBemModEnhance(MockComponent)
    className="Suggest_excludeRobots"
    excludeRobots={true}
  >
    <MockComponent
      checkDisabled={[Function]}
      className="Suggest_excludeRobots"
      excludeRobots={true}
      handleChoices={[Function]}
    >
      <input
        data-attrs={
          Object {
            "checkDisabled": [Function],
            "className": "Suggest_excludeRobots",
            "excludeRobots": true,
            "handleChoices": [Function],
          }
        }
        id="mockComponent"
        onChange={[Function]}
      />
    </MockComponent>
  </WithBemModEnhance(MockComponent)>
</WithBemMod(Suggest)[excludeRobots:true]>
`;

exports[`Suggest SuggestWithHandlers Should render simple component 1`] = `
<Component
  choices={
    Array [
      Object {
        "id": "test1",
      },
      Object {
        "id": "test2",
      },
    ]
  }
>
  <MockComponent
    choices={
      Array [
        Object {
          "id": "test1",
        },
        Object {
          "id": "test2",
        },
      ]
    }
    chosen={Array []}
    onChosenChange={[Function]}
    onOpenedChange={[Function]}
    onPickedChange={[Function]}
    onValueChange={[Function]}
    opened={false}
    picked={Array []}
    value=""
  >
    <input
      data-attrs={
        Object {
          "choices": Array [
            Object {
              "id": "test1",
            },
            Object {
              "id": "test2",
            },
          ],
          "chosen": Array [],
          "onChosenChange": [Function],
          "onOpenedChange": [Function],
          "onPickedChange": [Function],
          "onValueChange": [Function],
          "opened": false,
          "picked": Array [],
          "value": "",
        }
      }
      id="mockComponent"
      onChange={[Function]}
    />
  </MockComponent>
</Component>
`;
