import assert from 'assert';

import { gentlyCut, gentlyCuts, separateWith } from './text';

describe('text', () => {
    describe('gentlyCut', () => {
        it('законченное предложение без обрезания', () => {
            assert.strictEqual(
                gentlyCut('законченное предложение.', 23),
                'законченное предложение.'
            );
        });

        it('законченное предложение без обрезания с учётом точки в конце', () => {
            assert.strictEqual(
                gentlyCut('законченное предложение.', 22),
                'законченное предложение.'
            );
        });

        it('обрезание законченного предложения', () => {
            assert.strictEqual(
                gentlyCut('законченное предложение.', 21),
                'законченное предложен…'
            );
        });

        it('обрезание законченного предложения с продолжением', () => {
            assert.strictEqual(
                gentlyCut('законченное предложение. с продолжением', 25),
                'законченное предложение…'
            );
        });

        it('обрезание законченной части предложения, разделённая запятой', () => {
            assert.strictEqual(
                gentlyCut('законченная часть предложения, разделённая запятой', 30),
                'законченная часть предложения…'
            );
        });

        it('обрезание фразы после пробела с его захватом', () => {
            assert.strictEqual(
                gentlyCut('законченная фраза разделённая пробелом', 18),
                'законченная фраза …'
            );
        });

        it('обрезание фразы до пробела с его захватом', () => {
            assert.strictEqual(
                gentlyCut('обрезанная до пробела фраза', 21),
                'обрезанная до пробела …'
            );
        });

        it('обрезание фразы с разрывом слова посередине', () => {
            assert.strictEqual(
                gentlyCut('разорванное посередине слово', 26),
                'разорванное посередине сло…'
            );
        });

        it('обрезание с разрывом слова на первой букве', () => {
            assert.strictEqual(
                gentlyCut('разорванное посередине слово', 24),
                'разорванное посередине …'
            );

            assert.strictEqual(
                gentlyCut(' тест', 2),
                ' …'
            );
        });

        it('обрезание с кастомными символами', () => {
            assert.strictEqual(
                gentlyCut('обрезание с кастомными символами', 20, '>:-)'),
                'обрезание с кастомны>:-)'
            );
        });

        it('обрезание с кастомными символами с захватом пробела', () => {
            assert.strictEqual(
                gentlyCut('обрезание с кастомными символами', 22, '>:-)'),
                'обрезание с кастомными >:-)'
            );
        });
    });

    describe('gentlyCuts', () => {
        it('без обрезания', () => {
            assert.deepStrictEqual(
                gentlyCuts(['законченное', 'предложение.'], 22),
                ['законченное', 'предложение.']
            );
        });

        it('без обрезания с учётом точки в конце', () => {
            assert.deepStrictEqual(
                gentlyCuts(['законченное', 'предложение.'], 21),
                ['законченное', 'предложение.']
            );
        });

        it('обрезание законченного предложения', () => {
            assert.deepStrictEqual(
                gentlyCuts(['законченное', 'предложение.'], 20),
                ['законченное', 'предложен…']
            );
        });

        it('обрезание законченного предложения с продолжением', () => {
            assert.deepStrictEqual(
                gentlyCuts(['законченное', 'предложение', 'с продолжением'], 26),
                ['законченное', 'предложение', 'с пр…']
            );
        });

        it('обрезание с кастомными символами', () => {
            assert.deepStrictEqual(
                gentlyCuts(['обрезание с', 'кастомными символами'], 19, '>:-)'),
                ['обрезание с', 'кастомны>:-)']
            );
        });

        it('обрезание с кастомными символами с захватом пробела', () => {
            assert.deepStrictEqual(
                gentlyCuts(['обрезание с', 'кастомными символами'], 21, '>:-)'),
                ['обрезание с', 'кастомными >:-)']
            );
        });
    });

    describe('separateWith', () => {
        it('объект', () => {
            assert.deepStrictEqual(
                separateWith(['законченное', 'предложение.'], { any: 'item' }),
                ['законченное', { any: 'item' }, 'предложение.']
            );
        });

        it('строка', () => {
            assert.deepStrictEqual(
                separateWith(['законченное', 'предложение', 'с продолжением'], 'string item'),
                ['законченное', 'string item', 'предложение', 'string item', 'с продолжением']
            );
        });

        it('функция', () => {
            assert.deepStrictEqual(
                separateWith(['законченное', 'предложение', 'с продолжением'], n => n),
                ['законченное', 0, 'предложение', 1, 'с продолжением']
            );
        });
    });
});
