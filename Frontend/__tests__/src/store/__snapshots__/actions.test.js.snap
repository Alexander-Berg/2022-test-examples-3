// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async actions should change filter and show all \`match\` notifications 1`] = `
Array [
  Object {
    "filter": "match",
    "type": "SET_FILTER",
  },
]
`;

exports[`async actions should change filter to \`test\` and show all \`test\` notifications 1`] = `
Array [
  Object {
    "filter": "test",
    "type": "SET_FILTER",
  },
]
`;

exports[`async actions should dispatch update unviewed counter 1`] = `
Object {
  "args": Array [
    0,
  ],
  "procedure": "onUpdateCounter",
}
`;

exports[`async actions should dispatch update unviewed counter 2`] = `
Array [
  Object {
    "payload": 0,
    "type": "UPDATE_UNVIEWED",
  },
]
`;

exports[`async actions should fetch services 1`] = `
Object {
  "args": Array [
    15,
  ],
  "procedure": "onUpdateCounter",
}
`;

exports[`async actions should fetch services 2`] = `
Array [
  Object {
    "payload": Object {
      "avatarUrlTemplate": "https://yapic.yandex.net/get/uid/islands-middle",
      "notificationsDatabaseId": "test_notifications_db",
      "settingsDatabaseId": "test_settings_db",
    },
    "type": "UPDATE_CONFIG",
  },
  Object {
    "services": Array [
      Record {
        "block_collection": "test_blocks",
        "collectionId": "services",
        "message_collection": "test_message",
        "name": "Test",
        "recordId": "test",
        "settings": Object {
          "preference": Object {
            "enabled": true,
            "text": "Preference",
          },
          "setting": Object {
            "enabled": true,
            "text": "Setting",
          },
        },
        "settings_collection": "test_common_settings",
        "unviewed_collection": "meta",
        "unviewed_record": "id",
      },
    ],
    "type": "UPDATE_SERVICES",
  },
  Object {
    "payload": Object {
      "serviceId": "test",
      "serviceSettings": Record {
        "call_to_ticket": false,
        "collectionId": "test_common_settings",
        "recordId": "all",
        "unexisting": true,
      },
    },
    "type": "UPDATE_SETTINGS",
  },
  Object {
    "payload": 15,
    "type": "UPDATE_UNVIEWED",
  },
  Object {
    "payload": Object {
      "countOfNotificationsByService": Object {
        "test": 5,
      },
      "countOfServicesWithNotifications": 1,
      "notifications": Array [
        Record {
          "action_link": null,
          "collectionId": "test_blocks",
          "is_read": false,
          "message": Array [
            "",
            Object {
              "text": "",
              "type": "_missing_",
            },
            " please sign in",
          ],
          "meta": Object {
            "username": Object {
              "text": "",
              "type": "_missing_",
            },
          },
          "mtime": 13,
          "recordId": "abc08",
          "service": "test",
        },
        Record {
          "action_link": null,
          "collectionId": "test_blocks",
          "is_read": true,
          "message": Array [
            "",
            Object {
              "text": "User 1",
              "type": "_missing_",
            },
            " please open ",
            Object {
              "text": "very-very-very-very-...",
              "type": "link",
            },
            "",
          ],
          "meta": Object {
            "link": Object {
              "text": "very-very-very-very-...",
              "type": "link",
            },
            "username": Object {
              "text": "User 1",
              "type": "_missing_",
            },
          },
          "mtime": 7,
          "recordId": "abc04",
          "service": "test",
        },
        Record {
          "action_link": null,
          "collectionId": "test_blocks",
          "is_read": true,
          "message": Array [
            "",
            Object {
              "text": "User 1",
              "type": "_missing_",
            },
            " please open ",
            Object {
              "text": "very-very-very-....txt",
              "type": "resource",
            },
            "",
          ],
          "meta": Object {
            "link": Object {
              "text": "very-very-very-....txt",
              "type": "resource",
            },
            "username": Object {
              "text": "User 1",
              "type": "_missing_",
            },
          },
          "mtime": 5,
          "recordId": "abc03",
          "service": "test",
        },
        Record {
          "action_link": null,
          "collectionId": "test_blocks",
          "is_read": false,
          "message": Array [
            "Dummy message 02",
          ],
          "meta": Object {},
          "mtime": 2,
          "recordId": "abc02",
          "service": "test",
        },
        Record {
          "action_link": null,
          "collectionId": "test_blocks",
          "is_read": false,
          "message": Array [
            "Dummy message 01",
          ],
          "meta": Object {
            "entity": Object {
              "preview": "downloader.yandex.com.tr",
              "resource_type": "dir",
              "type": "resource",
            },
          },
          "mtime": 1,
          "preview": "entity",
          "preview_src": "downloader.yandex.co.uk",
          "recordId": "abc01",
          "service": "test",
        },
      ],
    },
    "type": "UPDATE_NOTIFICATIONS",
  },
]
`;

exports[`async actions should not reset unviewed counter because service has no counter record 1`] = `
Array [
  Object {
    "payload": 0,
    "type": "UPDATE_UNVIEWED",
  },
]
`;

exports[`async actions should not reset unviewed counter because unread counter is zeroed 1`] = `Array []`;

exports[`async actions should reset unviewed counter 1`] = `
Array [
  Object {
    "payload": 0,
    "type": "UPDATE_UNVIEWED",
  },
]
`;

exports[`async actions should send settings and insert record fields 1`] = `
Transaction {
  "db": DB {
    "config": Object {
      "apiHost": undefined,
      "databaseId": "test_settings_db",
    },
  },
  "operations": Array [
    Object {
      "records": Object {
        "collection_id": "test_common_settings",
        "fields": Object {
          "dummy": 5,
        },
        "record_id": "all",
      },
      "type": "insert",
    },
  ],
}
`;

exports[`async actions should send settings and insert record fields 2`] = `Array []`;

exports[`async actions should send settings and update record fields 1`] = `
Transaction {
  "db": DB {
    "config": Object {
      "apiHost": undefined,
      "databaseId": "test_settings_db",
    },
  },
  "operations": Array [
    Object {
      "fields": Object {
        "dummy": 5,
      },
      "record": Record {
        "call_to_ticket": false,
        "collectionId": "test_common_settings",
        "recordId": "all",
        "unexisting": true,
      },
      "type": "update",
    },
  ],
}
`;

exports[`async actions should send settings and update record fields 2`] = `Array []`;

exports[`async actions should set all blocks as read 1`] = `
Array [
  Object {
    "payload": Object {
      "is_read": true,
    },
    "recordId": "abc01",
    "type": "UPDATE_NOTIFICATION",
  },
]
`;

exports[`async actions should set block as read 1`] = `
Transaction {
  "db": DB {
    "config": Object {
      "apiHost": undefined,
      "databaseId": "test_notifications_db",
    },
  },
  "operations": Array [
    Object {
      "fields": Object {
        "is_read": true,
      },
      "record": Record {
        "collectionId": "test_blocks",
        "is_read": false,
        "meta": "{\\"entity\\":{\\"type\\":\\"resource\\",\\"resource_type\\":\\"dir\\",\\"preview\\":\\"downloader.yandex.com.tr\\"}}",
        "mtime": 1,
        "preview": "entity",
        "recordId": "abc01",
      },
      "type": "update",
    },
  ],
}
`;

exports[`async actions should set block as read 2`] = `
Array [
  Object {
    "payload": Object {
      "is_read": true,
    },
    "recordId": "abc01",
    "type": "UPDATE_NOTIFICATION",
  },
]
`;

exports[`plain actions should dispatch setFilter 1`] = `
Array [
  Object {
    "filter": Object {
      "filter": "f",
    },
    "type": "SET_FILTER",
  },
]
`;

exports[`plain actions should dispatch toggleSettings 1`] = `
Array [
  Object {
    "notificationsSettingsEnabled": Object {
      "notificationsSettingsEnabled": true,
    },
    "type": "TOGGLE_SETTINGS",
  },
]
`;

exports[`plain actions should dispatch updateConfig 1`] = `
Array [
  Object {
    "payload": Object {
      "visible": false,
    },
    "type": "UPDATE_CONFIG",
  },
]
`;

exports[`plain actions should dispatch updateNotification 1`] = `
Array [
  Object {
    "payload": Object {
      "name": "Test",
    },
    "recordId": "1",
    "type": "UPDATE_NOTIFICATION",
  },
]
`;

exports[`plain actions should dispatch updateNotifications 1`] = `
Array [
  Object {
    "payload": Array [
      Object {
        "name": "Notification",
        "recordId": "1",
      },
    ],
    "type": "UPDATE_NOTIFICATIONS",
  },
]
`;

exports[`plain actions should dispatch updateServices 1`] = `
Array [
  Object {
    "services": Array [
      Object {
        "service": Object {
          "name": "Test",
        },
      },
    ],
    "type": "UPDATE_SERVICES",
  },
]
`;

exports[`plain actions should dispatch updateSettings 1`] = `
Array [
  Object {
    "payload": Object {
      "setting": true,
    },
    "type": "UPDATE_SETTINGS",
  },
]
`;
