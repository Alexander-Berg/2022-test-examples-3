init_by_lua_block {
    tvm = require "nginx.tvm"
}

upstream mpfs {
    server 127.0.0.1:3131;
}


server {
    listen  80  default;
    listen  [::]:80 default ipv6only=on;

    listen 443 default ssl;
    listen [::]:443 default ipv6only=on ssl;

    server_name mpfs.disk.yandex.net;

    include ssl/https.conf;

    tvm_load_asymm_keys /etc/nginx/keys/tvm-asymmetric.public;

    large_client_header_buffers 16 768k;
    include uwsgi_params;
    uwsgi_buffers 16 64k;
    uwsgi_read_timeout 600;
    uwsgi_next_upstream error timeout http_500;

    proxy_redirect              off;
    proxy_set_header Connection ""; # should be cleared for 1.1
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    keepalive_timeout     120 120;


    location @auth_pass {
        auth_sign $uri/$arg_ts;
        auth_sign_signature $arg_sign;
        auth_sign_expire $arg_ts;
        auth_sign_hash sha256;
        include /etc/yandex/disk-mpfs-token;

        uwsgi_pass mpfs;
    }

    location @tvm_pass {
        set $uids '';
        set $client_ids '';

        access_by_lua '
            local ticket_string = ngx.req.get_headers().ticket
            local tvm_debug = true

            if ticket_string == nil then
                ngx.log(ngx.ERR, "No ticket was passed")
                ngx.exit(401)
            end

            local ticket, error = tvm.check_ticket(ticket_string)
            if error then
                ngx.log(ngx.ERR, "Error while checking ticket: ", error)
                ngx.exit(403)
            end

            if tvm_debug then
                ngx.var.uids = ticket:get_uids()
                ngx.var.client_ids = ticket:get_client_ids()
                ngx.log(ngx.ERR, "client_ids: ", ngx.var.client_ids, ", uids: ", ngx.var.uids)
            end 

            local valid_client_ids = {69, 75}
            local i = 1

            while valid_client_ids[i] do
                local check_result = ticket:check_client_id(valid_client_ids[i])
                if check_result then
                    return
                end
                i = i+1
            end

            ngx.log(ngx.ERR, "Ticket check was failed")
            ngx.exit(403)
            
        ';

        uwsgi_pass mpfs;
    }   

    location @simple_pass {
        uwsgi_pass mpfs;
    }   


    location / {
        set $qloud_net_sign 0;
        if ($qloud_net != 0) {
                set $qloud_net_sign "${qloud_net}${arg_sign}";
        }
        # Skip check, if qloud_net without sign arg
        if ($qloud_net != $qloud_net_sign) {
            error_page 402 = @auth_pass;
            return 402;
        }

        if ($auth_net != 0) {
            error_page 402 = @auth_pass;
            return 402;
        }

        if ($tvm_net != 0 ) {
           error_page 402 = @tvm_pass;
           return 402;
        }
    
        error_page 402 = @simple_pass;
        return 402;
    }

    location = /ping {
        uwsgi_read_timeout 10;
        uwsgi_pass mpfs;
    }

    location = /queue/count {
        uwsgi_read_timeout 10;
        uwsgi_pass mpfs;
        
    }

    access_log  /var/log/nginx/mpfs/access.log  proxy;
    error_log   /var/log/nginx/mpfs/error.log;
}

server {
    listen 3133 default;
    listen [::]:3133 default ipv6only=on;
    location = /queue/count {
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:3131;
        uwsgi_buffers 16 64k;
        uwsgi_read_timeout 10;
    }
}


