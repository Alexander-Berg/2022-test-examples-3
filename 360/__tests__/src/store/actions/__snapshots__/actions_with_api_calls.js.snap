// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dispatch download should assign location to some url 1`] = `
Array [
  "url/for/file",
]
`;

exports[`dispatch download should assign location to url for file from archive 1`] = `
Array [
  "some/url/for/file/from/archive",
]
`;

exports[`dispatch downloadSelected should assign location to url for file from archive 1`] = `
Array [
  "some/url/for/file/from/archive",
]
`;

exports[`dispatch updateActions got actions-for-archive from API
should update store.doc.actions and store.archive.fileActions 1`] = `
Object {
  "download": Object {
    "allow": true,
    "state": "",
  },
  "edit": Object {
    "allow": true,
    "folderUrl": "ссылка на папку \\"Загрузки\\" Диска в тесте /update-actions",
    "state": "",
    "url": "ссылка на редактирование в тесте на update-actions",
  },
  "print": Object {
    "allow": true,
    "state": "print-state",
  },
  "save": Object {
    "allow": true,
    "buttonUrl": "ссылка кнопки сохранения в тесте на update-actions",
    "folderUrl": "ссылка на папку, в которую сохранён файл, в тесте на update-actions",
    "state": "save-state",
  },
  "share": Object {
    "allow": true,
    "isFromMail": true,
    "saved": true,
    "state": "share-state",
    "url": "ссылка поделения в тесте на update-actions",
  },
}
`;

exports[`dispatch updateActions got actions-for-archive from API
should update store.doc.actions and store.archive.fileActions 2`] = `
Object {
  "download": Object {
    "allow": true,
    "progressing": Object {},
  },
  "save": Object {
    "allow": true,
    "folderUrl": "",
    "name": "",
    "progressing": Object {},
    "state": "",
  },
}
`;

exports[`dispatch updateActions got actions-for-file-from-archive from API
should update only "save" and "download" in store.doc.actions and store.archive.fileActions 1`] = `
Object {
  "download": Object {
    "allow": true,
    "state": "",
  },
  "edit": Object {
    "allow": false,
    "folderUrl": "",
    "state": "",
    "url": "",
  },
  "print": Object {
    "allow": false,
    "state": "",
  },
  "save": Object {
    "allow": true,
    "buttonUrl": "ссылка кнопки сохранения в тесте на update-actions-for-file-from-archive",
    "folderUrl": "ссылка на папку, в которую сохранён файл, в тесте на update-actions-for-file-from-archive",
    "state": "another-save-state",
  },
  "share": Object {
    "allow": false,
    "isFromMail": false,
    "saved": false,
    "state": "",
    "url": "",
  },
}
`;

exports[`dispatch updateActions got actions-for-file-from-archive from API
should update only "save" and "download" in store.doc.actions and store.archive.fileActions 2`] = `
Object {
  "download": Object {
    "allow": true,
    "progressing": Object {},
  },
  "save": Object {
    "allow": true,
    "folderUrl": "",
    "name": "",
    "progressing": Object {},
    "state": "",
  },
}
`;

exports[`dispatch updateActions got actions-for-plain-file from API
should update store.doc.actions and not change store.archive.fileActions 1`] = `
Object {
  "download": Object {
    "allow": true,
    "state": "",
  },
  "edit": Object {
    "allow": true,
    "folderUrl": "ссылка на папку \\"Загрузки\\" Диска в тесте /update-actions",
    "state": "",
    "url": "ссылка на редактирование в тесте на update-actions",
  },
  "print": Object {
    "allow": true,
    "state": "print-state",
  },
  "save": Object {
    "allow": true,
    "buttonUrl": "ссылка кнопки сохранения в тесте на update-actions",
    "folderUrl": "ссылка на папку, в которую сохранён файл, в тесте на update-actions",
    "state": "save-state",
  },
  "share": Object {
    "allow": true,
    "isFromMail": true,
    "saved": true,
    "state": "share-state",
    "url": "ссылка поделения в тесте на update-actions",
  },
}
`;

exports[`dispatch updateActions got actions-for-plain-file from API
should update store.doc.actions and not change store.archive.fileActions 2`] = `
Object {
  "download": Object {
    "allow": false,
    "progressing": Object {},
  },
  "save": Object {
    "allow": false,
    "folderUrl": "",
    "name": "",
    "progressing": Object {},
    "state": "",
  },
}
`;

exports[`dispatch updateActions got error from API
should not change store.doc.actions and store.archive.fileActions 1`] = `
Object {
  "download": Object {
    "allow": false,
    "state": "",
  },
  "edit": Object {
    "allow": false,
    "folderUrl": "",
    "state": "",
    "url": "",
  },
  "print": Object {
    "allow": false,
    "state": "",
  },
  "save": Object {
    "allow": false,
    "buttonUrl": "",
    "folderUrl": "",
    "state": "",
  },
  "share": Object {
    "allow": false,
    "isFromMail": false,
    "saved": false,
    "state": "",
    "url": "",
  },
}
`;

exports[`dispatch updateActions got error from API
should not change store.doc.actions and store.archive.fileActions 2`] = `
Object {
  "download": Object {
    "allow": false,
    "progressing": Object {},
  },
  "save": Object {
    "allow": false,
    "folderUrl": "",
    "name": "",
    "progressing": Object {},
    "state": "",
  },
}
`;

exports[`dispatch updateArchiveListing should change store.archive to {state:WAIT} right now and to {state:READY,listing,nestedCount} after callback 1`] = `
Object {
  "fileActions": Object {
    "download": Object {
      "allow": false,
      "progressing": Object {},
    },
    "save": Object {
      "allow": false,
      "folderUrl": "",
      "name": "",
      "progressing": Object {},
      "state": "",
    },
  },
  "listing": Object {},
  "nestedCount": 0,
  "path": "",
  "selectedFile": Object {
    "encrypted": false,
    "name": "",
    "path": "",
    "viewable": false,
  },
  "state": "WAIT",
}
`;

exports[`dispatch updateArchiveListing should change store.archive to {state:WAIT} right now and to {state:READY,listing,nestedCount} after callback 2`] = `
Object {
  "fileActions": Object {
    "download": Object {
      "allow": false,
      "progressing": Object {},
    },
    "save": Object {
      "allow": false,
      "folderUrl": "",
      "name": "",
      "progressing": Object {},
      "state": "",
    },
  },
  "listing": Object {
    "file": Array [
      Object {
        "name": "root_file_1.ext",
        "path": "root_file_1.ext",
        "viewable": true,
      },
      Object {
        "encrypted": true,
        "name": "root_file_2.ext",
        "path": "root_file_2.ext",
        "viewable": false,
      },
    ],
    "folder": Array [
      Object {
        "file": Array [
          Object {
            "name": "file-in-folder.txt",
            "path": "root_folder_1/file-in-folder.txt",
            "viewable": true,
          },
        ],
        "folder": Array [
          Object {
            "file": Array [
              Object {
                "name": "file-in-folder-in-folder.ppc",
                "path": "root_folder_1/folder-in-folder/file-in-folder-in-folder.ppc",
                "unknownProp": "unknownValue",
              },
            ],
            "name": "folder-in-folder",
            "path": "root_folder_1/folder-in-folder",
          },
        ],
        "name": "root_folder_1",
        "path": "root_folder_1",
      },
    ],
  },
  "nestedCount": 5,
  "path": "",
  "selectedFile": Object {
    "encrypted": false,
    "name": "",
    "path": "",
    "viewable": false,
  },
  "state": "READY",
}
`;

exports[`dispatch updateArchiveListing should change store.archive.state to WAIT right now and to FAIL after callback 1`] = `
Object {
  "fileActions": Object {
    "download": Object {
      "allow": false,
      "progressing": Object {},
    },
    "save": Object {
      "allow": false,
      "folderUrl": "",
      "name": "",
      "progressing": Object {},
      "state": "",
    },
  },
  "listing": Object {},
  "nestedCount": 0,
  "path": "",
  "selectedFile": Object {
    "encrypted": false,
    "name": "",
    "path": "",
    "viewable": false,
  },
  "state": "WAIT",
}
`;

exports[`dispatch updateArchiveListing should change store.archive.state to WAIT right now and to FAIL after callback 2`] = `
Object {
  "fileActions": Object {
    "download": Object {
      "allow": false,
      "progressing": Object {},
    },
    "save": Object {
      "allow": false,
      "folderUrl": "",
      "name": "",
      "progressing": Object {},
      "state": "",
    },
  },
  "listing": Object {},
  "nestedCount": 0,
  "path": "",
  "selectedFile": Object {
    "encrypted": false,
    "name": "",
    "path": "",
    "viewable": false,
  },
  "state": "FAIL",
}
`;

exports[`dispatch updateArchiveListing should change store.archive.state to WAIT right now and to FAIL after callback 3`] = `
Object {
  "fileActions": Object {
    "download": Object {
      "allow": false,
      "progressing": Object {},
    },
    "save": Object {
      "allow": false,
      "folderUrl": "",
      "name": "",
      "progressing": Object {},
      "state": "",
    },
  },
  "listing": Object {},
  "nestedCount": 0,
  "path": "",
  "selectedFile": Object {
    "encrypted": false,
    "name": "",
    "path": "",
    "viewable": false,
  },
  "state": "WAIT",
}
`;

exports[`dispatch updateArchiveListing should change store.archive.state to WAIT right now and to FAIL after callback 4`] = `
Object {
  "fileActions": Object {
    "download": Object {
      "allow": false,
      "progressing": Object {},
    },
    "save": Object {
      "allow": false,
      "folderUrl": "",
      "name": "",
      "progressing": Object {},
      "state": "",
    },
  },
  "listing": Object {},
  "nestedCount": 0,
  "path": "",
  "selectedFile": Object {
    "encrypted": false,
    "name": "",
    "path": "",
    "viewable": false,
  },
  "state": "FAIL",
}
`;

exports[`dispatch updateDocIframe got Exception from API
should change store.doc.state to FAIL, store.doc.errorCode to exception 1`] = `
Object {
  "errorCode": "exception",
  "iframe": true,
  "state": "FAIL",
  "url": "",
}
`;

exports[`dispatch updateDocIframe got data.url from API
should change store.doc.state to READY, store.doc.url to some url 1`] = `
Object {
  "errorCode": "",
  "iframe": true,
  "state": "READY",
  "url": "/some/iframe/doc/url/",
}
`;

exports[`dispatch updateDocIframe got error from API
should change store.doc.state to FAIL, store.doc.errorCode to error 1`] = `
Object {
  "errorCode": "error",
  "iframe": true,
  "state": "FAIL",
  "url": "",
}
`;

exports[`dispatch updateDocPage for page 1, got READY from API after 1 retries
should change store.doc.pages[0] to {state:WAIT} right now and to {state:READY,html:[html],forceWidth,style,textInfo} after callback 1`] = `
Array [
  Object {
    "index": 1,
    "state": "WAIT",
  },
  Object {
    "index": 2,
  },
  Object {
    "index": 3,
  },
]
`;

exports[`dispatch updateDocPage for page 1, got READY from API after 1 retries
should change store.doc.pages[0] to {state:WAIT} right now and to {state:READY,html:[html],forceWidth,style,textInfo} after callback 2`] = `
Array [
  Object {
    "forceWidth": true,
    "html": "<div>Page HTML for \\"READY\\" test</div>",
    "index": 1,
    "state": "READY",
    "style": ".class{color:red;}",
    "textInfo": "what is it?",
  },
  Object {
    "index": 2,
  },
  Object {
    "index": 3,
  },
]
`;

exports[`dispatch updateDocPage for page 1, got READY from API after 3 retries
should change store.doc.pages[0] to {state:WAIT} right now and to {state:READY,html:[html],forceWidth,style,textInfo} after callback 1`] = `
Array [
  Object {
    "index": 1,
    "state": "WAIT",
  },
  Object {
    "index": 2,
  },
  Object {
    "index": 3,
  },
]
`;

exports[`dispatch updateDocPage for page 1, got READY from API after 3 retries
should change store.doc.pages[0] to {state:WAIT} right now and to {state:READY,html:[html],forceWidth,style,textInfo} after callback 2`] = `
Array [
  Object {
    "forceWidth": false,
    "html": "<div>Page HTML for \\"3 retries ok\\" test</div>",
    "index": 1,
    "state": "READY",
    "style": ".another-class{text-align:center;}",
    "textInfo": "???",
  },
  Object {
    "index": 2,
  },
  Object {
    "index": 3,
  },
]
`;

exports[`dispatch updateDocPage for page 2, got error from API after 1 retries
should change store.doc.pages[1].state to WAIT right now and to FAIL after callback 1`] = `
Array [
  Object {
    "index": 1,
  },
  Object {
    "index": 2,
    "state": "WAIT",
  },
  Object {
    "index": 3,
  },
]
`;

exports[`dispatch updateDocPage for page 2, got error from API after 1 retries
should change store.doc.pages[1].state to WAIT right now and to FAIL after callback 2`] = `
Array [
  Object {
    "index": 1,
  },
  Object {
    "index": 2,
    "state": "FAIL",
  },
  Object {
    "index": 3,
  },
]
`;

exports[`dispatch updateDocPage for page 2, got error from API after 3 retries
should change store.doc.pages[1].state to WAIT right now and to FAIL after callback 1`] = `
Array [
  Object {
    "index": 1,
  },
  Object {
    "index": 2,
    "state": "WAIT",
  },
  Object {
    "index": 3,
  },
]
`;

exports[`dispatch updateDocPage for page 2, got error from API after 3 retries
should change store.doc.pages[1].state to WAIT right now and to FAIL after callback 2`] = `
Array [
  Object {
    "index": 1,
  },
  Object {
    "index": 2,
    "state": "FAIL",
  },
  Object {
    "index": 3,
  },
]
`;

exports[`dispatch updateDocPage for page 3 (page as string), got READY from API after 1 retries
should change store.doc.pages[2] to {state:WAIT} right now and to {state:READY,html:[html],forceWidth,style,textInfo} after callback 1`] = `
Array [
  Object {
    "index": 1,
  },
  Object {
    "index": 2,
  },
  Object {
    "index": 3,
    "state": "WAIT",
  },
]
`;

exports[`dispatch updateDocPage for page 3 (page as string), got READY from API after 1 retries
should change store.doc.pages[2] to {state:WAIT} right now and to {state:READY,html:[html],forceWidth,style,textInfo} after callback 2`] = `
Array [
  Object {
    "index": 1,
  },
  Object {
    "index": 2,
  },
  Object {
    "forceWidth": true,
    "html": "<div>Page HTML for \\"READY\\" test</div>",
    "index": 3,
    "state": "READY",
    "style": ".class{color:red;}",
    "textInfo": "what is it?",
  },
]
`;

exports[`dispatch updateDocPage for page 3, got Exception from API after 1 retries
should change store.doc.pages[2].state to WAIT right now and to FAIL after callback 1`] = `
Array [
  Object {
    "index": 1,
  },
  Object {
    "index": 2,
  },
  Object {
    "index": 3,
    "state": "WAIT",
  },
]
`;

exports[`dispatch updateDocPage for page 3, got Exception from API after 1 retries
should change store.doc.pages[2].state to WAIT right now and to FAIL after callback 2`] = `
Array [
  Object {
    "index": 1,
  },
  Object {
    "index": 2,
  },
  Object {
    "index": 3,
    "state": "FAIL",
  },
]
`;

exports[`dispatch updateDocPageText should add text 1`] = `
Object {
  "index": 1,
  "text": Array [
    Object {
      "bottom": 40,
      "height": 20,
      "left": 10,
      "right": 80,
      "top": 20,
      "width": 70,
      "words": Array [
        Object {
          "content": "word1",
          "left": 10,
          "right": 30,
        },
        Object {
          "content": "word2",
          "left": 40,
          "right": 80,
        },
      ],
    },
    Object {
      "bottom": 80,
      "height": 20,
      "left": 10,
      "right": 50,
      "top": 60,
      "width": 40,
      "words": Array [
        Object {
          "content": "word3",
          "left": 10,
          "right": 50,
        },
      ],
    },
  ],
  "textInfo": true,
}
`;

exports[`dispatch updateDocPageText should assign textInfo=false 1`] = `
Object {
  "index": 1,
  "textInfo": false,
}
`;

exports[`dispatch updateDocPageText should not call backend for page with text 1`] = `
Object {
  "index": 3,
  "text": Array [
    Object {},
  ],
  "textInfo": true,
}
`;

exports[`dispatch updateDocPageText should not call backend for textInfo=false 1`] = `
Object {
  "index": 2,
  "textInfo": false,
}
`;

exports[`dispatch updateDocStatus got Exception from API
should change store.doc.state to FAIL, store.doc.errorCode to exception 1`] = `
Object {
  "errorCode": "exception",
  "pages": Array [],
  "state": "FAIL",
  "withoutSize": false,
}
`;

exports[`dispatch updateDocStatus got FAIL from API
should change store.doc.state to FAIL, store.doc.errorCode to UNSUPPORTED_CONVERTION 1`] = `
Object {
  "errorCode": "UNSUPPORTED_CONVERTION",
  "pages": Array [],
  "state": "FAIL",
  "withoutSize": false,
}
`;

exports[`dispatch updateDocStatus got READY from API
should change store.doc.state to READY, store.doc.pages to [{ index: 1 }, { index: 2 }], store.doc.withoutSize to true 1`] = `
Object {
  "errorCode": "",
  "pages": Array [
    Object {
      "index": 1,
    },
    Object {
      "index": 2,
    },
  ],
  "state": "READY",
  "withoutSize": true,
}
`;

exports[`dispatch updateDocStatus got WAIT from API
should change store.doc.state to WAIT and store.doc.reason to COPY 1`] = `
Object {
  "errorCode": "",
  "pages": Array [],
  "state": "WAIT",
  "withoutSize": false,
}
`;

exports[`dispatch updateDocStatus got unhadled error from API
should change store.doc.state to FAIL, store.doc.errorCode to "unhadled error" 1`] = `
Object {
  "errorCode": "unhadled error",
  "pages": Array [],
  "state": "FAIL",
  "withoutSize": false,
}
`;

exports[`dispatch updateOfficeEditorUrl got data.url from API
should set store.doc.actions.edit.url 1`] = `
Object {
  "allow": false,
  "editorType": undefined,
  "folderUrl": "ссылка на папку \\"Загрузки\\" Диска в тесте /get-office-editor-url",
  "state": "",
  "url": "ссылка на редактирование в тесте на get-office-editor-url",
}
`;

exports[`dispatch updateOfficeEditorUrl got error from API
should not change store.doc.actions.edit 1`] = `
Object {
  "allow": false,
  "folderUrl": "",
  "state": "",
  "url": "",
}
`;
