// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM api/entities/message/message-type.ts >>>

package com.yandex.xplat.mapi

import com.yandex.xplat.common.YSArray

public typealias MessageTypeFlag = Int

public open class MessageTypeFlags {
    companion object {
        @JvmStatic var delivery: MessageTypeFlag = 1 shl 0
        @JvmStatic var registration: MessageTypeFlag = 1 shl 1
        @JvmStatic var social: MessageTypeFlag = 1 shl 2
        @JvmStatic var people: MessageTypeFlag = 1 shl 3
        @JvmStatic var eticket: MessageTypeFlag = 1 shl 4
        @JvmStatic var eshop: MessageTypeFlag = 1 shl 5
        @JvmStatic var notification: MessageTypeFlag = 1 shl 6
        @JvmStatic var bounce: MessageTypeFlag = 1 shl 7
        @JvmStatic var official: MessageTypeFlag = 1 shl 8
        @JvmStatic var script: MessageTypeFlag = 1 shl 9
        @JvmStatic var dating: MessageTypeFlag = 1 shl 10
        @JvmStatic var greeting: MessageTypeFlag = 1 shl 11
        @JvmStatic var news: MessageTypeFlag = 1 shl 12
        @JvmStatic var sGrouponsite: MessageTypeFlag = 1 shl 13
        @JvmStatic var sDatingsite: MessageTypeFlag = 1 shl 14
        @JvmStatic var sETicket: MessageTypeFlag = 1 shl 15
        @JvmStatic var sBank: MessageTypeFlag = 1 shl 16
        @JvmStatic var sSocial: MessageTypeFlag = 1 shl 17
        @JvmStatic var sTravel: MessageTypeFlag = 1 shl 18
        @JvmStatic var sZDTicket: MessageTypeFlag = 1 shl 19
        @JvmStatic var sRealty: MessageTypeFlag = 1 shl 20
        @JvmStatic var sEShop: MessageTypeFlag = 1 shl 21
        @JvmStatic var sCompany: MessageTypeFlag = 1 shl 22
        @JvmStatic var sHotels: MessageTypeFlag = 1 shl 23
        @JvmStatic var transact: MessageTypeFlag = 1 shl 24
        @JvmStatic var personal: MessageTypeFlag = 1 shl 25
        @JvmStatic var tNews: MessageTypeFlag = 1 shl 26
        @JvmStatic var tSocial: MessageTypeFlag = 1 shl 27
        @JvmStatic var tNotification: MessageTypeFlag = 1 shl 28
        @JvmStatic var tPeople: MessageTypeFlag = 1 shl 29
    }
}

public fun messageTypeMaskFromServerMessageTypes(types: YSArray<Int>): MessageTypeFlag {
    var result: MessageTypeFlag = 0
    for (type in types) {
        val converted = serverMessageTypeFromInt32(type)
        if (converted != null) {
            result = result or converted
        }
    }
    return result
}

private fun serverMessageTypeFromInt32(value: Int): MessageTypeFlag? {
    when (value) {
        1 -> {
            return MessageTypeFlags.delivery
        }
        2 -> {
            return MessageTypeFlags.registration
        }
        3 -> {
            return MessageTypeFlags.social
        }
        4 -> {
            return MessageTypeFlags.people
        }
        5 -> {
            return MessageTypeFlags.eticket
        }
        6 -> {
            return MessageTypeFlags.eshop
        }
        7 -> {
            return MessageTypeFlags.notification
        }
        8 -> {
            return MessageTypeFlags.bounce
        }
        9 -> {
            return MessageTypeFlags.official
        }
        10 -> {
            return MessageTypeFlags.script
        }
        11 -> {
            return MessageTypeFlags.dating
        }
        12 -> {
            return MessageTypeFlags.greeting
        }
        13 -> {
            return MessageTypeFlags.news
        }
        14 -> {
            return MessageTypeFlags.sGrouponsite
        }
        15 -> {
            return MessageTypeFlags.sDatingsite
        }
        16 -> {
            return MessageTypeFlags.sETicket
        }
        17 -> {
            return MessageTypeFlags.sBank
        }
        18 -> {
            return MessageTypeFlags.sSocial
        }
        19 -> {
            return MessageTypeFlags.sTravel
        }
        20 -> {
            return MessageTypeFlags.sZDTicket
        }
        21 -> {
            return MessageTypeFlags.sRealty
        }
        23 -> {
            return MessageTypeFlags.sEShop
        }
        24 -> {
            return MessageTypeFlags.sCompany
        }
        35 -> {
            return MessageTypeFlags.sHotels
        }
        64 -> {
            return MessageTypeFlags.transact
        }
        65 -> {
            return MessageTypeFlags.personal
        }
        100 -> {
            return MessageTypeFlags.tNews
        }
        101 -> {
            return MessageTypeFlags.tSocial
        }
        102 -> {
            return MessageTypeFlags.tNotification
        }
        103 -> {
            return MessageTypeFlags.tPeople
        }
        else -> {
            return null
        }
    }
}

