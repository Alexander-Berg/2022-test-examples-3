// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/messages-list/long-swipe-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.YSArray
import com.yandex.xplat.eventus.common.EventusEvent
import com.yandex.xplat.testopithecus.common.*

public open class DeleteMessageByLongSwipeAction(order: Int): BaseDeleteMessageAction(order) {
    open fun performImpl(modelOrApplication: LongSwipe): Unit {
        return modelOrApplication.deleteMessageByLongSwipe(this.order)
    }

    open override fun getActionType(): MBTActionType {
        return DeleteMessageByLongSwipeAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "DeleteMessageByLongSwipeAction"
    }
}

public open class ArchiveMessageByLongSwipeAction(protected var order: Int): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return LongSwipeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        val messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
        val messages = messageListModel.getMessageList(10)
        val actionOnSwipe = GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe()
        val currentContainer = ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer()
        return (this.order < messages.size && actionOnSwipe == ActionOnSwipe.archive && mutableListOf(MessageContainerType.folder, MessageContainerType.search).contains(currentContainer.type) && currentContainer.name != DefaultFolderName.archive)
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        LongSwipeFeature.`get`.forceCast(model).archiveMessageByLongSwipe(this.order)
        LongSwipeFeature.`get`.forceCast(application).archiveMessageByLongSwipe(this.order)
        return history.currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): MBTActionType {
        return ArchiveMessageByLongSwipeAction.type
    }

    open override fun tostring(): String {
        return "ArchiveMessageByLongSwipeAction(${this.order})"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ArchiveMessageByLongSwipeAction"
    }
}

