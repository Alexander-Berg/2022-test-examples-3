// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM events/compose-events.ts >>>

package com.yandex.xplat.eventus

import com.yandex.xplat.eventus.common.EventusEvent
import com.yandex.xplat.eventus.common.ValueMapBuilder

public open class ComposeEvents {
    open fun addReceiver(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_ADD_RECEIVER, ValueMapBuilder.userEvent())
    }

    open fun removeReceiver(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_REMOVE_RECEIVER, ValueMapBuilder.userEvent())
    }

    open fun setSubject(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_SET_SUBJECT, ValueMapBuilder.userEvent())
    }

    open fun editBody(length: Int? = null): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_EDIT_BODY, ValueMapBuilder.userEvent().addLength(length))
    }

    open fun addAttachments(count: Int): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_ADD_ATTACHMENTS, ValueMapBuilder.userEvent().addCount(count))
    }

    open fun removeAttachment(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_REMOVE_ATTACHMENT, ValueMapBuilder.userEvent())
    }

    open fun sendMessage(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_SEND_MESSAGE, ValueMapBuilder.userEvent())
    }

    open fun pressBack(saveDraft: Boolean): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_BACK, ValueMapBuilder.userEvent().addSaveDraft(saveDraft))
    }

    open fun shownCompose(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_SHOWN, ValueMapBuilder.userEvent())
    }

    open fun addPhotoMail(length: Int): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_ADD_PHOTOMAIL, ValueMapBuilder.userEvent().addLength(length))
    }

    open fun addScans(count: Int): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_ADD_SCANS, ValueMapBuilder.userEvent().addCount(count))
    }

    open fun addSelectedScans(count: Int, blanksNumber: Int): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.COMPOSE_ADD_SELECTED_SCANS, ValueMapBuilder.userEvent().addCount(count).addBlanksNumber(blanksNumber))
    }

}

