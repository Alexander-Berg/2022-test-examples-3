// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM events/message-actions-events.ts >>>

package com.yandex.xplat.eventus

import com.yandex.xplat.eventus.common.EventusEvent
import com.yandex.xplat.eventus.common.ValueMapBuilder

public open class MessageActionsEvents {
    open fun reply(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_REPLY, ValueMapBuilder.userEvent())
    }

    open fun replyAll(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_REPLY_ALL, ValueMapBuilder.userEvent())
    }

    open fun forward(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_FORWARD, ValueMapBuilder.userEvent())
    }

    open fun delete(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_DELETE, ValueMapBuilder.userEvent())
    }

    open fun markAsRead(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_MARK_AS_READ, ValueMapBuilder.userEvent())
    }

    open fun markAsUnread(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_MARK_AS_UNREAD, ValueMapBuilder.userEvent())
    }

    open fun markAsImportant(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_MARK_AS_IMPORTANT, ValueMapBuilder.userEvent())
    }

    open fun markAsNotImportant(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_MARK_AS_NOT_IMPORTANT, ValueMapBuilder.userEvent())
    }

    open fun markAsSpam(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_MARK_AS_SPAM, ValueMapBuilder.userEvent())
    }

    open fun markAsNotSpam(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_MARK_AS_NOT_SPAM, ValueMapBuilder.userEvent())
    }

    open fun moveToFolder(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_MOVE_TO_FOLDER, ValueMapBuilder.userEvent())
    }

    open fun markAs(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_MARK_AS, ValueMapBuilder.userEvent())
    }

    open fun archive(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_ARCHIVE, ValueMapBuilder.userEvent())
    }

    open fun cancel(): EventusEvent {
        return EventusEvent.newClientEvent(EventNames.MESSAGE_ACTION_CANCEL, ValueMapBuilder.userEvent())
    }

}

