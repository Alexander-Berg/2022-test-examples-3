// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/messages-list/context-menu-model.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.YSArray
import com.yandex.xplat.common.arrayToSet

public open class ContextMenuModel(private var deleteMessage: DeleteMessageModel, private var importantMessage: MarkableImportantModel, private var markableRead: MarkableReadModel, private var movableToFolder: MovableToFolderModel, private var messageListDisplay: MessageListDisplayModel, private var label: LabelModel, private var spammable: SpamableModel, private var compose: ComposeMessageModel, private var archiveMessage: ArchiveMessageModel): ContextMenu {
    open override fun deleteMessageFromContextMenu(order: Int): Unit {
        this.deleteMessage.deleteMessage(order)
    }

    open override fun markAsImportantFromContextMenu(order: Int): Unit {
        this.importantMessage.markAsImportant(order)
    }

    open override fun markAsUnImportantFromContextMenu(order: Int): Unit {
        this.importantMessage.markAsUnimportant(order)
    }

    open override fun markAsReadFromContextMenu(order: Int): Unit {
        this.markableRead.markAsRead(order)
    }

    open override fun markAsUnreadFromContextMenu(order: Int): Unit {
        this.markableRead.markAsUnread(order)
    }

    open override fun moveToFolderFromContextMenu(order: Int, folderName: FolderName): Unit {
        this.movableToFolder.moveMessageToFolder(order, folderName)
    }

    open override fun archiveFromContextMenu(order: Int): Unit {
        this.archiveMessage.archiveMessage(order)
    }

    open override fun markAsNotSpamFromContextMenu(order: Int): Unit {
        this.spammable.moveFromSpam(order)
    }

    open override fun markAsSpamFromContextMenu(order: Int): Unit {
        this.spammable.moveToSpam(order)
    }

    open override fun applyLabelsFromContextMenu(order: Int, labelNames: YSArray<LabelName>): Unit {
        val mids = this.messageListDisplay.getThreadByOrder(order)
        this.label.applyLabelsToMessages(arrayToSet(mids), labelNames)
    }

    open override fun removeLabelsFromContextMenu(order: Int, labelNames: YSArray<LabelName>): Unit {
        val mids = this.messageListDisplay.getThreadByOrder(order)
        this.label.removeLabelsFromMessages(arrayToSet(mids), labelNames)
    }

    open override fun openForwardComposeFromContextMenu(order: Int): Unit {
    }

    open override fun openReplyAllComposeFromContextMenu(order: Int): Unit {
    }

    open override fun openReplyComposeFromContextMenu(order: Int): Unit {
        this.compose.goToMessageReply()
    }

}

