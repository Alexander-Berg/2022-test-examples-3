// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/mail-view-features.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.YSArray
import com.yandex.xplat.common.YSSet
import com.yandex.xplat.testopithecus.common.Feature

public open class MessageViewerAndroidFeature private constructor(): Feature<MessageViewerAndroid>("MessageViewerAndroid", "Специфичные для андроида действия с открытым письмом.") {
    companion object {
        @JvmStatic var `get`: MessageViewerAndroidFeature = MessageViewerAndroidFeature()
    }
}

public interface MessageViewerAndroid {
    fun deleteMessageByIcon(): Unit
}

public open class MessageViewerFeature private constructor(): Feature<MessageViewer>("MessageViewer", "Фича для управления открытым письмом." + "Несколько меток добавляются установкой нескольких чекбоксов в popup") {
    companion object {
        @JvmStatic var `get`: MessageViewerFeature = MessageViewerFeature()
    }
}

public interface MessageViewer {
    fun openMessage(order: Int): Unit
    fun closeMessage(): Unit
    fun deleteCurrentMessage(): Unit
    fun getOpenedMessage(): FullMessageView
    fun checkIfRead(): Boolean
    fun markAsRead(): Unit
    fun markAsUnread(): Unit
    fun checkIfSpam(): Boolean
    fun markAsSpam(): Unit
    fun unmarkAsSpam(): Unit
    fun checkIfImportant(): Boolean
    fun markAsImportant(): Unit
    fun markAsUnimportant(): Unit
    fun moveMessageToFolder(folderName: FolderName): Unit
    fun addLabels(labels: YSArray<LabelName>): Unit
    fun deleteLabels(labels: YSArray<LabelName>): Unit
    fun getLabels(): YSSet<String>
    fun archive(): Unit
    fun deleteLabelsFromHeader(labels: YSArray<LabelName>): Unit
    fun markAsUnimportantFromHeader(): Unit
}

public open class ThreadViewNavigatorFeature private constructor(): Feature<ThreadViewNavigator>("ThreadViewNavigator", "В Android приложении при просмотре письма сверху есть навигация вверх/вниз, а еще можно удалить тред") {
    companion object {
        @JvmStatic val `get`: ThreadViewNavigatorFeature = ThreadViewNavigatorFeature()
    }
}

public interface ThreadViewNavigator {
    fun deleteCurrentThread(): Unit
}

public interface FullMessageView {
    val head: MessageView
    val to: YSSet<String>
    val body: String
    fun tostring(): String
}

public interface MessageView {
    var from: String
    var to: String
    val subject: String
    val read: Boolean
    val important: Boolean
    var threadCounter: Int?
    val attachments: YSArray<AttachmentView>
    val firstLine: String
    val timestamp: Long
    fun tostring(): String
}

public interface AttachmentView {
    val displayName: String
}

