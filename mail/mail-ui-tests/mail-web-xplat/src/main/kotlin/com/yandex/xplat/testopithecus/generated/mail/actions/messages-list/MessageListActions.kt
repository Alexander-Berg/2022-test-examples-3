// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/messages-list/message-list-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.YSArray
import com.yandex.xplat.eventus.Eventus
import com.yandex.xplat.eventus.common.EventusEvent
import com.yandex.xplat.testopithecus.common.*

public open class RefreshMessageListAction(): BaseSimpleAction<MessageListDisplay, MBTComponent>(RefreshMessageListAction.type) {
    open override fun requiredFeature(): Feature<MessageListDisplay> {
        return MessageListDisplayFeature.`get`
    }

    open override fun performImpl(modelOrApplication: MessageListDisplay, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.refreshMessageList()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf(Eventus.messageListEvents.refreshMessageList())
    }

    open override fun tostring(): String {
        return "RefreshMessageList"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "RefreshMessageList"
    }
}

public open class IsDisplayNotificationTabsAction(private var tabsName: String): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val currentContainer = ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer()
        val isInTabs = FolderNavigatorFeature.`get`.forceCast(model).isInTabsMode()
        return (isInTabs && currentContainer.name == DefaultFolderName.inbox && (this.tabsName == DefaultFolderName.mailingLists || this.tabsName == DefaultFolderName.socialNetworks))
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        TabsFeature.`get`.forceCast(model).isDisplayNotificationTabs(this.tabsName)
        TabsFeature.`get`.forceCast(application).isDisplayNotificationTabs(this.tabsName)
        return history.currentComponent
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return TabsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun getActionType(): MBTActionType {
        return IsDisplayNotificationTabsAction.type
    }

    open override fun tostring(): String {
        return this.getActionType()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "IsDisplayNotificationTabs"
    }
}

public open class GetPositionTabsNotificationInMessageList(private var tabsName: String): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val currentContainer = ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer()
        val isInTabs = FolderNavigatorFeature.`get`.forceCast(model).isInTabsMode()
        return (isInTabs && currentContainer.name == DefaultFolderName.inbox && (this.tabsName == DefaultFolderName.mailingLists || this.tabsName == DefaultFolderName.socialNetworks))
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        TabsFeature.`get`.forceCast(model).getPositionTabsNotification(this.tabsName)
        TabsFeature.`get`.forceCast(application).getPositionTabsNotification(this.tabsName)
        return history.currentComponent
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return TabsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun getActionType(): MBTActionType {
        return GetPositionTabsNotificationInMessageList.type
    }

    open override fun tostring(): String {
        return this.getActionType()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "GetPositionTabsNotificationInMessageList"
    }
}

public open class GoToAccountSwitcherAction: MBTAction {
    open override fun canBePerformed(_model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, _history: MBTHistory): MBTComponent {
        MessageListDisplayFeature.`get`.forceCast(model).goToAccountSwitcher()
        MessageListDisplayFeature.`get`.forceCast(application).goToAccountSwitcher()
        return AccountSwitcherComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return MessageListDisplayFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun getActionType(): MBTActionType {
        return GoToAccountSwitcherAction.type
    }

    open override fun tostring(): String {
        return this.getActionType()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "GoToAccountSwitcher"
    }
}

