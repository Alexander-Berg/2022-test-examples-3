// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM utils/utils.ts >>>

import Foundation

@discardableResult
public func filterByOrders<T>(_ array: YSArray<T>, _ byOrders: YSSet<Int32>) -> YSArray<T> {
  let result: YSArray<T> = YSArray()
  for i in byOrders.values() {
    result.push(array[i])
  }
  return result
}

@discardableResult
public func min(_ a: Int32, _ b: Int32) -> Int32 {
  return a < b ? a : b
}

@discardableResult
public func max(_ a: Int32, _ b: Int32) -> Int32 {
  return a > b ? a : b
}

@discardableResult
public func valuesArray<K, V>(_ iterable: YSMap<K, V>) -> YSArray<V> {
  let result: YSArray<V> = YSArray()
  for element in iterable.values() {
    result.push(element)
  }
  return result
}

@discardableResult
public func reduced(_ id: ID) -> String {
  let s = id.toString()
  return s.slice(s.length - 3, s.length)
}

@discardableResult
public func display(_ email: Email) -> String {
  return "\(email.login)@\(email.domain)"
}

@discardableResult
public func copyArray<T>(_ array: YSArray<T>) -> YSArray<T> {
  let result: YSArray<T> = YSArray()
  for element in array {
    result.push(element)
  }
  return result
}

@discardableResult
public func copySet<T>(_ set: YSSet<T>) -> YSSet<T> {
  let result: YSSet<T> = YSSet<T>()
  for element in set.values() {
    result.add(element)
  }
  return result
}

@discardableResult
public func copyMap<T, S>(_ map: YSMap<T, S>) -> YSMap<T, S> {
  let result: YSMap<T, S> = YSMap<T, S>()
  map.__forEach(({
    value, key in
    result.set(key, value)
    }
  ))
  return result
}

@discardableResult
public func requireNonNull<T>(_ obj: T!, _ message: String) -> T {
  if obj == nil {
    fatalError(message)
  }
  return obj!
}
