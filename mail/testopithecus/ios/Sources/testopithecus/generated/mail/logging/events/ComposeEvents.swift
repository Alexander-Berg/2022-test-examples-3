// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/logging/events/compose-events.ts >>>

import Foundation

open class ComposeEvents {
  @discardableResult
  open func addReceiver() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.COMPOSE_ADD_RECEIVER, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func removeReceiver() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.COMPOSE_REMOVE_RECEIVER, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func setSubject() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.COMPOSE_SET_SUBJECT, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func editBody(_ length: Int32! = nil) -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.COMPOSE_EDIT_BODY, ValueMapBuilder.userEvent().addLength(length))
  }

  @discardableResult
  open func addAttachments(_ count: Int32) -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.COMPOSE_ADD_ATTACHMENTS, ValueMapBuilder.userEvent().addCount(count))
  }

  @discardableResult
  open func removeAttachment() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.COMPOSE_REMOVE_ATTACHMENT, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func sendMessage() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.COMPOSE_SEND_MESSAGE, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func pressBack(_ saveDraft: Bool) -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.COMPOSE_BACK, ValueMapBuilder.userEvent().addSaveDraft(saveDraft))
  }
}
