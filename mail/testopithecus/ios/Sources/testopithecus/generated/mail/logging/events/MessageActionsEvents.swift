// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/logging/events/message-actions-events.ts >>>

import Foundation

open class MessageActionsEvents {
  @discardableResult
  open func reply() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_REPLY, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func replyAll() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_REPLY_ALL, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func forward() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_FORWARD, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func delete() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_DELETE, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func markAsRead() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_MARK_AS_READ, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func markAsUnread() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_MARK_AS_UNREAD, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func markAsImportant() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_MARK_AS_IMPORTANT, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func markAsNotImportant() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_MARK_AS_NOT_IMPORTANT, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func markAsSpam() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_MARK_AS_SPAM, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func markAsNotSpam() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_MARK_AS_NOT_SPAM, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func moveToFolder() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_MOVE_TO_FOLDER, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func markAs() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_MARK_AS, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func archive() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_ARCHIVE, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func cancel() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.MESSAGE_ACTION_CANCEL, ValueMapBuilder.userEvent())
  }
}
