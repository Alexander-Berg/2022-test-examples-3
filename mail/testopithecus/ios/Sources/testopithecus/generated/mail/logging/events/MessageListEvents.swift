// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/logging/events/message-list-events.ts >>>

import Foundation

open class MessageListEvents {
  @discardableResult
  open func openMessage(_ order: Int32, _ mid: Int64) -> TestopithecusEvent {
    if order < 0 {
      return Testopithecus.eventCreationErrorEvent(EventNames.LIST_MESSAGE_OPEN, "Order must be equal or greater then 0. Was: \(order)")
    }
    return TestopithecusEvent(EventNames.LIST_MESSAGE_OPEN, ValueMapBuilder.userEvent().addOrder(order).addMid(mid))
  }

  @discardableResult
  open func deleteMessage(_ order: Int32, _ mid: Int64) -> TestopithecusEvent {
    if order < 0 {
      return Testopithecus.eventCreationErrorEvent(EventNames.LIST_MESSAGE_DELETE, "Order must be equal or greater then 0. Was: \(order)")
    }
    return TestopithecusEvent(EventNames.LIST_MESSAGE_DELETE, ValueMapBuilder.userEvent().addOrder(order).addMid(mid))
  }

  @discardableResult
  open func openMessageActions(_ order: Int32, _ mid: Int64) -> TestopithecusEvent {
    if order < 0 {
      return Testopithecus.eventCreationErrorEvent(EventNames.LIST_MESSAGE_OPEN_ACTIONS, "Order must be equal or greater then 0. Was: \(order)")
    }
    return TestopithecusEvent(EventNames.LIST_MESSAGE_OPEN_ACTIONS, ValueMapBuilder.userEvent().addOrder(order).addMid(mid))
  }

  @discardableResult
  open func refreshMessageList() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.LIST_MESSAGE_REFRESH, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func writeNewMessage() -> TestopithecusEvent {
    return TestopithecusEvent(EventNames.LIST_MESSAGE_WRITE_NEW_MESSAGE, ValueMapBuilder.userEvent())
  }

  @discardableResult
  open func markMessageAsRead(_ order: Int32, _ mid: Int64) -> TestopithecusEvent {
    if order < 0 {
      return Testopithecus.eventCreationErrorEvent(EventNames.LIST_MESSAGE_MARK_AS_READ, "Order must be equal or greater then 0. Was: \(order)")
    }
    return TestopithecusEvent(EventNames.LIST_MESSAGE_MARK_AS_READ, ValueMapBuilder.userEvent().addOrder(order).addMid(mid))
  }

  @discardableResult
  open func markMessageAsUnread(_ order: Int32, _ mid: Int64) -> TestopithecusEvent {
    if order < 0 {
      return Testopithecus.eventCreationErrorEvent(EventNames.LIST_MESSAGE_MARK_AS_UNREAD, "Order must be equal or greater then 0. Was: \(order)")
    }
    return TestopithecusEvent(EventNames.LIST_MESSAGE_MARK_AS_UNREAD, ValueMapBuilder.userEvent().addOrder(order).addMid(mid))
  }

  @discardableResult
  open func toggleMarkMessageAsRead(_ read: Bool, _ order: Int32, _ mid: Int64) -> TestopithecusEvent {
    return read ? markMessageAsRead(order, mid) : markMessageAsUnread(order, mid)
  }
}
