sharpei: http://sharpei-testing.mail.yandex.net
db_user: cron
log_level: 20
db_host_status_poll_time: !TimeDelta {seconds: 10}
signals:
    - query: >
            SELECT reltuples as mail_messages_rownum FROM pg_class WHERE oid='mail.messages'::regclass;
      run_every: !TimeDelta {minutes: 5}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT reltuples as deleted_box_rownum FROM pg_class WHERE oid='mail.deleted_box'::regclass;
      run_every: !TimeDelta {minutes: 5}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT pg_total_relation_size('mail.deleted_box') as deleted_box_size
      run_every: !TimeDelta {minutes: 5}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT pg_total_relation_size('mail.messages') as mail_messages_size
      run_every: !TimeDelta {minutes: 5}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT COALESCE(SUM(CASE WHEN fid ='3' THEN 1 ELSE 0 END),0) trash_count,
                   COALESCE(SUM(CASE WHEN fid ='2' THEN 1 ELSE 0 END),0) spam_count,
                   COALESCE(SUM(CASE WHEN f.type = 'hidden_trash' THEN 1 ELSE 0 END),0) hidden_trash_count
            FROM mail.box m JOIN mail.folders f using (uid, fid)
            WHERE ((fid=2 AND doom_date < now() - INTERVAL '10 DAY') OR
                   (fid=3 AND doom_date < now() - INTERVAL '30 DAY') OR
                   (f.type = 'hidden_trash' AND doom_date < now() - INTERVAL '185 DAY'))
            AND EXISTS (SELECT 1 FROM mail.users u WHERE m.uid=u.uid AND is_here)
      run_every: !TimeDelta {hours: 6}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT COUNT(1) AS deleted_box_count FROM mail.deleted_box db WHERE deleted_date < now() - INTERVAL '3 DAY'
            AND EXISTS (SELECT 1 FROM mail.users u WHERE u.uid=db.uid AND u.is_here)
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT relname table_live_tup, n_live_tup FROM pg_stat_all_tables
            WHERE relname IN ('deleted_box', 'box', 'messages', 'labels', 'threads', 'message_references',
            'pop3_box', 'folders', 'storage_delete_queue') AND schemaname='mail'
      run_every: !TimeDelta {minutes: 10}
      row_signal: true
      tier_run_policy: !TierRunPolicy master
    - query: >
             SELECT pg_database_size('maildb') as used_size
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy master
    - query: >
             SELECT sum(GREATEST(bloat_size_bytes, 0)) AS bloat_size FROM code.get_heap_bloat_info()
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy master
    - query: >
            SELECT state backups_in_state, count(*)
            FROM backup.backups GROUP BY state;
      run_every: !TimeDelta {minutes: 10}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT state restores_in_state, count(*)
            FROM backup.restores GROUP BY state;
      run_every: !TimeDelta {minutes: 10}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT count(1) AS pop3_init_queue FROM mail.folders WHERE (pop3state).enabled = true AND (pop3state).initialized = false
      run_every: !TimeDelta {minutes: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT REPLACE(usename||'_'||state,' ', '_') state, cnt
            FROM (SELECT COUNT(1) AS cnt,state,usename FROM pg_stat_activity GROUP BY usename, state) t
      run_every: !TimeDelta {seconds: 12}
      row_signal: true
      tier_run_policy: !TierRunPolicy all
    - query: >
        SELECT SUM(n_tup_ins) stat_tup_ins, SUM(n_tup_upd) stat_tup_upd, SUM(n_tup_del) stat_tup_del,
        SUM(n_tup_hot_upd) stat_tup_hot_upd, SUM(n_live_tup) stat_live_tup, SUM(n_dead_tup) stat_dead_tup FROM pg_stat_all_tables
      run_every: !TimeDelta {seconds: 30}
      row_signal: false
      tier_run_policy: !TierRunPolicy master
    - query: >
            SELECT count(1) as storage_delete_queue_count FROM mail.storage_delete_queue
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT count(1) as storage_delete_queue_active_count FROM mail.storage_delete_queue where deleted_date < now() - INTERVAL '7 DAY'
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT sum(message_size) AS message_storage_size FROM mail.folders
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT COALESCE(SUM(CASE WHEN state = 'active' THEN 1 ELSE 0 END), 0) users_acounts_active,
                   COALESCE(SUM(CASE WHEN state = 'inactive' THEN 1 ELSE 0 END), 0) users_acounts_inactive,
                   COALESCE(SUM(CASE WHEN state = 'notified' AND notifies_count = 0 THEN 1 ELSE 0 END), 0) users_acounts_notified0,
                   COALESCE(SUM(CASE WHEN state = 'notified' AND notifies_count = 1 THEN 1 ELSE 0 END), 0) users_acounts_notified1,
                   COALESCE(SUM(CASE WHEN state = 'notified' AND notifies_count = 2 THEN 1 ELSE 0 END), 0) users_acounts_notified2,
                   COALESCE(SUM(CASE WHEN state = 'notified' AND notifies_count = -1 THEN 1 ELSE 0 END), 0) users_acounts_notified_foreign,
                   COALESCE(SUM(CASE WHEN state = 'notified' AND notifies_count = -2 THEN 1 ELSE 0 END), 0) users_acounts_notified_nonmail,
                   COALESCE(SUM(CASE WHEN state = 'notified' AND notifies_count = -3 THEN 1 ELSE 0 END), 0) users_acounts_notified_bad_def_email,
                   COALESCE(SUM(CASE WHEN state = 'notified' AND notifies_count = -4 THEN 1 ELSE 0 END), 0) users_acounts_notified_direct,
                   COALESCE(SUM(CASE WHEN state = 'frozen' AND notifies_count != -5 THEN 1 ELSE 0 END), 0) users_acounts_frozen,
                   COALESCE(SUM(CASE WHEN state = 'frozen' AND notifies_count = -5 THEN 1 ELSE 0 END), 0) users_acounts_frozen_bb_active,
                   COALESCE(SUM(CASE WHEN state = 'archived' AND notifies_count != -5 THEN 1 ELSE 0 END), 0) users_acounts_archived,
                   COALESCE(SUM(CASE WHEN state = 'archived' AND notifies_count = -5 THEN 1 ELSE 0 END), 0) users_acounts_archived_bb_active,
                   COALESCE(SUM(CASE WHEN state = 'deleted' THEN 1 ELSE 0 END), 0) users_acounts_deleted,
                   COALESCE(SUM(CASE WHEN state = 'special' THEN 1 ELSE 0 END), 0) users_acounts_special,
                   COALESCE(count(*), 0) users_acounts_total
            FROM mail.users
            WHERE is_here and not is_deleted
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT COALESCE(SUM(CASE WHEN state='active' THEN message_count ELSE 0 END), 0) users_messages_active,
                   COALESCE(SUM(CASE WHEN state='inactive' THEN message_count ELSE 0 END), 0) users_messages_inactive,
                   COALESCE(SUM(CASE WHEN state='notified' AND notifies_count=0 THEN message_count ELSE 0 END), 0) users_messages_notified0,
                   COALESCE(SUM(CASE WHEN state='notified' AND notifies_count=1 THEN message_count ELSE 0 END), 0) users_messages_notified1,
                   COALESCE(SUM(CASE WHEN state='notified' AND notifies_count=2 THEN message_count ELSE 0 END), 0) users_messages_notified2,
                   COALESCE(SUM(CASE WHEN state='frozen' THEN message_count ELSE 0 END), 0) users_messages_frozen,
                   COALESCE(SUM(CASE WHEN state='archived' THEN message_count ELSE 0 END), 0) users_messages_archived,
                   COALESCE(SUM(CASE WHEN state='deleted' THEN message_count ELSE 0 END), 0) users_messages_deleted,
                   COALESCE(SUM(CASE WHEN state='special' THEN message_count ELSE 0 END), 0) users_messages_special,
                   COALESCE(SUM(message_count), 0) users_messages_total
            FROM mail.users 
            JOIN mail.folders
            USING (uid)
            WHERE is_here and not is_deleted
      run_every: !TimeDelta {hours: 6}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT ma.state archive_state, count(*) users_count
            FROM mail.archives ma
            JOIN mail.users mu
            USING (uid)
            WHERE is_here
            GROUP BY ma.state
      run_every: !TimeDelta {hours: 1}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT ma.state archive_state_outdated, count(*) users_count
            FROM mail.archives ma
            JOIN mail.users mu
            USING (uid)
            WHERE mu.is_here
            AND ma.updated < now() - interval '11 DAY'
            AND mu.last_state_update < now() - interval '11 DAY'
            AND mu.state in ('active', 'deleted')
            AND ma.state in ('cleaning_in_progress', 'restoration_complete', 'archivation_in_progress') 
            GROUP BY ma.state
      run_every: !TimeDelta {hours: 1}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT count(*) long_archive_restorations
            FROM mail.archives ma
            JOIN mail.users mu
            USING (uid)
            WHERE mu.is_here
            AND ma.updated < now() - interval '1 DAY'
            AND mu.state = 'active'
            AND ma.state = 'restoration_in_progress' 
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT count(*) long_backup_restorations
            FROM backup.restores br
            JOIN mail.users mu
            USING (uid)
            WHERE br.state = 'in_progress'
            AND mu.is_here
            AND br.created < now() - interval '1 DAY'
      run_every: !TimeDelta {hours: 1}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT schemaname || '.' || relname AS table_size, pg_total_relation_size(schemaname || '.' || relname) AS size
            FROM pg_stat_all_tables where schemaname in ('mail', 'filters', 'contacts', 'settings') 
            ORDER BY 2 DESC LIMIT 10
      run_every: !TimeDelta {minutes: 10}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT type folder_type, sum(message_count) message_sum FROM mail.folders group by type
      run_every: !TimeDelta {hours: 1}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT data_version,COUNT(1) FROM mail.users GROUP BY data_version
      run_every: !TimeDelta {hours: 1}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT COALESCE(SUM(CASE WHEN is_here ='t' THEN 1 ELSE 0 END),0) is_here,
            COALESCE(SUM(CASE WHEN is_here ='f' THEN 1 ELSE 0 END),0) is_not_here FROM mail.users
      run_every: !TimeDelta {minutes: 10}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT max(version) AS last_migration, 1 AS size
            FROM schema_version
      run_every: !TimeDelta {minutes: 10}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            select tablename as premade_partitions, premade from util.check_partitions();
      run_every: !TimeDelta {minutes: 15}
      row_signal: true
      tier_run_policy: !TierRunPolicy any_host
    - query: >
            SELECT COALESCE(SUM(CASE WHEN is_here ='t' THEN 1 ELSE 0 END),0) contacts_is_here,
            COALESCE(SUM(CASE WHEN is_here ='f' THEN 1 ELSE 0 END),0) contacts_is_not_here FROM contacts.users
      run_every: !TimeDelta {minutes: 10}
      row_signal: false
      tier_run_policy: !TierRunPolicy any_host
